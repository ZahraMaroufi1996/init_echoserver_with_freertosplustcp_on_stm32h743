
FreeRTOS-TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08012dc4  08012dc4  00022dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080130ac  080130ac  000230ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080130b0  080130b0  000230b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  24000000  080130b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ethernet_data 00003080  240000a0  08013150  000300a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000640c  24003120  080161d0  00033120  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400952c  080161d0  0003952c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00033120  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044316  00000000  00000000  0003314e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006f6a  00000000  00000000  00077464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021d8  00000000  00000000  0007e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002030  00000000  00000000  000805a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009262  00000000  00000000  000825d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028116  00000000  00000000  0008b83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175991  00000000  00000000  000b3950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002292e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000099b4  00000000  00000000  00229334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003120 	.word	0x24003120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012dac 	.word	0x08012dac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003124 	.word	0x24003124
 80002dc:	08012dac 	.word	0x08012dac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
     MPU_Config();
 8000384:	f000 fa64 	bl	8000850 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <main+0x78>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000390:	2b00      	cmp	r3, #0
 8000392:	d11b      	bne.n	80003cc <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000394:	f3bf 8f4f 	dsb	sy
}
 8000398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039a:	f3bf 8f6f 	isb	sy
}
 800039e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <main+0x78>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003a8:	f3bf 8f4f 	dsb	sy
}
 80003ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ae:	f3bf 8f6f 	isb	sy
}
 80003b2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <main+0x78>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <main+0x78>)
 80003ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c0:	f3bf 8f4f 	dsb	sy
}
 80003c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c6:	f3bf 8f6f 	isb	sy
}
 80003ca:	e000      	b.n	80003ce <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003cc:	bf00      	nop
  SCB_EnableICache();
//  SCB_EnableDCache();
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ce:	f000 fde3 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d2:	f000 f819 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d6:	f000 f8ab 	bl	8000530 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_RNG_Init();
 80003da:	f000 f893 	bl	8000504 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003de:	f003 fe17 	bl	8004010 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <main+0x7c>)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <main+0x80>)
 80003e8:	f003 fe5c 	bl	80040a4 <osThreadNew>
 80003ec:	4603      	mov	r3, r0
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <main+0x84>)
 80003f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003f2:	f003 fe31 	bl	8004058 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <main+0x76>
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	08012ee8 	.word	0x08012ee8
 8000400:	080006b5 	.word	0x080006b5
 8000404:	240093a4 	.word	0x240093a4

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b09c      	sub	sp, #112	; 0x70
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000412:	224c      	movs	r2, #76	; 0x4c
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f011 fb8d 	bl	8011b36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2220      	movs	r2, #32
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f011 fb87 	bl	8011b36 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000428:	2002      	movs	r0, #2
 800042a:	f001 f957 	bl	80016dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <SystemClock_Config+0xf4>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a31      	ldr	r2, [pc, #196]	; (80004fc <SystemClock_Config+0xf4>)
 8000438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <SystemClock_Config+0xf4>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <SystemClock_Config+0xf8>)
 800044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044c:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <SystemClock_Config+0xf8>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <SystemClock_Config+0xf8>)
 8000456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000458:	f003 0301 	and.w	r3, r3, #1
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000460:	bf00      	nop
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <SystemClock_Config+0xf4>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046e:	d1f8      	bne.n	8000462 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000470:	2322      	movs	r3, #34	; 0x22
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000474:	2301      	movs	r3, #1
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	2302      	movs	r3, #2
 8000482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000484:	2300      	movs	r3, #0
 8000486:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000488:	2304      	movs	r3, #4
 800048a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800048c:	233c      	movs	r3, #60	; 0x3c
 800048e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000490:	2302      	movs	r3, #2
 8000492:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000494:	2302      	movs	r3, #2
 8000496:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000498:	2302      	movs	r3, #2
 800049a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800049c:	230c      	movs	r3, #12
 800049e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f94f 	bl	8001750 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004b8:	f000 fa1c 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	233f      	movs	r3, #63	; 0x3f
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2303      	movs	r3, #3
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004c8:	2308      	movs	r3, #8
 80004ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004cc:	2340      	movs	r3, #64	; 0x40
 80004ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004da:	2340      	movs	r3, #64	; 0x40
 80004dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2104      	movs	r1, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fd44 	bl	8001f70 <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004ee:	f000 fa01 	bl	80008f4 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3770      	adds	r7, #112	; 0x70
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	58024800 	.word	0x58024800
 8000500:	58000400 	.word	0x58000400

08000504 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_RNG_Init+0x24>)
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_RNG_Init+0x28>)
 800050c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_RNG_Init+0x24>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_RNG_Init+0x24>)
 8000516:	f003 f987 	bl	8003828 <HAL_RNG_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000520:	f000 f9e8 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	240093a8 	.word	0x240093a8
 800052c:	48021800 	.word	0x48021800

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <MX_GPIO_Init+0x104>)
 8000548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800054c:	4a39      	ldr	r2, [pc, #228]	; (8000634 <MX_GPIO_Init+0x104>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <MX_GPIO_Init+0x104>)
 8000558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_GPIO_Init+0x104>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	4a32      	ldr	r2, [pc, #200]	; (8000634 <MX_GPIO_Init+0x104>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_GPIO_Init+0x104>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <MX_GPIO_Init+0x104>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	4a2a      	ldr	r2, [pc, #168]	; (8000634 <MX_GPIO_Init+0x104>)
 800058a:	f043 0302 	orr.w	r3, r3, #2
 800058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <MX_GPIO_Init+0x104>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <MX_GPIO_Init+0x104>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	4a23      	ldr	r2, [pc, #140]	; (8000634 <MX_GPIO_Init+0x104>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <MX_GPIO_Init+0x104>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_GPIO_Init+0x104>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <MX_GPIO_Init+0x104>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_GPIO_Init+0x104>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f244 0101 	movw	r1, #16385	; 0x4001
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <MX_GPIO_Init+0x108>)
 80005e4:	f001 f860 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	4813      	ldr	r0, [pc, #76]	; (800063c <MX_GPIO_Init+0x10c>)
 80005ee:	f001 f85b 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80005f2:	f244 0301 	movw	r3, #16385	; 0x4001
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x108>)
 800060c:	f000 fe9c 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_GPIO_Init+0x10c>)
 8000628:	f000 fe8e 	bl	8001348 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	58024400 	.word	0x58024400
 8000638:	58020400 	.word	0x58020400
 800063c:	58021000 	.word	0x58021000

08000640 <ulApplicationGetNextSequenceNumber>:
{
	return "MY_HOST_NAME";
}

uint32_t ulApplicationGetNextSequenceNumber(uint32_t ulSourceAddress, uint16_t usSourcePort, uint32_t ulDestinationAddress, uint16_t usDestinationPort)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	461a      	mov	r2, r3
 800064c:	460b      	mov	r3, r1
 800064e:	817b      	strh	r3, [r7, #10]
 8000650:	4613      	mov	r3, r2
 8000652:	813b      	strh	r3, [r7, #8]
	//todo this is not correct is just to get the thing to compile
//	static uint32_t counter = 0;
//	return counter++;
	 return (uint32_t)rand();
 8000654:	f011 fad2 	bl	8011bfc <rand>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	static BaseType_t xTasksAlreadyCreated = pdFALSE;

	/* Both eNetworkUp and eNetworkDown events can be processed here. */
	if( eNetworkEvent == eNetworkUp )
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <vApplicationIPNetworkEventHook+0x1e>
	{
		/* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
		if( xTasksAlreadyCreated == pdFALSE )
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <vApplicationIPNetworkEventHook+0x2c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <vApplicationIPNetworkEventHook+0x1e>
			/*
			 * For convenience, tasks that use FreeRTOS+TCP can be created here
			 * to ensure they are not created before the network is usable.
			 */

			xTasksAlreadyCreated = pdTRUE;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <vApplicationIPNetworkEventHook+0x2c>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2400313c 	.word	0x2400313c

08000694 <xApplicationGetRandomNumber>:

BaseType_t xApplicationGetRandomNumber(uint32_t *pulNumber)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 800069c:	f011 faae 	bl	8011bfc <rand>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80006a8:	2301      	movs	r3, #1
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0b2      	sub	sp, #200	; 0xc8
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	6078      	str	r0, [r7, #4]

	// TCP echo server/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		struct freertos_sockaddr xClient, xBindAddress;
		Socket_t xListeningSocket, xConnectedSocket;
		socklen_t xSize = sizeof(xClient);
 80006bc:	2308      	movs	r3, #8
 80006be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		static const TickType_t xReceiveTimeOut = portMAX_DELAY;
		const BaseType_t xBacklog = 20;
 80006c2:	2314      	movs	r3, #20
 80006c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		uint8_t Buffer[128];
		BaseType_t xAlreadyTransmitted = 0, xBytesSent = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		size_t xLenToSend;

		FreeRTOS_IPInit(ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress);
 80006d4:	4b57      	ldr	r3, [pc, #348]	; (8000834 <StartDefaultTask+0x180>)
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <StartDefaultTask+0x184>)
 80006da:	4a58      	ldr	r2, [pc, #352]	; (800083c <StartDefaultTask+0x188>)
 80006dc:	4958      	ldr	r1, [pc, #352]	; (8000840 <StartDefaultTask+0x18c>)
 80006de:	4859      	ldr	r0, [pc, #356]	; (8000844 <StartDefaultTask+0x190>)
 80006e0:	f007 fedc 	bl	800849c <FreeRTOS_IPInit>

		xListeningSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80006e4:	2206      	movs	r2, #6
 80006e6:	2101      	movs	r1, #1
 80006e8:	2002      	movs	r0, #2
 80006ea:	f009 f90b 	bl	8009904 <FreeRTOS_socket>
 80006ee:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		configASSERT(xListeningSocket != FREERTOS_INVALID_SOCKET); /* Check the socket was created. */
 80006f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fa:	d10b      	bne.n	8000714 <StartDefaultTask+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	f3bf 8f6f 	isb	sy
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000710:	bf00      	nop
 8000712:	e7fe      	b.n	8000712 <StartDefaultTask+0x5e>

		FreeRTOS_setsockopt(xListeningSocket, 0, FREERTOS_SO_RCVTIMEO, &xReceiveTimeOut, sizeof(xReceiveTimeOut));
 8000714:	2304      	movs	r3, #4
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <StartDefaultTask+0x194>)
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000722:	f009 fbb9 	bl	8009e98 <FreeRTOS_setsockopt>

		xBindAddress.sin_port = FreeRTOS_htons((uint16_t )10000);
 8000726:	f241 0327 	movw	r3, #4135	; 0x1027
 800072a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		FreeRTOS_bind(xListeningSocket, &xBindAddress, sizeof(struct freertos_sockaddr));
 800072e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000732:	2208      	movs	r2, #8
 8000734:	4619      	mov	r1, r3
 8000736:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800073a:	f009 f97b 	bl	8009a34 <FreeRTOS_bind>
		FreeRTOS_listen(xListeningSocket, xBacklog);
 800073e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000742:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000746:	f00a f913 	bl	800a970 <FreeRTOS_listen>

	for (;;)
	{
		/* Wait for incoming connections. */
		xConnectedSocket = FreeRTOS_accept(xListeningSocket, &xClient, &xSize);
 800074a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800074e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000752:	4619      	mov	r1, r3
 8000754:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000758:	f009 fe3d 	bl	800a3d6 <FreeRTOS_accept>
 800075c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		configASSERT(xConnectedSocket != FREERTOS_INVALID_SOCKET);
 8000760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d10b      	bne.n	8000782 <StartDefaultTask+0xce>
	__asm volatile
 800076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076e:	f383 8811 	msr	BASEPRI, r3
 8000772:	f3bf 8f6f 	isb	sy
 8000776:	f3bf 8f4f 	dsb	sy
 800077a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
}
 800077e:	bf00      	nop
 8000780:	e7fe      	b.n	8000780 <StartDefaultTask+0xcc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2101      	movs	r1, #1
 8000786:	4831      	ldr	r0, [pc, #196]	; (800084c <StartDefaultTask+0x198>)
 8000788:	f000 ff8e 	bl	80016a8 <HAL_GPIO_WritePin>

		size_t xTotalLength = FreeRTOS_recv(xConnectedSocket, Buffer, 128, 0);
 800078c:	f107 0108 	add.w	r1, r7, #8
 8000790:	2300      	movs	r3, #0
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000798:	f009 feeb 	bl	800a572 <FreeRTOS_recv>
 800079c:	4603      	mov	r3, r0
 800079e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		// HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

		//	const size_t xTotalLength = strlen(Buffer);

		xAlreadyTransmitted = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		xBytesSent = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

		while (xAlreadyTransmitted < xTotalLength)
 80007ae:	e01f      	b.n	80007f0 <StartDefaultTask+0x13c>
		{
			xLenToSend = xTotalLength - xAlreadyTransmitted;
 80007b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			//				xBytesSent = FreeRTOS_send(xConnectedSocket,Buffer,
			//						xLenToSend, 0);
			xBytesSent = FreeRTOS_send(xConnectedSocket, &Buffer[xAlreadyTransmitted],
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007c6:	18d1      	adds	r1, r2, r3
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80007ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80007d2:	f00a f808 	bl	800a7e6 <FreeRTOS_send>
 80007d6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
					xLenToSend, 0);

			//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

			if (xBytesSent >= 0)
 80007da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0d      	blt.n	80007fe <StartDefaultTask+0x14a>
			{
				xAlreadyTransmitted += xBytesSent;
 80007e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80007e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007ea:	4413      	add	r3, r2
 80007ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while (xAlreadyTransmitted < xTotalLength)
 80007f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8d9      	bhi.n	80007b0 <StartDefaultTask+0xfc>
 80007fc:	e000      	b.n	8000800 <StartDefaultTask+0x14c>
			}

			else
			{
				break;
 80007fe:	bf00      	nop
			}
		}

		FreeRTOS_shutdown(xConnectedSocket, FREERTOS_SHUT_RDWR);
 8000800:	2102      	movs	r1, #2
 8000802:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000806:	f00a f91f 	bl	800aa48 <FreeRTOS_shutdown>
		while (FreeRTOS_recv(xConnectedSocket, Buffer, 128, 0) >= 0)
 800080a:	e002      	b.n	8000812 <StartDefaultTask+0x15e>
		{
			osDelay(10);
 800080c:	200a      	movs	r0, #10
 800080e:	f003 fcdb 	bl	80041c8 <osDelay>
		while (FreeRTOS_recv(xConnectedSocket, Buffer, 128, 0) >= 0)
 8000812:	f107 0108 	add.w	r1, r7, #8
 8000816:	2300      	movs	r3, #0
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800081e:	f009 fea8 	bl	800a572 <FreeRTOS_recv>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	daf1      	bge.n	800080c <StartDefaultTask+0x158>
		}
		FreeRTOS_closesocket(xConnectedSocket);
 8000828:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800082c:	f009 fa02 	bl	8009c34 <FreeRTOS_closesocket>
	{
 8000830:	e78b      	b.n	800074a <StartDefaultTask+0x96>
 8000832:	bf00      	nop
 8000834:	24000000 	.word	0x24000000
 8000838:	08012ee4 	.word	0x08012ee4
 800083c:	08012ee0 	.word	0x08012ee0
 8000840:	08012edc 	.word	0x08012edc
 8000844:	08012ed8 	.word	0x08012ed8
 8000848:	08012f0c 	.word	0x08012f0c
 800084c:	58020400 	.word	0x58020400

08000850 <MPU_Config>:
}



void MPU_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000862:	f000 fcf5 	bl	8001250 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800086a:	2300      	movs	r3, #0
 800086c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MPU_Config+0x78>)
 8000870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000872:	2307      	movs	r3, #7
 8000874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000876:	2300      	movs	r3, #0
 8000878:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800087a:	2300      	movs	r3, #0
 800087c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800087e:	2303      	movs	r3, #3
 8000880:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fd13 	bl	80012c0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800089a:	2301      	movs	r3, #1
 800089c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MPU_Config+0x7c>)
 80008a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008a2:	230d      	movs	r3, #13
 80008a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b2:	463b      	mov	r3, r7
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fd03 	bl	80012c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f000 fce0 	bl	8001280 <HAL_MPU_Enable>

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	30040000 	.word	0x30040000
 80008cc:	30044000 	.word	0x30044000

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 fb95 	bl	8001010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010000 	.word	0x40010000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x48>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x48>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x48>)
 8000918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	210f      	movs	r1, #15
 8000928:	f06f 0001 	mvn.w	r0, #1
 800092c:	f000 fc68 	bl	8001200 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2105      	movs	r1, #5
 8000934:	2005      	movs	r0, #5
 8000936:	f000 fc63 	bl	8001200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800093a:	2005      	movs	r0, #5
 800093c:	f000 fc7a 	bl	8001234 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58024400 	.word	0x58024400

0800094c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a5d      	ldr	r2, [pc, #372]	; (8000ae0 <HAL_ETH_MspInit+0x194>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 80b3 	bne.w	8000ad6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000970:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a5b      	ldr	r2, [pc, #364]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b58      	ldr	r3, [pc, #352]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800098e:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000994:	4a53      	ldr	r2, [pc, #332]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800099e:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80009ac:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b2:	4a4c      	ldr	r2, [pc, #304]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <HAL_ETH_MspInit+0x198>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a42:	2332      	movs	r3, #50	; 0x32
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a52:	230b      	movs	r3, #11
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <HAL_ETH_MspInit+0x19c>)
 8000a5e:	f000 fc73 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a62:	2386      	movs	r3, #134	; 0x86
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <HAL_ETH_MspInit+0x1a0>)
 8000a7e:	f000 fc63 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a94:	230b      	movs	r3, #11
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <HAL_ETH_MspInit+0x1a4>)
 8000aa0:	f000 fc52 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000aa4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab6:	230b      	movs	r3, #11
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HAL_ETH_MspInit+0x1a8>)
 8000ac2:	f000 fc41 	bl	8001348 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	203d      	movs	r0, #61	; 0x3d
 8000acc:	f000 fb98 	bl	8001200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000ad0:	203d      	movs	r0, #61	; 0x3d
 8000ad2:	f000 fbaf 	bl	8001234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40028000 	.word	0x40028000
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020800 	.word	0x58020800
 8000aec:	58020000 	.word	0x58020000
 8000af0:	58020400 	.word	0x58020400
 8000af4:	58021800 	.word	0x58021800

08000af8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0b2      	sub	sp, #200	; 0xc8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	22bc      	movs	r2, #188	; 0xbc
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f011 f814 	bl	8011b36 <memset>
  if(hrng->Instance==RNG)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_RNG_MspInit+0x78>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d126      	bne.n	8000b66 <HAL_RNG_MspInit+0x6e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fdd9 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000b34:	f7ff fede 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_RNG_MspInit+0x7c>)
 8000b3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_RNG_MspInit+0x7c>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_RNG_MspInit+0x7c>)
 8000b4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2050      	movs	r0, #80	; 0x50
 8000b5c:	f000 fb50 	bl	8001200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000b60:	2050      	movs	r0, #80	; 0x50
 8000b62:	f000 fb67 	bl	8001234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	37c8      	adds	r7, #200	; 0xc8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	48021800 	.word	0x48021800
 8000b74:	58024400 	.word	0x58024400

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d844      	bhi.n	8000c10 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000b86:	2200      	movs	r2, #0
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	2019      	movs	r0, #25
 8000b8c:	f000 fb38 	bl	8001200 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b90:	2019      	movs	r0, #25
 8000b92:	f000 fb4f 	bl	8001234 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <HAL_InitTick+0xb0>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_InitTick+0xb4>)
 8000b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba2:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_InitTick+0xb4>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_InitTick+0xb4>)
 8000bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fd49 	bl	800265c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bca:	f001 fd31 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <HAL_InitTick+0xb8>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	0c9b      	lsrs	r3, r3, #18
 8000bde:	3b01      	subs	r3, #1
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_InitTick+0xbc>)
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_InitTick+0xc0>)
 8000be6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0xbc>)
 8000bea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bf0:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_InitTick+0xbc>)
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_InitTick+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_InitTick+0xbc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <HAL_InitTick+0xbc>)
 8000c04:	f002 feee 	bl	80039e4 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d107      	bne.n	8000c1e <HAL_InitTick+0xa6>
 8000c0e:	e001      	b.n	8000c14 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e005      	b.n	8000c20 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <HAL_InitTick+0xbc>)
 8000c16:	f002 ff47 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3738      	adds	r7, #56	; 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	24000010 	.word	0x24000010
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	24009464 	.word	0x24009464
 8000c38:	40010000 	.word	0x40010000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM1_UP_IRQHandler+0x10>)
 8000c7e:	f002 ff83 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24009464 	.word	0x24009464

08000c8c <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <RNG_IRQHandler+0x10>)
 8000c92:	f002 fe24 	bl	80038de <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	240093a8 	.word	0x240093a8

08000ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	return 1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_kill>:

int _kill(int pid, int sig)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cba:	f010 fde3 	bl	8011884 <__errno>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2216      	movs	r2, #22
 8000cc2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_exit>:

void _exit (int status)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffe7 	bl	8000cb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ce2:	e7fe      	b.n	8000ce2 <_exit+0x12>

08000ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
	}

return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
	}
	return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f010 fd48 	bl	8011884 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24080000 	.word	0x24080000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	24003140 	.word	0x24003140
 8000e28:	24009530 	.word	0x24009530

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <SystemInit+0xec>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <SystemInit+0xec>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <SystemInit+0xf0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <SystemInit+0xf0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <SystemInit+0xf0>)
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <SystemInit+0xf4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <SystemInit+0xf4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <SystemInit+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <SystemInit+0xf4>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	492b      	ldr	r1, [pc, #172]	; (8000f20 <SystemInit+0xf4>)
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <SystemInit+0xf8>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <SystemInit+0xf0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <SystemInit+0xf0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <SystemInit+0xf0>)
 8000e90:	f043 0307 	orr.w	r3, r3, #7
 8000e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <SystemInit+0xf4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <SystemInit+0xf4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <SystemInit+0xf4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemInit+0xf4>)
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <SystemInit+0xfc>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <SystemInit+0xf4>)
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <SystemInit+0x100>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <SystemInit+0xf4>)
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <SystemInit+0x104>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <SystemInit+0xf4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <SystemInit+0xf4>)
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SystemInit+0x104>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <SystemInit+0xf4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <SystemInit+0xf4>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <SystemInit+0x104>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <SystemInit+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <SystemInit+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <SystemInit+0xf4>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemInit+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <SystemInit+0x108>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <SystemInit+0x10c>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef6:	d202      	bcs.n	8000efe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <SystemInit+0x110>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <SystemInit+0x114>)
 8000f00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f04:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SystemInit+0xec>)
 8000f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	52002000 	.word	0x52002000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f28:	02020200 	.word	0x02020200
 8000f2c:	01ff0000 	.word	0x01ff0000
 8000f30:	01010280 	.word	0x01010280
 8000f34:	5c001000 	.word	0x5c001000
 8000f38:	ffff0000 	.word	0xffff0000
 8000f3c:	51008108 	.word	0x51008108
 8000f40:	52004000 	.word	0x52004000

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f48:	f7ff ff70 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f010 fd83 	bl	8011a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fa03 	bl	8000380 <main>
  bx  lr
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f84:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8000f88:	080130b4 	.word	0x080130b4
  ldr r2, =_sbss
 8000f8c:	24003120 	.word	0x24003120
  ldr r4, =_ebss
 8000f90:	2400952c 	.word	0x2400952c

08000f94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC3_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f923 	bl	80011ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fa4:	f001 f99a 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_Init+0x68>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	4913      	ldr	r1, [pc, #76]	; (8001004 <HAL_Init+0x6c>)
 8000fb6:	5ccb      	ldrb	r3, [r1, r3]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_Init+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_Init+0x6c>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_Init+0x70>)
 8000fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_Init+0x74>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f7ff fdc8 	bl	8000b78 <HAL_InitTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e002      	b.n	8000ff8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff2:	f7ff fc85 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400
 8001004:	08012f10 	.word	0x08012f10
 8001008:	2400000c 	.word	0x2400000c
 800100c:	24000008 	.word	0x24000008

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	24000014 	.word	0x24000014
 8001034:	240094b0 	.word	0x240094b0

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	240094b0 	.word	0x240094b0

08001050 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetREVID+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0c1b      	lsrs	r3, r3, #16
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	5c001000 	.word	0x5c001000

08001068 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001078:	4904      	ldr	r1, [pc, #16]	; (800108c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	58000400 	.word	0x58000400

08001090 <__NVIC_SetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	05fa0000 	.word	0x05fa0000

080010d8 <__NVIC_GetPriorityGrouping>:
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff4c 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120e:	f7ff ff63 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001212:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffb3 	bl	8001184 <NVIC_EncodePriority>
 800121e:	4602      	mov	r2, r0
 8001220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff82 	bl	8001130 <__NVIC_SetPriority>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff56 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001254:	f3bf 8f5f 	dmb	sy
}
 8001258:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_MPU_Disable+0x28>)
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_MPU_Disable+0x28>)
 8001260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001264:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_MPU_Disable+0x2c>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000ed90 	.word	0xe000ed90

08001280 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_MPU_Enable+0x38>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_MPU_Enable+0x3c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_MPU_Enable+0x3c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a4:	f3bf 8f6f 	isb	sy
}
 80012a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed90 	.word	0xe000ed90
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	785a      	ldrb	r2, [r3, #1]
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_MPU_ConfigRegion+0x84>)
 80012ce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d029      	beq.n	800132c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_MPU_ConfigRegion+0x84>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b1b      	ldrb	r3, [r3, #12]
 80012e4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7adb      	ldrb	r3, [r3, #11]
 80012ea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7a9b      	ldrb	r3, [r3, #10]
 80012f2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7b5b      	ldrb	r3, [r3, #13]
 80012fa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7b9b      	ldrb	r3, [r3, #14]
 8001302:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001304:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7bdb      	ldrb	r3, [r3, #15]
 800130a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800130c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7a5b      	ldrb	r3, [r3, #9]
 8001312:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001314:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7a1b      	ldrb	r3, [r3, #8]
 800131a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800131c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001326:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001328:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800132a:	e005      	b.n	8001338 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_MPU_ConfigRegion+0x84>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_MPU_ConfigRegion+0x84>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed90 	.word	0xe000ed90

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <HAL_GPIO_Init+0x234>)
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800135a:	e194      	b.n	8001686 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8186 	beq.w	8001680 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00b      	beq.n	8001394 <HAL_GPIO_Init+0x4c>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	2b11      	cmp	r3, #17
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d130      	bne.n	80013f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ca:	2201      	movs	r2, #1
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 0201 	and.w	r2, r3, #1
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0xee>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b12      	cmp	r3, #18
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	69b9      	ldr	r1, [r7, #24]
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0203 	and.w	r2, r3, #3
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80e0 	beq.w	8001680 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_GPIO_Init+0x238>)
 80014c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <HAL_GPIO_Init+0x238>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_GPIO_Init+0x238>)
 80014d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014de:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_GPIO_Init+0x23c>)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a20      	ldr	r2, [pc, #128]	; (8001588 <HAL_GPIO_Init+0x240>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d052      	beq.n	80015b0 <HAL_GPIO_Init+0x268>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_GPIO_Init+0x244>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d031      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_GPIO_Init+0x248>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d02b      	beq.n	8001572 <HAL_GPIO_Init+0x22a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_GPIO_Init+0x24c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x226>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HAL_GPIO_Init+0x250>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x222>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_GPIO_Init+0x254>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x21e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_GPIO_Init+0x258>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_GPIO_Init+0x25c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x216>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_GPIO_Init+0x260>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x212>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_GPIO_Init+0x264>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x20e>
 8001552:	2309      	movs	r3, #9
 8001554:	e02d      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 8001556:	230a      	movs	r3, #10
 8001558:	e02b      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 800155a:	2308      	movs	r3, #8
 800155c:	e029      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 800155e:	2307      	movs	r3, #7
 8001560:	e027      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 8001562:	2306      	movs	r3, #6
 8001564:	e025      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 8001566:	2305      	movs	r3, #5
 8001568:	e023      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 800156a:	2304      	movs	r3, #4
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 800156e:	2303      	movs	r3, #3
 8001570:	e01f      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 8001572:	2302      	movs	r3, #2
 8001574:	e01d      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 8001576:	2301      	movs	r3, #1
 8001578:	e01b      	b.n	80015b2 <HAL_GPIO_Init+0x26a>
 800157a:	bf00      	nop
 800157c:	58000080 	.word	0x58000080
 8001580:	58024400 	.word	0x58024400
 8001584:	58000400 	.word	0x58000400
 8001588:	58020000 	.word	0x58020000
 800158c:	58020400 	.word	0x58020400
 8001590:	58020800 	.word	0x58020800
 8001594:	58020c00 	.word	0x58020c00
 8001598:	58021000 	.word	0x58021000
 800159c:	58021400 	.word	0x58021400
 80015a0:	58021800 	.word	0x58021800
 80015a4:	58021c00 	.word	0x58021c00
 80015a8:	58022000 	.word	0x58022000
 80015ac:	58022400 	.word	0x58022400
 80015b0:	2300      	movs	r3, #0
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c2:	4938      	ldr	r1, [pc, #224]	; (80016a4 <HAL_GPIO_Init+0x35c>)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800164a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae63 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	58000400 	.word	0x58000400

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_PWREx_ConfigSupply+0x70>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d00a      	beq.n	8001706 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_PWREx_ConfigSupply+0x70>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e01f      	b.n	8001742 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e01d      	b.n	8001742 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_PWREx_ConfigSupply+0x70>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	490f      	ldr	r1, [pc, #60]	; (800174c <HAL_PWREx_ConfigSupply+0x70>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001716:	f7ff fc8f 	bl	8001038 <HAL_GetTick>
 800171a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800171c:	e009      	b.n	8001732 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800171e:	f7ff fc8b 	bl	8001038 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800172c:	d901      	bls.n	8001732 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e007      	b.n	8001742 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_PWREx_ConfigSupply+0x70>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173e:	d1ee      	bne.n	800171e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	58024800 	.word	0x58024800

08001750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e3ff      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001770:	4b99      	ldr	r3, [pc, #612]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800177a:	4b97      	ldr	r3, [pc, #604]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	2b10      	cmp	r3, #16
 8001784:	d007      	beq.n	8001796 <HAL_RCC_OscConfig+0x46>
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	2b18      	cmp	r3, #24
 800178a:	d110      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06c      	beq.n	800187c <HAL_RCC_OscConfig+0x12c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d168      	bne.n	800187c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e3d9      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x76>
 80017b8:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a86      	ldr	r2, [pc, #536]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e02e      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x98>
 80017ce:	4b82      	ldr	r3, [pc, #520]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a81      	ldr	r2, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7e      	ldr	r2, [pc, #504]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0xbc>
 80017f2:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a78      	ldr	r2, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fc04 	bl	8001038 <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fc00 	bl	8001038 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e38d      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001846:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xe4>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fbf0 	bl	8001038 <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fbec 	bl	8001038 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e379      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x10c>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80ae 	beq.w	80019e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001894:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_RCC_OscConfig+0x162>
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2b18      	cmp	r3, #24
 80018a6:	d13a      	bne.n	800191e <HAL_RCC_OscConfig+0x1ce>
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d135      	bne.n	800191e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x17a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e34b      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	f7ff fbc1 	bl	8001050 <HAL_GetREVID>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d817      	bhi.n	8001908 <HAL_RCC_OscConfig+0x1b8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b40      	cmp	r3, #64	; 0x40
 80018de:	d108      	bne.n	80018f2 <HAL_RCC_OscConfig+0x1a2>
 80018e0:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80018ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f0:	e07a      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	4935      	ldr	r1, [pc, #212]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001906:	e06f      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4930      	ldr	r1, [pc, #192]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e064      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d045      	beq.n	80019b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0219 	bic.w	r2, r3, #25
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4929      	ldr	r1, [pc, #164]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fb7e 	bl	8001038 <HAL_GetTick>
 800193c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fb7a 	bl	8001038 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e307      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	f7ff fb77 	bl	8001050 <HAL_GetREVID>
 8001962:	4603      	mov	r3, r0
 8001964:	f241 0203 	movw	r2, #4099	; 0x1003
 8001968:	4293      	cmp	r3, r2
 800196a:	d817      	bhi.n	800199c <HAL_RCC_OscConfig+0x24c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b40      	cmp	r3, #64	; 0x40
 8001972:	d108      	bne.n	8001986 <HAL_RCC_OscConfig+0x236>
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	6053      	str	r3, [r2, #4]
 8001984:	e030      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	031b      	lsls	r3, r3, #12
 8001994:	4910      	ldr	r1, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
 800199a:	e025      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	490b      	ldr	r1, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
 80019b0:	e01a      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x288>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fb3b 	bl	8001038 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fb37 	bl	8001038 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d903      	bls.n	80019dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2c4      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
 80019d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019dc:	4ba4      	ldr	r3, [pc, #656]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a9 	beq.w	8001b48 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a00:	4b9b      	ldr	r3, [pc, #620]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d007      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2cc>
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b18      	cmp	r3, #24
 8001a10:	d13a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x338>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d135      	bne.n	8001a88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a1c:	4b94      	ldr	r3, [pc, #592]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2e4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e296      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a34:	f7ff fb0c 	bl	8001050 <HAL_GetREVID>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d817      	bhi.n	8001a72 <HAL_RCC_OscConfig+0x322>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d108      	bne.n	8001a5c <HAL_RCC_OscConfig+0x30c>
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a52:	4a87      	ldr	r2, [pc, #540]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a5a:	e075      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a5c:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	069b      	lsls	r3, r3, #26
 8001a6a:	4981      	ldr	r1, [pc, #516]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a70:	e06a      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	061b      	lsls	r3, r3, #24
 8001a80:	497b      	ldr	r1, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a86:	e05f      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d042      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a90:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a76      	ldr	r2, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff facc 	bl	8001038 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fac8 	bl	8001038 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e255      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac2:	f7ff fac5 	bl	8001050 <HAL_GetREVID>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d817      	bhi.n	8001b00 <HAL_RCC_OscConfig+0x3b0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d108      	bne.n	8001aea <HAL_RCC_OscConfig+0x39a>
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ae6:	6053      	str	r3, [r2, #4]
 8001ae8:	e02e      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	069b      	lsls	r3, r3, #26
 8001af8:	495d      	ldr	r1, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
 8001afe:	e023      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
 8001b00:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	4958      	ldr	r1, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa89 	bl	8001038 <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fa85 	bl	8001038 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e212      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d036      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d019      	beq.n	8001b90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fa66 	bl	8001038 <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fa62 	bl	8001038 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ef      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x420>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	4a36      	ldr	r2, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fa4c 	bl	8001038 <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fa48 	bl	8001038 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1d5      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d036      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d019      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fa29 	bl	8001038 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bea:	f7ff fa25 	bl	8001038 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1b2      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x49a>
 8001c08:	e018      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fa0f 	bl	8001038 <HAL_GetTick>
 8001c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7ff fa0b 	bl	8001038 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e198      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_OscConfig+0x520>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8085 	beq.w	8001d54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x524>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x524>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c56:	f7ff f9ef 	bl	8001038 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff f9eb 	bl	8001038 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d905      	bls.n	8001c78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e178      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c78:	4b96      	ldr	r3, [pc, #600]	; (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ec      	beq.n	8001c5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x54a>
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a91      	ldr	r2, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5a6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x56c>
 8001ca2:	4b8d      	ldr	r3, [pc, #564]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a8c      	ldr	r2, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a89      	ldr	r2, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5a6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x58e>
 8001cc4:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5a6>
 8001cde:	4b7e      	ldr	r3, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a7d      	ldr	r2, [pc, #500]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f99b 	bl	8001038 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff f997 	bl	8001038 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e122      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1c:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x5b6>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f985 	bl	8001038 <HAL_GetTick>
 8001d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f981 	bl	8001038 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e10c      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d48:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8101 	beq.w	8001f60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d66:	2b18      	cmp	r3, #24
 8001d68:	f000 80bc 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	f040 8095 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7ff f959 	bl	8001038 <HAL_GetTick>
 8001d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff f955 	bl	8001038 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0e2      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x78c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	4946      	ldr	r1, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	3b01      	subs	r3, #1
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001df2:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x790>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	4931      	ldr	r1, [pc, #196]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	f023 020c 	bic.w	r2, r3, #12
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	492c      	ldr	r1, [pc, #176]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f023 0202 	bic.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4928      	ldr	r1, [pc, #160]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f8de 	bl	8001038 <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f8da 	bl	8001038 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e067      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x730>
 8001e9e:	e05f      	b.n	8001f60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f8c4 	bl	8001038 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff f8c0 	bl	8001038 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04d      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x764>
 8001ed2:	e045      	b.n	8001f60 <HAL_RCC_OscConfig+0x810>
 8001ed4:	58024800 	.word	0x58024800
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	fffffc0c 	.word	0xfffffc0c
 8001ee0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x81c>)
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x81c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d031      	beq.n	8001f5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0203 	and.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d12a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d122      	bne.n	8001f5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0a5b      	lsrs	r3, r3, #9
 8001f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0e1b      	lsrs	r3, r3, #24
 8001f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	58024400 	.word	0x58024400

08001f70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e19c      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b8a      	ldr	r3, [pc, #552]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b87      	ldr	r3, [pc, #540]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	4985      	ldr	r1, [pc, #532]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e184      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd0:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4975      	ldr	r1, [pc, #468]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	496a      	ldr	r1, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	495e      	ldr	r1, [pc, #376]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800203a:	4313      	orrs	r3, r2
 800203c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002056:	429a      	cmp	r2, r3
 8002058:	d908      	bls.n	800206c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4953      	ldr	r1, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002068:	4313      	orrs	r3, r2
 800206a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 020f 	bic.w	r2, r3, #15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4947      	ldr	r1, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d055      	beq.n	8002152 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4940      	ldr	r1, [pc, #256]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0f6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d115      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0ea      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0de      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe ff89 	bl	8001038 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	e00a      	b.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7fe ff85 	bl	8001038 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0be      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	429a      	cmp	r2, r3
 8002150:	d1eb      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	429a      	cmp	r2, r3
 800216c:	d208      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800217c:	4313      	orrs	r3, r2
 800217e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d214      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e086      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
 80021b0:	52002000 	.word	0x52002000
 80021b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fe:	429a      	cmp	r2, r3
 8002200:	d208      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	492e      	ldr	r1, [pc, #184]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800222c:	429a      	cmp	r2, r3
 800222e:	d208      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800223e:	4313      	orrs	r3, r2
 8002240:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225a:	429a      	cmp	r2, r3
 800225c:	d208      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800226c:	4313      	orrs	r3, r2
 800226e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002270:	f000 f834 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	4912      	ldr	r1, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x360>)
 80022a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x364>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x368>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fc60 	bl	8000b78 <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400
 80022cc:	08012f10 	.word	0x08012f10
 80022d0:	2400000c 	.word	0x2400000c
 80022d4:	24000008 	.word	0x24000008
 80022d8:	24000010 	.word	0x24000010

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e2:	4bb3      	ldr	r3, [pc, #716]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	f200 8155 	bhi.w	800259a <HAL_RCC_GetSysClockFreq+0x2be>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	0800235d 	.word	0x0800235d
 80022fc:	0800259b 	.word	0x0800259b
 8002300:	0800259b 	.word	0x0800259b
 8002304:	0800259b 	.word	0x0800259b
 8002308:	0800259b 	.word	0x0800259b
 800230c:	0800259b 	.word	0x0800259b
 8002310:	0800259b 	.word	0x0800259b
 8002314:	0800259b 	.word	0x0800259b
 8002318:	08002383 	.word	0x08002383
 800231c:	0800259b 	.word	0x0800259b
 8002320:	0800259b 	.word	0x0800259b
 8002324:	0800259b 	.word	0x0800259b
 8002328:	0800259b 	.word	0x0800259b
 800232c:	0800259b 	.word	0x0800259b
 8002330:	0800259b 	.word	0x0800259b
 8002334:	0800259b 	.word	0x0800259b
 8002338:	08002389 	.word	0x08002389
 800233c:	0800259b 	.word	0x0800259b
 8002340:	0800259b 	.word	0x0800259b
 8002344:	0800259b 	.word	0x0800259b
 8002348:	0800259b 	.word	0x0800259b
 800234c:	0800259b 	.word	0x0800259b
 8002350:	0800259b 	.word	0x0800259b
 8002354:	0800259b 	.word	0x0800259b
 8002358:	0800238f 	.word	0x0800238f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800235c:	4b94      	ldr	r3, [pc, #592]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002368:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	4a90      	ldr	r2, [pc, #576]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800237a:	e111      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800237c:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800237e:	61bb      	str	r3, [r7, #24]
    break;
 8002380:	e10e      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002384:	61bb      	str	r3, [r7, #24]
    break;
 8002386:	e10b      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800238a:	61bb      	str	r3, [r7, #24]
    break;
 800238c:	e108      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002398:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023a4:	4b82      	ldr	r3, [pc, #520]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023ae:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80e1 	beq.w	8002594 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	f000 8083 	beq.w	80024e0 <HAL_RCC_GetSysClockFreq+0x204>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f200 80a1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x248>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x114>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d056      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x1c0>
 80023ee:	e099      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02d      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023fc:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	4a6b      	ldr	r2, [pc, #428]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002456:	e087      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249a:	e065      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024de:	e043      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80024ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002502:	ed97 6a02 	vldr	s12, [r7, #8]
 8002506:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800250a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002522:	e021      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002566:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	0a5b      	lsrs	r3, r3, #9
 800256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002572:	3301      	adds	r3, #1
 8002574:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002580:	edd7 6a07 	vldr	s13, [r7, #28]
 8002584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
    break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800259c:	61bb      	str	r3, [r7, #24]
    break;
 800259e:	bf00      	nop
  }

  return sysclockfreq;
 80025a0:	69bb      	ldr	r3, [r7, #24]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	58024400 	.word	0x58024400
 80025b4:	03d09000 	.word	0x03d09000
 80025b8:	003d0900 	.word	0x003d0900
 80025bc:	017d7840 	.word	0x017d7840
 80025c0:	46000000 	.word	0x46000000
 80025c4:	4c742400 	.word	0x4c742400
 80025c8:	4a742400 	.word	0x4a742400
 80025cc:	4bbebc20 	.word	0x4bbebc20

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025d6:	f7ff fe81 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_GetHCLKFreq+0x50>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_RCC_GetHCLKFreq+0x54>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_GetHCLKFreq+0x50>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_GetHCLKFreq+0x54>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_GetHCLKFreq+0x58>)
 800260c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetHCLKFreq+0x58>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	58024400 	.word	0x58024400
 8002624:	08012f10 	.word	0x08012f10
 8002628:	2400000c 	.word	0x2400000c
 800262c:	24000008 	.word	0x24000008

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002634:	f7ff ffcc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4904      	ldr	r1, [pc, #16]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58024400 	.word	0x58024400
 8002658:	08012f10 	.word	0x08012f10

0800265c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223f      	movs	r2, #63	; 0x3f
 800266a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0207 	and.w	r2, r3, #7
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_GetClockConfig+0x7c>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_GetClockConfig+0x80>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	601a      	str	r2, [r3, #0]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	58024400 	.word	0x58024400
 80026dc:	52002000 	.word	0x52002000

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03f      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002704:	d02a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800270a:	d824      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800270c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002710:	d018      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002716:	d81e      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800271c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002720:	d007      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002722:	e018      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002724:	4bab      	ldr	r3, [pc, #684]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4aaa      	ldr	r2, [pc, #680]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002730:	e015      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f000 ff11 	bl	8003560 <RCCEx_PLL2_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002742:	e00c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3324      	adds	r3, #36	; 0x24
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 ffba 	bl	80036c4 <RCCEx_PLL3_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002754:	e003      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
      break;
 800275a:	e000      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800275c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002764:	4b9b      	ldr	r3, [pc, #620]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002770:	4998      	ldr	r1, [pc, #608]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	650b      	str	r3, [r1, #80]	; 0x50
 8002776:	e001      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	2b04      	cmp	r3, #4
 800278e:	d826      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027ad 	.word	0x080027ad
 800279c:	080027bb 	.word	0x080027bb
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	080027e5 	.word	0x080027e5
 80027a8:	080027e5 	.word	0x080027e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ac:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	4a88      	ldr	r2, [pc, #544]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027b8:	e015      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fecd 	bl	8003560 <RCCEx_PLL2_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027ca:	e00c      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3324      	adds	r3, #36	; 0x24
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 ff76 	bl	80036c4 <RCCEx_PLL3_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
      break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ec:	4b79      	ldr	r3, [pc, #484]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	4976      	ldr	r1, [pc, #472]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	650b      	str	r3, [r1, #80]	; 0x50
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d042      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d02b      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800281a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281e:	d825      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002820:	2bc0      	cmp	r3, #192	; 0xc0
 8002822:	d028      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002824:	2bc0      	cmp	r3, #192	; 0xc0
 8002826:	d821      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d016      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d81d      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d007      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002838:	e018      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002846:	e017      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe86 	bl	8003560 <RCCEx_PLL2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002858:	e00e      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3324      	adds	r3, #36	; 0x24
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ff2f 	bl	80036c4 <RCCEx_PLL3_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800287e:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	4952      	ldr	r1, [pc, #328]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	650b      	str	r3, [r1, #80]	; 0x50
 8002890:	e001      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d049      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ac:	d030      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b2:	d82a      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028b8:	d02c      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80028ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028be:	d824      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c4:	d018      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80028c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ca:	d81e      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d007      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80028d6:	e018      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d8:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e4:	e017      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fe37 	bl	8003560 <RCCEx_PLL2_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028f6:	e00e      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3324      	adds	r3, #36	; 0x24
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fee0 	bl	80036c4 <RCCEx_PLL3_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002908:	e005      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800292a:	492a      	ldr	r1, [pc, #168]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	658b      	str	r3, [r1, #88]	; 0x58
 8002930:	e001      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04c      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800294c:	d030      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800294e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002952:	d82a      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002958:	d02c      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800295a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800295e:	d824      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002964:	d018      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800296a:	d81e      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d007      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002976:	e018      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800297e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002984:	e017      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fde7 	bl	8003560 <RCCEx_PLL2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002996:	e00e      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3324      	adds	r3, #36	; 0x24
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fe90 	bl	80036c4 <RCCEx_PLL3_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029a8:	e005      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80029b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029ca:	4902      	ldr	r1, [pc, #8]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	658b      	str	r3, [r1, #88]	; 0x58
 80029d0:	e004      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80029d2:	bf00      	nop
 80029d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d817      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d813      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d016      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d10f      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a04:	4baf      	ldr	r3, [pc, #700]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4aae      	ldr	r2, [pc, #696]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a10:	e00e      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fda1 	bl	8003560 <RCCEx_PLL2_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a22:	e005      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	75fb      	strb	r3, [r7, #23]
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a36:	4ba3      	ldr	r3, [pc, #652]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	49a0      	ldr	r1, [pc, #640]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a48:	e001      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d047      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a62:	d030      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a6e:	d02c      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002a70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a74:	d824      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	d018      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a80:	d81e      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002a8c:	e018      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8e:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	4a8c      	ldr	r2, [pc, #560]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a9a:	e017      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd5c 	bl	8003560 <RCCEx_PLL2_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aac:	e00e      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3324      	adds	r3, #36	; 0x24
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fe05 	bl	80036c4 <RCCEx_PLL3_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002abe:	e005      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	4979      	ldr	r1, [pc, #484]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ae4:	e001      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d049      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afe:	d02e      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b04:	d828      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0a:	d02a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b10:	d822      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b16:	d026      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1c:	d81c      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b22:	d010      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b28:	d816      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01d      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d111      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fd10 	bl	8003560 <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b44:	e012      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fdb9 	bl	80036c4 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b56:	e009      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	e006      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e004      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b72:	4b54      	ldr	r3, [pc, #336]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	4951      	ldr	r1, [pc, #324]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	650b      	str	r3, [r1, #80]	; 0x50
 8002b84:	e001      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04b      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba0:	d02e      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba6:	d828      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d02a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d822      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bb8:	d026      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bbe:	d81c      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bca:	d816      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bd4:	d111      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fcbf 	bl	8003560 <RCCEx_PLL2_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002be6:	e012      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fd68 	bl	80036c4 <RCCEx_PLL3_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e009      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfe:	e006      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c00:	bf00      	nop
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c04:	bf00      	nop
 8002c06:	e002      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c22:	4928      	ldr	r1, [pc, #160]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	658b      	str	r3, [r1, #88]	; 0x58
 8002c28:	e001      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02f      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c42:	d00e      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c48:	d814      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c52:	d10f      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c60:	e00c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fc79 	bl	8003560 <RCCEx_PLL2_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c72:	e003      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
      break;
 8002c78:	e000      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	650b      	str	r3, [r1, #80]	; 0x50
 8002c94:	e001      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d033      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d81c      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cef 	.word	0x08002cef
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002cd7 	.word	0x08002cd7
 8002cc0:	08002cef 	.word	0x08002cef
 8002cc4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc8:	4bb8      	ldr	r3, [pc, #736]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4ab7      	ldr	r2, [pc, #732]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fc3f 	bl	8003560 <RCCEx_PLL2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75fb      	strb	r3, [r7, #23]
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cf6:	4bad      	ldr	r3, [pc, #692]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	49aa      	ldr	r1, [pc, #680]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d08:	e001      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8086 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4ba4      	ldr	r3, [pc, #656]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4aa3      	ldr	r2, [pc, #652]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d28:	f7fe f986 	bl	8001038 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe f982 	bl	8001038 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	75fb      	strb	r3, [r7, #23]
        break;
 8002d42:	e005      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d166      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d56:	4b95      	ldr	r3, [pc, #596]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d60:	4053      	eors	r3, r2
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d013      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6a:	4b90      	ldr	r3, [pc, #576]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d74:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a8c      	ldr	r2, [pc, #560]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a89      	ldr	r2, [pc, #548]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d8c:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9c:	d115      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe f94b 	bl	8001038 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da4:	e00b      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe f947 	bl	8001038 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d902      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	75fb      	strb	r3, [r7, #23]
            break;
 8002dbc:	e005      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ed      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d126      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002de0:	4b72      	ldr	r3, [pc, #456]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dee:	0919      	lsrs	r1, r3, #4
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002df2:	400b      	ands	r3, r1
 8002df4:	496d      	ldr	r1, [pc, #436]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	610b      	str	r3, [r1, #16]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002dfc:	4b6b      	ldr	r3, [pc, #428]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e06:	6113      	str	r3, [r2, #16]
 8002e08:	4b68      	ldr	r3, [pc, #416]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	4965      	ldr	r1, [pc, #404]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	670b      	str	r3, [r1, #112]	; 0x70
 8002e1c:	e004      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	75bb      	strb	r3, [r7, #22]
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d07e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e38:	2b28      	cmp	r3, #40	; 0x28
 8002e3a:	d867      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002f13 	.word	0x08002f13
 8002e48:	08002f0d 	.word	0x08002f0d
 8002e4c:	08002f0d 	.word	0x08002f0d
 8002e50:	08002f0d 	.word	0x08002f0d
 8002e54:	08002f0d 	.word	0x08002f0d
 8002e58:	08002f0d 	.word	0x08002f0d
 8002e5c:	08002f0d 	.word	0x08002f0d
 8002e60:	08002f0d 	.word	0x08002f0d
 8002e64:	08002ee9 	.word	0x08002ee9
 8002e68:	08002f0d 	.word	0x08002f0d
 8002e6c:	08002f0d 	.word	0x08002f0d
 8002e70:	08002f0d 	.word	0x08002f0d
 8002e74:	08002f0d 	.word	0x08002f0d
 8002e78:	08002f0d 	.word	0x08002f0d
 8002e7c:	08002f0d 	.word	0x08002f0d
 8002e80:	08002f0d 	.word	0x08002f0d
 8002e84:	08002efb 	.word	0x08002efb
 8002e88:	08002f0d 	.word	0x08002f0d
 8002e8c:	08002f0d 	.word	0x08002f0d
 8002e90:	08002f0d 	.word	0x08002f0d
 8002e94:	08002f0d 	.word	0x08002f0d
 8002e98:	08002f0d 	.word	0x08002f0d
 8002e9c:	08002f0d 	.word	0x08002f0d
 8002ea0:	08002f0d 	.word	0x08002f0d
 8002ea4:	08002f13 	.word	0x08002f13
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002f0d 	.word	0x08002f0d
 8002eb0:	08002f0d 	.word	0x08002f0d
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f13 	.word	0x08002f13
 8002ec8:	08002f0d 	.word	0x08002f0d
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f13 	.word	0x08002f13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fb36 	bl	8003560 <RCCEx_PLL2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ef8:	e00c      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3324      	adds	r3, #36	; 0x24
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fbdf 	bl	80036c4 <RCCEx_PLL3_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f0a:	e003      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f26:	4921      	ldr	r1, [pc, #132]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f2c:	e001      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03e      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d820      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f8f 	.word	0x08002f8f
 8002f50:	08002f65 	.word	0x08002f65
 8002f54:	08002f77 	.word	0x08002f77
 8002f58:	08002f8f 	.word	0x08002f8f
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002f8f 	.word	0x08002f8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 faf8 	bl	8003560 <RCCEx_PLL2_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f74:	e00c      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3324      	adds	r3, #36	; 0x24
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fba1 	bl	80036c4 <RCCEx_PLL3_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d110      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	4902      	ldr	r1, [pc, #8]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fa8:	e008      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002faa:	bf00      	nop
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	58024800 	.word	0x58024800
 8002fb4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d039      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d820      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	0800301b 	.word	0x0800301b
 8002fdc:	08002ff1 	.word	0x08002ff1
 8002fe0:	08003003 	.word	0x08003003
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	0800301b 	.word	0x0800301b
 8002fec:	0800301b 	.word	0x0800301b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fab2 	bl	8003560 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003000:	e00c      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3324      	adds	r3, #36	; 0x24
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fb5b 	bl	80036c4 <RCCEx_PLL3_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003012:	e003      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800301a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003022:	4bb7      	ldr	r3, [pc, #732]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	49b3      	ldr	r1, [pc, #716]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003032:	4313      	orrs	r3, r2
 8003034:	658b      	str	r3, [r1, #88]	; 0x58
 8003036:	e001      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d04b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003052:	d02e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d828      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d02a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d822      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800306a:	d026      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800306c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003070:	d81c      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003076:	d010      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307c:	d816      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01d      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003086:	d111      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fa66 	bl	8003560 <RCCEx_PLL2_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003098:	e012      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fb0f 	bl	80036c4 <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030aa:	e009      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	e006      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80030b2:	bf00      	nop
 80030b4:	e004      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80030be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4b8e      	ldr	r3, [pc, #568]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d4:	498a      	ldr	r1, [pc, #552]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	654b      	str	r3, [r1, #84]	; 0x54
 80030da:	e001      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d04b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030f6:	d02e      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80030f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030fc:	d828      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d02a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d822      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800310a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800310e:	d026      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003114:	d81c      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311a:	d010      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800311c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003120:	d816      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01d      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d111      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa14 	bl	8003560 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800313c:	e012      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3324      	adds	r3, #36	; 0x24
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fabd 	bl	80036c4 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800314e:	e009      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003178:	4961      	ldr	r1, [pc, #388]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800317a:	4313      	orrs	r3, r2
 800317c:	658b      	str	r3, [r1, #88]	; 0x58
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003196:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800319a:	d02e      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800319c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031a0:	d828      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d02a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ac:	d822      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80031ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031b2:	d026      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80031b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031b8:	d81c      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80031ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031be:	d010      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80031c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c4:	d816      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01d      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ce:	d111      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f9c2 	bl	8003560 <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031e0:	e012      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3324      	adds	r3, #36	; 0x24
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa6b 	bl	80036c4 <RCCEx_PLL3_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031f2:	e009      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
      break;
 80031f8:	e006      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321c:	4938      	ldr	r1, [pc, #224]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800321e:	4313      	orrs	r3, r2
 8003220:	658b      	str	r3, [r1, #88]	; 0x58
 8003222:	e001      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d10a      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3324      	adds	r3, #36	; 0x24
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa3c 	bl	80036c4 <RCCEx_PLL3_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003264:	4926      	ldr	r1, [pc, #152]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003266:	4313      	orrs	r3, r2
 8003268:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d10a      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	2102      	movs	r1, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fa1b 	bl	80036c4 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	4916      	ldr	r1, [pc, #88]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d036      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80032c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c8:	d817      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d009      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80032d4:	e011      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f93f 	bl	8003560 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032e6:	e00e      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f9e8 	bl	80036c4 <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032f8:	e005      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003300:	58024400 	.word	0x58024400
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330c:	4b93      	ldr	r3, [pc, #588]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800331a:	4990      	ldr	r1, [pc, #576]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	658b      	str	r3, [r1, #88]	; 0x58
 8003320:	e001      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d033      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800333c:	d01c      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800333e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003342:	d816      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003348:	d003      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800334a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334e:	d007      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003350:	e00f      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800335e:	e00c      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f9ac 	bl	80036c4 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
      break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	4973      	ldr	r1, [pc, #460]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	654b      	str	r3, [r1, #84]	; 0x54
 8003394:	e001      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d029      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d007      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80033b4:	e00f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b6:	4b69      	ldr	r3, [pc, #420]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	4a68      	ldr	r2, [pc, #416]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033c2:	e00b      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f8c8 	bl	8003560 <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033d4:	e002      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
      break;
 80033da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033e2:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	495b      	ldr	r1, [pc, #364]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033f4:	e001      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3324      	adds	r3, #36	; 0x24
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f959 	bl	80036c4 <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d030      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003430:	d017      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d811      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d013      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800343e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003442:	d80b      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d106      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800345a:	e007      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
      break;
 8003460:	e004      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800346a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	4937      	ldr	r1, [pc, #220]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	654b      	str	r3, [r1, #84]	; 0x54
 8003484:	e001      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	492e      	ldr	r1, [pc, #184]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034c2:	4926      	ldr	r1, [pc, #152]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	491e      	ldr	r1, [pc, #120]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034fc:	6113      	str	r3, [r2, #16]
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003508:	4914      	ldr	r1, [pc, #80]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da08      	bge.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003522:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003548:	7dbb      	ldrb	r3, [r7, #22]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	58024400 	.word	0x58024400

08003560 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800356e:	4b53      	ldr	r3, [pc, #332]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b03      	cmp	r3, #3
 8003578:	d101      	bne.n	800357e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e099      	b.n	80036b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800357e:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a4e      	ldr	r2, [pc, #312]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003584:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358a:	f7fd fd55 	bl	8001038 <HAL_GetTick>
 800358e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003590:	e008      	b.n	80035a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003592:	f7fd fd51 	bl	8001038 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e086      	b.n	80036b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	031b      	lsls	r3, r3, #12
 80035be:	493f      	ldr	r1, [pc, #252]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	628b      	str	r3, [r1, #40]	; 0x28
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	025b      	lsls	r3, r3, #9
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035f4:	4931      	ldr	r1, [pc, #196]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	492d      	ldr	r1, [pc, #180]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f023 0220 	bic.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	4928      	ldr	r1, [pc, #160]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a26      	ldr	r2, [pc, #152]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 800362c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <RCCEx_PLL2_Config+0x160>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	69d2      	ldr	r2, [r2, #28]
 8003636:	00d2      	lsls	r2, r2, #3
 8003638:	4920      	ldr	r1, [pc, #128]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800365a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800365c:	e00f      	b.n	800367e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d106      	bne.n	8003672 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003670:	e005      	b.n	800367e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	4a11      	ldr	r2, [pc, #68]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800367c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 8003684:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368a:	f7fd fcd5 	bl	8001038 <HAL_GetTick>
 800368e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003690:	e008      	b.n	80036a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003692:	f7fd fcd1 	bl	8001038 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e006      	b.n	80036b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <RCCEx_PLL2_Config+0x15c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
 80036c0:	ffff0007 	.word	0xffff0007

080036c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036d2:	4b53      	ldr	r3, [pc, #332]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d101      	bne.n	80036e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e099      	b.n	8003816 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a4e      	ldr	r2, [pc, #312]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fd fca3 	bl	8001038 <HAL_GetTick>
 80036f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036f4:	e008      	b.n	8003708 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80036f6:	f7fd fc9f 	bl	8001038 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e086      	b.n	8003816 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003708:	4b45      	ldr	r3, [pc, #276]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003714:	4b42      	ldr	r3, [pc, #264]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	051b      	lsls	r3, r3, #20
 8003722:	493f      	ldr	r1, [pc, #252]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	628b      	str	r3, [r1, #40]	; 0x28
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	3b01      	subs	r3, #1
 800372e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	3b01      	subs	r3, #1
 8003738:	025b      	lsls	r3, r3, #9
 800373a:	b29b      	uxth	r3, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	3b01      	subs	r3, #1
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003758:	4931      	ldr	r1, [pc, #196]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800375e:	4b30      	ldr	r3, [pc, #192]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	492d      	ldr	r1, [pc, #180]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	4928      	ldr	r1, [pc, #160]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003782:	4b27      	ldr	r3, [pc, #156]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a26      	ldr	r2, [pc, #152]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 8003790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <RCCEx_PLL3_Config+0x160>)
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	69d2      	ldr	r2, [r2, #28]
 800379a:	00d2      	lsls	r2, r2, #3
 800379c:	4920      	ldr	r1, [pc, #128]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037c0:	e00f      	b.n	80037e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037d4:	e005      	b.n	80037e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ee:	f7fd fc23 	bl	8001038 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037f4:	e008      	b.n	8003808 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037f6:	f7fd fc1f 	bl	8001038 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e006      	b.n	8003816 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <RCCEx_PLL3_Config+0x15c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	58024400 	.word	0x58024400
 8003824:	ffff0007 	.word	0xffff0007

08003828 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e04d      	b.n	80038d6 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7a5b      	ldrb	r3, [r3, #9]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd f954 	bl	8000af8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 0120 	bic.w	r1, r3, #32
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0204 	orr.w	r2, r2, #4
 800387a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d104      	bne.n	8003894 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2204      	movs	r2, #4
 800388e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e020      	b.n	80038d6 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003894:	f7fd fbd0 	bl	8001038 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800389a:	e00e      	b.n	80038ba <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800389c:	f7fd fbcc 	bl	8001038 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d907      	bls.n	80038ba <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00d      	b.n	80038d6 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d0e9      	beq.n	800389c <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d105      	bne.n	8003904 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2210      	movs	r2, #16
 80038fc:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 80038fe:	2301      	movs	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e023      	b.n	800394c <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d11c      	bne.n	800394c <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d008      	beq.n	8003932 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e00c      	b.n	800394c <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2208      	movs	r2, #8
 8003936:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0208 	bic.w	r2, r2, #8
 800394a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10b      	bne.n	800396a <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f839 	bl	80039d0 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003966:	605a      	str	r2, [r3, #4]

    return;
 8003968:	e024      	b.n	80039b4 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d11d      	bne.n	80039b4 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0208 	bic.w	r2, r2, #8
 8003986:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7a5b      	ldrb	r3, [r3, #9]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b04      	cmp	r3, #4
 800399a:	d00b      	beq.n	80039b4 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f803 	bl	80039ba <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e049      	b.n	8003a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f841 	bl	8003a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 f9f8 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04f      	b.n	8003b60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d018      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d115      	bne.n	8003b4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d015      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d011      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	e008      	b.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e000      	b.n	8003b5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	40001800 	.word	0x40001800
 8003b84:	00010007 	.word	0x00010007

08003b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0202 	mvn.w	r2, #2
 8003bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f905 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8f7 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f908 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0204 	mvn.w	r2, #4
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8db 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8cd 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8de 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0208 	mvn.w	r2, #8
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8b1 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8a3 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f8b4 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0210 	mvn.w	r2, #16
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f887 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f879 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f88a 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0201 	mvn.w	r2, #1
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fde2 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f914 	bl	8003f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f907 	bl	8003f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f838 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0220 	mvn.w	r2, #32
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8c7 	bl	8003f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01f      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d01b      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d017      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00f      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_Base_SetConfig+0x9a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <__NVIC_SetPriority>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db0a      	blt.n	8003fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	490c      	ldr	r1, [pc, #48]	; (8003fd4 <__NVIC_SetPriority+0x4c>)
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	0112      	lsls	r2, r2, #4
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	440b      	add	r3, r1
 8003fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fb0:	e00a      	b.n	8003fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4908      	ldr	r1, [pc, #32]	; (8003fd8 <__NVIC_SetPriority+0x50>)
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3b04      	subs	r3, #4
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	761a      	strb	r2, [r3, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000e100 	.word	0xe000e100
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Handler+0x1c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003fe4:	f002 fa64 	bl	80064b0 <xTaskGetSchedulerState>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003fee:	f003 fa43 	bl	8007478 <xPortSysTickHandler>
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004000:	2100      	movs	r1, #0
 8004002:	f06f 0004 	mvn.w	r0, #4
 8004006:	f7ff ffbf 	bl	8003f88 <__NVIC_SetPriority>
#endif
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004016:	f3ef 8305 	mrs	r3, IPSR
 800401a:	603b      	str	r3, [r7, #0]
  return(result);
 800401c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004022:	f06f 0305 	mvn.w	r3, #5
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	e00c      	b.n	8004044 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <osKernelInitialize+0x44>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <osKernelInitialize+0x44>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004038:	2300      	movs	r3, #0
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e002      	b.n	8004044 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004044:	687b      	ldr	r3, [r7, #4]
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	24003144 	.word	0x24003144

08004058 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405e:	f3ef 8305 	mrs	r3, IPSR
 8004062:	603b      	str	r3, [r7, #0]
  return(result);
 8004064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <osKernelStart+0x1a>
    stat = osErrorISR;
 800406a:	f06f 0305 	mvn.w	r3, #5
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	e010      	b.n	8004094 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <osKernelStart+0x48>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d109      	bne.n	800408e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800407a:	f7ff ffbf 	bl	8003ffc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <osKernelStart+0x48>)
 8004080:	2202      	movs	r2, #2
 8004082:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004084:	f001 fce4 	bl	8005a50 <vTaskStartScheduler>
      stat = osOK;
 8004088:	2300      	movs	r3, #0
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	e002      	b.n	8004094 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004094:	687b      	ldr	r3, [r7, #4]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	24003144 	.word	0x24003144

080040a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08e      	sub	sp, #56	; 0x38
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040b4:	f3ef 8305 	mrs	r3, IPSR
 80040b8:	617b      	str	r3, [r7, #20]
  return(result);
 80040ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d17e      	bne.n	80041be <osThreadNew+0x11a>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d07b      	beq.n	80041be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040ca:	2318      	movs	r3, #24
 80040cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d045      	beq.n	800416a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <osThreadNew+0x48>
        name = attr->name;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <osThreadNew+0x6e>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b38      	cmp	r3, #56	; 0x38
 8004104:	d805      	bhi.n	8004112 <osThreadNew+0x6e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <osThreadNew+0x72>
        return (NULL);
 8004112:	2300      	movs	r3, #0
 8004114:	e054      	b.n	80041c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <osThreadNew+0xa8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2bbb      	cmp	r3, #187	; 0xbb
 8004134:	d90a      	bls.n	800414c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <osThreadNew+0xa8>
        mem = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e010      	b.n	800416e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10c      	bne.n	800416e <osThreadNew+0xca>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <osThreadNew+0xca>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <osThreadNew+0xca>
          mem = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e001      	b.n	800416e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800417c:	9202      	str	r2, [sp, #8]
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f001 fa74 	bl	8005678 <xTaskCreateStatic>
 8004190:	4603      	mov	r3, r0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e013      	b.n	80041be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d110      	bne.n	80041be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f001 fabf 	bl	8005732 <xTaskCreate>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <osThreadNew+0x11a>
            hTask = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041be:	693b      	ldr	r3, [r7, #16]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3728      	adds	r7, #40	; 0x28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d0:	f3ef 8305 	mrs	r3, IPSR
 80041d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <osDelay+0x1c>
    stat = osErrorISR;
 80041dc:	f06f 0305 	mvn.w	r3, #5
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e007      	b.n	80041f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f001 fbfa 	bl	80059e8 <vTaskDelay>
    }
  }

  return (stat);
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <vApplicationGetIdleTaskMemory+0x2c>)
 8004210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4a06      	ldr	r2, [pc, #24]	; (8004230 <vApplicationGetIdleTaskMemory+0x30>)
 8004216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	24003148 	.word	0x24003148
 8004230:	24003204 	.word	0x24003204

08004234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <vApplicationGetTimerTaskMemory+0x2c>)
 8004244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4a06      	ldr	r2, [pc, #24]	; (8004264 <vApplicationGetTimerTaskMemory+0x30>)
 800424a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	24003404 	.word	0x24003404
 8004264:	240034c0 	.word	0x240034c0

08004268 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800426e:	2020      	movs	r0, #32
 8004270:	f003 f992 	bl	8007598 <pvPortMalloc>
 8004274:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f9f0 	bl	800466c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004292:	687b      	ldr	r3, [r7, #4]
	}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b090      	sub	sp, #64	; 0x40
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	61fb      	str	r3, [r7, #28]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xEventGroupWaitBits+0x72>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	61bb      	str	r3, [r7, #24]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800430e:	f002 f8cf 	bl	80064b0 <xTaskGetSchedulerState>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <xEventGroupWaitBits+0x82>
 8004318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <xEventGroupWaitBits+0x86>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <xEventGroupWaitBits+0x88>
 8004322:	2300      	movs	r3, #0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	617b      	str	r3, [r7, #20]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800433e:	f001 fbf7 	bl	8005b30 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800434e:	f000 f96b 	bl	8004628 <prvTestWaitCondition>
 8004352:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800435e:	2300      	movs	r3, #0
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d028      	beq.n	80043ba <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	43db      	mvns	r3, r3
 8004370:	401a      	ands	r2, r3
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e020      	b.n	80043ba <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
 8004386:	e018      	b.n	80043ba <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	1d18      	adds	r0, r3, #4
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	4313      	orrs	r3, r2
 80043ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b0:	4619      	mov	r1, r3
 80043b2:	f001 fdbb 	bl	8005f2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80043ba:	f001 fbc7 	bl	8005b4c <xTaskResumeAll>
 80043be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80043c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d031      	beq.n	800442a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <xEventGroupWaitBits+0x198>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80043dc:	f002 f9de 	bl	800679c <uxTaskResetEventItemValue>
 80043e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11a      	bne.n	8004422 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80043ec:	f002 ffb2 	bl	8007354 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80043fc:	f000 f914 	bl	8004628 <prvTestWaitCondition>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	43db      	mvns	r3, r3
 8004414:	401a      	ands	r2, r3
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800441e:	f002 ffc9 	bl	80073b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800442c:	4618      	mov	r0, r3
 800442e:	3740      	adds	r7, #64	; 0x40
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <xEventGroupClearBits+0x2a>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	60fb      	str	r3, [r7, #12]
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <xEventGroupClearBits+0x4a>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60bb      	str	r3, [r7, #8]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004482:	f002 ff67 	bl	8007354 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	43db      	mvns	r3, r3
 8004494:	401a      	ands	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800449a:	f002 ff8b 	bl	80073b4 <vPortExitCritical>

	return uxReturn;
 800449e:	693b      	ldr	r3, [r7, #16]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	; 0x38
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80044b2:	2300      	movs	r3, #0
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xEventGroupSetBits+0x32>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <xEventGroupSetBits+0x52>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	3304      	adds	r3, #4
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	3308      	adds	r3, #8
 8004504:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004506:	f001 fb13 	bl	8005b30 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	431a      	orrs	r2, r3
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800451c:	e03c      	b.n	8004598 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004534:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800453c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004558:	e008      	b.n	800456c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d101      	bne.n	800456c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800458c:	4619      	mov	r1, r3
 800458e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004590:	f001 fd98 	bl	80060c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	429a      	cmp	r2, r3
 800459e:	d1be      	bne.n	800451e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80045ae:	f001 facd 	bl	8005b4c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	681b      	ldr	r3, [r3, #0]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3738      	adds	r7, #56	; 0x38
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	3304      	adds	r3, #4
 80045ce:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80045d0:	f001 faae 	bl	8005b30 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80045d4:	e017      	b.n	8004606 <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3308      	adds	r3, #8
 80045de:	429a      	cmp	r2, r3
 80045e0:	d10a      	bne.n	80045f8 <vEventGroupDelete+0x3a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fd5f 	bl	80060c4 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e3      	bne.n	80045d6 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	7f1b      	ldrb	r3, [r3, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f003 f88a 	bl	8007730 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800461c:	f001 fa96 	bl	8005b4c <xTaskResumeAll>
}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e007      	b.n	800465e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	d101      	bne.n	800465e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800465a:	2301      	movs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f103 0208 	add.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f103 0208 	add.w	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d103      	bne.n	800472e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e00c      	b.n	8004748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3308      	adds	r3, #8
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <vListInsert+0x2e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d2f6      	bcs.n	8004736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d103      	bne.n	80047b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	1e5a      	subs	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <xQueueGenericReset+0x2a>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60bb      	str	r3, [r7, #8]
}
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047fe:	f002 fda9 	bl	8007354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	441a      	add	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	3b01      	subs	r3, #1
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d114      	bne.n	800487e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3310      	adds	r3, #16
 8004860:	4618      	mov	r0, r3
 8004862:	f001 fbcb 	bl	8005ffc <xTaskRemoveFromEventList>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <xQueueGenericReset+0xcc>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e009      	b.n	8004892 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3310      	adds	r3, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fef2 	bl	800466c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff feed 	bl	800466c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004892:	f002 fd8f 	bl	80073b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004896:	2301      	movs	r3, #1
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08e      	sub	sp, #56	; 0x38
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <xQueueGenericCreateStatic+0x52>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <xQueueGenericCreateStatic+0x56>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericCreateStatic+0x58>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <xQueueGenericCreateStatic+0x7e>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <xQueueGenericCreateStatic+0x82>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xQueueGenericCreateStatic+0x84>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	61fb      	str	r3, [r7, #28]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004942:	2350      	movs	r3, #80	; 0x50
 8004944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b50      	cmp	r3, #80	; 0x50
 800494a:	d00a      	beq.n	8004962 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61bb      	str	r3, [r7, #24]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004962:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f83f 	bl	8004a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800498c:	4618      	mov	r0, r3
 800498e:	3730      	adds	r7, #48	; 0x30
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueGenericCreate+0x2a>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	613b      	str	r3, [r7, #16]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3350      	adds	r3, #80	; 0x50
 80049cc:	4618      	mov	r0, r3
 80049ce:	f002 fde3 	bl	8007598 <pvPortMalloc>
 80049d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3350      	adds	r3, #80	; 0x50
 80049e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ec:	79fa      	ldrb	r2, [r7, #7]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f805 	bl	8004a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e002      	b.n	8004a2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a36:	2101      	movs	r1, #1
 8004a38:	69b8      	ldr	r0, [r7, #24]
 8004a3a:	f7ff fecb 	bl	80047d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f887 	bl	8004b88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	461a      	mov	r2, r3
 8004a98:	6939      	ldr	r1, [r7, #16]
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7ff ff7a 	bl	8004994 <xQueueGenericCreate>
 8004aa0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff ffd3 	bl	8004a4e <prvInitialiseMutex>

		return xNewQueue;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08a      	sub	sp, #40	; 0x28
 8004ab6:	af02      	add	r7, sp, #8
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61bb      	str	r3, [r7, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d90a      	bls.n	8004af8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	617b      	str	r3, [r7, #20]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004af8:	2302      	movs	r3, #2
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff fece 	bl	80048a4 <xQueueGenericCreateStatic>
 8004b08:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004b16:	69fb      	ldr	r3, [r7, #28]
	}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d90a      	bls.n	8004b64 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	60fb      	str	r3, [r7, #12]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b64:	2202      	movs	r2, #2
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff13 	bl	8004994 <xQueueGenericCreate>
 8004b6e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004b7c:	697b      	ldr	r3, [r7, #20]
	}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	; 0x38
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xQueueGenericSend+0x32>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <xQueueGenericSend+0x40>
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <xQueueGenericSend+0x44>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <xQueueGenericSend+0x46>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <xQueueGenericSend+0x60>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d103      	bne.n	8004bf6 <xQueueGenericSend+0x6e>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <xQueueGenericSend+0x72>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <xQueueGenericSend+0x74>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xQueueGenericSend+0x8e>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	623b      	str	r3, [r7, #32]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c16:	f001 fc4b 	bl	80064b0 <xTaskGetSchedulerState>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <xQueueGenericSend+0x9e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <xQueueGenericSend+0xa2>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericSend+0xa4>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	61fb      	str	r3, [r7, #28]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c46:	f002 fb85 	bl	8007354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <xQueueGenericSend+0xd4>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d129      	bne.n	8004cb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c62:	f000 fb70 	bl	8005346 <prvCopyDataToQueue>
 8004c66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	3324      	adds	r3, #36	; 0x24
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f9c1 	bl	8005ffc <xTaskRemoveFromEventList>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c80:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <xQueueGenericSend+0x1f8>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	e00a      	b.n	8004ca8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <xQueueGenericSend+0x1f8>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ca8:	f002 fb84 	bl	80073b4 <vPortExitCritical>
				return pdPASS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e063      	b.n	8004d78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb6:	f002 fb7d 	bl	80073b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e05c      	b.n	8004d78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fa83 	bl	80061d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd2:	f002 fb6f 	bl	80073b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd6:	f000 ff2b 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cda:	f002 fb3b 	bl	8007354 <vPortEnterCritical>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <xQueueGenericSend+0x16c>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSend+0x182>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0a:	f002 fb53 	bl	80073b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fa72 	bl	8006200 <xTaskCheckForTimeOut>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d124      	bne.n	8004d6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d24:	f000 fc07 	bl	8005536 <prvIsQueueFull>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	3310      	adds	r3, #16
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f8d4 	bl	8005ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3e:	f000 fb92 	bl	8005466 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d42:	f000 ff03 	bl	8005b4c <xTaskResumeAll>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f af7c 	bne.w	8004c46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <xQueueGenericSend+0x1f8>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	e772      	b.n	8004c46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d62:	f000 fb80 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d66:	f000 fef1 	bl	8005b4c <xTaskResumeAll>
 8004d6a:	e76c      	b.n	8004c46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6e:	f000 fb7a 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d72:	f000 feeb 	bl	8005b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3738      	adds	r7, #56	; 0x38
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b090      	sub	sp, #64	; 0x40
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <xQueueGenericSendFromISR+0x3c>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x40>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericSendFromISR+0x42>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSendFromISR+0x6a>
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <xQueueGenericSendFromISR+0x6e>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <xQueueGenericSendFromISR+0x70>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	623b      	str	r3, [r7, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e0e:	f002 fb83 	bl	8007518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e12:	f3ef 8211 	mrs	r2, BASEPRI
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fa      	str	r2, [r7, #28]
 8004e28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <xQueueGenericSendFromISR+0xbc>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d12f      	bne.n	8004ea0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e56:	f000 fa76 	bl	8005346 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d112      	bne.n	8004e8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d016      	beq.n	8004e9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f8c3 	bl	8005ffc <xTaskRemoveFromEventList>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e007      	b.n	8004e9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	b25a      	sxtb	r2, r3
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e9e:	e001      	b.n	8004ea4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3740      	adds	r7, #64	; 0x40
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	; 0x30
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <xQueueReceive+0x30>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	623b      	str	r3, [r7, #32]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <xQueueReceive+0x3e>
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <xQueueReceive+0x42>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueReceive+0x44>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueReceive+0x5e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61fb      	str	r3, [r7, #28]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1a:	f001 fac9 	bl	80064b0 <xTaskGetSchedulerState>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xQueueReceive+0x6e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <xQueueReceive+0x72>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueReceive+0x74>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xQueueReceive+0x8e>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61bb      	str	r3, [r7, #24]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4a:	f002 fa03 	bl	8007354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01f      	beq.n	8004f9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5e:	f000 fa5c 	bl	800541a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00f      	beq.n	8004f92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	3310      	adds	r3, #16
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 f840 	bl	8005ffc <xTaskRemoveFromEventList>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f82:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <xQueueReceive+0x1bc>)
 8004f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f92:	f002 fa0f 	bl	80073b4 <vPortExitCritical>
				return pdPASS;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e069      	b.n	800506e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa0:	f002 fa08 	bl	80073b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e062      	b.n	800506e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fae:	f107 0310 	add.w	r3, r7, #16
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 f90e 	bl	80061d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fbc:	f002 f9fa 	bl	80073b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc0:	f000 fdb6 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc4:	f002 f9c6 	bl	8007354 <vPortEnterCritical>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d103      	bne.n	8004fde <xQueueReceive+0x122>
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe4:	b25b      	sxtb	r3, r3
 8004fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fea:	d103      	bne.n	8004ff4 <xQueueReceive+0x138>
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff4:	f002 f9de 	bl	80073b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff8:	1d3a      	adds	r2, r7, #4
 8004ffa:	f107 0310 	add.w	r3, r7, #16
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f001 f8fd 	bl	8006200 <xTaskCheckForTimeOut>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d123      	bne.n	8005054 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500e:	f000 fa7c 	bl	800550a <prvIsQueueEmpty>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d017      	beq.n	8005048 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	3324      	adds	r3, #36	; 0x24
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f000 ff5f 	bl	8005ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005028:	f000 fa1d 	bl	8005466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800502c:	f000 fd8e 	bl	8005b4c <xTaskResumeAll>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d189      	bne.n	8004f4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <xQueueReceive+0x1bc>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	e780      	b.n	8004f4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504a:	f000 fa0c 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504e:	f000 fd7d 	bl	8005b4c <xTaskResumeAll>
 8005052:	e77a      	b.n	8004f4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005056:	f000 fa06 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505a:	f000 fd77 	bl	8005b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005060:	f000 fa53 	bl	800550a <prvIsQueueEmpty>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	f43f af6f 	beq.w	8004f4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800506c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800506e:	4618      	mov	r0, r3
 8005070:	3730      	adds	r7, #48	; 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08e      	sub	sp, #56	; 0x38
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800508e:	2300      	movs	r3, #0
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	623b      	str	r3, [r7, #32]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	61fb      	str	r3, [r7, #28]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050cc:	f001 f9f0 	bl	80064b0 <xTaskGetSchedulerState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <xQueueSemaphoreTake+0x60>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueSemaphoreTake+0x64>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueSemaphoreTake+0x66>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	61bb      	str	r3, [r7, #24]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050fc:	f002 f92a 	bl	8007354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d024      	beq.n	8005156 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800511c:	f001 fb56 	bl	80067cc <pvTaskIncrementMutexHeldCount>
 8005120:	4602      	mov	r2, r0
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00f      	beq.n	800514e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	3310      	adds	r3, #16
 8005132:	4618      	mov	r0, r3
 8005134:	f000 ff62 	bl	8005ffc <xTaskRemoveFromEventList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800513e:	4b54      	ldr	r3, [pc, #336]	; (8005290 <xQueueSemaphoreTake+0x214>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800514e:	f002 f931 	bl	80073b4 <vPortExitCritical>
				return pdPASS;
 8005152:	2301      	movs	r3, #1
 8005154:	e097      	b.n	8005286 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	617b      	str	r3, [r7, #20]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005178:	f002 f91c 	bl	80073b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800517c:	2300      	movs	r3, #0
 800517e:	e082      	b.n	8005286 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005186:	f107 030c 	add.w	r3, r7, #12
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f822 	bl	80061d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005194:	f002 f90e 	bl	80073b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005198:	f000 fcca 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519c:	f002 f8da 	bl	8007354 <vPortEnterCritical>
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <xQueueSemaphoreTake+0x13a>
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d103      	bne.n	80051cc <xQueueSemaphoreTake+0x150>
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051cc:	f002 f8f2 	bl	80073b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d0:	463a      	mov	r2, r7
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f811 	bl	8006200 <xTaskCheckForTimeOut>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d132      	bne.n	800524a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e6:	f000 f990 	bl	800550a <prvIsQueueEmpty>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d026      	beq.n	800523e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80051f8:	f002 f8ac 	bl	8007354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f001 f973 	bl	80064ec <xTaskPriorityInherit>
 8005206:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005208:	f002 f8d4 	bl	80073b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fe65 	bl	8005ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800521a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800521c:	f000 f923 	bl	8005466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005220:	f000 fc94 	bl	8005b4c <xTaskResumeAll>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	f47f af68 	bne.w	80050fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800522c:	4b18      	ldr	r3, [pc, #96]	; (8005290 <xQueueSemaphoreTake+0x214>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	e75e      	b.n	80050fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800523e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005240:	f000 f911 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005244:	f000 fc82 	bl	8005b4c <xTaskResumeAll>
 8005248:	e758      	b.n	80050fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800524a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800524c:	f000 f90b 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005250:	f000 fc7c 	bl	8005b4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005256:	f000 f958 	bl	800550a <prvIsQueueEmpty>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f43f af4d 	beq.w	80050fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005268:	f002 f874 	bl	8007354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800526c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800526e:	f000 f852 	bl	8005316 <prvGetDisinheritPriorityAfterTimeout>
 8005272:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f001 fa0c 	bl	8006698 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005280:	f002 f898 	bl	80073b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005286:	4618      	mov	r0, r3
 8005288:	3738      	adds	r7, #56	; 0x38
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60bb      	str	r3, [r7, #8]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80052b8:	f002 f84c 	bl	8007354 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80052c2:	f002 f877 	bl	80073b4 <vPortExitCritical>

	return uxReturn;
 80052c6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <vQueueDelete+0x28>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f95f 	bl	80055bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f002 fa11 	bl	8007730 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e001      	b.n	8005338 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005338:	68fb      	ldr	r3, [r7, #12]
	}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10d      	bne.n	8005380 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d14d      	bne.n	8005408 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f923 	bl	80065bc <xTaskPriorityDisinherit>
 8005376:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	e043      	b.n	8005408 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6858      	ldr	r0, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	461a      	mov	r2, r3
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	f00c fba8 	bl	8011ae6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d32b      	bcc.n	8005408 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	e026      	b.n	8005408 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68d8      	ldr	r0, [r3, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	f00c fb8e 	bl	8011ae6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	425b      	negs	r3, r3
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d207      	bcs.n	80053f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	425b      	negs	r3, r3
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d105      	bne.n	8005408 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3b01      	subs	r3, #1
 8005406:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d018      	beq.n	800545e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	d303      	bcc.n	800544e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	461a      	mov	r2, r3
 8005458:	6838      	ldr	r0, [r7, #0]
 800545a:	f00c fb44 	bl	8011ae6 <memcpy>
	}
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800546e:	f001 ff71 	bl	8007354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005478:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800547a:	e011      	b.n	80054a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fdb7 	bl	8005ffc <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005494:	f000 ff16 	bl	80062c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	3b01      	subs	r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dce9      	bgt.n	800547c <prvUnlockQueue+0x16>
 80054a8:	e000      	b.n	80054ac <prvUnlockQueue+0x46>
					break;
 80054aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054b4:	f001 ff7e 	bl	80073b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054b8:	f001 ff4c 	bl	8007354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054c4:	e011      	b.n	80054ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d012      	beq.n	80054f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3310      	adds	r3, #16
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd92 	bl	8005ffc <xTaskRemoveFromEventList>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054de:	f000 fef1 	bl	80062c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dce9      	bgt.n	80054c6 <prvUnlockQueue+0x60>
 80054f2:	e000      	b.n	80054f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054fe:	f001 ff59 	bl	80073b4 <vPortExitCritical>
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005512:	f001 ff1f 	bl	8007354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e001      	b.n	8005528 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005528:	f001 ff44 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800553e:	f001 ff09 	bl	8007354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	429a      	cmp	r2, r3
 800554c:	d102      	bne.n	8005554 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e001      	b.n	8005558 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005558:	f001 ff2c 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e014      	b.n	80055a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <vQueueAddToRegistry+0x50>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <vQueueAddToRegistry+0x50>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <vQueueAddToRegistry+0x50>)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800559a:	e006      	b.n	80055aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d9e7      	bls.n	8005578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	240094b4 	.word	0x240094b4

080055bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e016      	b.n	80055f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d10b      	bne.n	80055f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80055da:	4a0c      	ldr	r2, [pc, #48]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2100      	movs	r1, #0
 80055e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80055e4:	4a09      	ldr	r2, [pc, #36]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
				break;
 80055f0:	e006      	b.n	8005600 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d9e5      	bls.n	80055ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	240094b4 	.word	0x240094b4

08005610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005620:	f001 fe98 	bl	8007354 <vPortEnterCritical>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <vQueueWaitForMessageRestricted+0x2a>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b25b      	sxtb	r3, r3
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vQueueWaitForMessageRestricted+0x40>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	f001 feb0 	bl	80073b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc9d 	bl	8005fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff fefb 	bl	8005466 <prvUnlockQueue>
	}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTaskCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056be:	23bc      	movs	r3, #188	; 0xbc
 80056c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2bbc      	cmp	r3, #188	; 0xbc
 80056c6:	d00a      	beq.n	80056de <xTaskCreateStatic+0x66>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61bb      	str	r3, [r7, #24]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01e      	beq.n	8005724 <xTaskCreateStatic+0xac>
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fe:	2300      	movs	r3, #0
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f850 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571e:	f000 f8f3 	bl	8005908 <prvAddNewTaskToReadyList>
 8005722:	e001      	b.n	8005728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08c      	sub	sp, #48	; 0x30
 8005736:	af04      	add	r7, sp, #16
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 ff26 	bl	8007598 <pvPortMalloc>
 800574c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005754:	20bc      	movs	r0, #188	; 0xbc
 8005756:	f001 ff1f 	bl	8007598 <pvPortMalloc>
 800575a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
 8005768:	e005      	b.n	8005776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f001 ffe0 	bl	8007730 <vPortFree>
 8005770:	e001      	b.n	8005776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	2300      	movs	r3, #0
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f80e 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a0:	69f8      	ldr	r0, [r7, #28]
 80057a2:	f000 f8b1 	bl	8005908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e002      	b.n	80057b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	21a5      	movs	r1, #165	; 0xa5
 80057d6:	f00c f9ae 	bl	8011b36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057e4:	440b      	add	r3, r1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01f      	beq.n	800585a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e012      	b.n	8005846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	3334      	adds	r3, #52	; 0x34
 8005830:	460a      	mov	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b0f      	cmp	r3, #15
 800584a:	d9e9      	bls.n	8005820 <prvInitialiseNewTask+0x64>
 800584c:	e000      	b.n	8005850 <prvInitialiseNewTask+0x94>
			{
				break;
 800584e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005858:	e003      	b.n	8005862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2b37      	cmp	r3, #55	; 0x37
 8005866:	d901      	bls.n	800586c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005868:	2337      	movs	r3, #55	; 0x37
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe ff12 	bl	80046ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe ff0d 	bl	80046ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2260      	movs	r2, #96	; 0x60
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f00c f938 	bl	8011b36 <memset>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <prvInitialiseNewTask+0x140>)
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <prvInitialiseNewTask+0x144>)
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <prvInitialiseNewTask+0x148>)
 80058d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	69b8      	ldr	r0, [r7, #24]
 80058de:	f001 fc0b 	bl	80070f8 <pxPortInitialiseStack>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08012f80 	.word	0x08012f80
 8005900:	08012fa0 	.word	0x08012fa0
 8005904:	08012f60 	.word	0x08012f60

08005908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005910:	f001 fd20 	bl	8007354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800591c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591e:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005934:	f000 fcea 	bl	800630c <prvInitialiseTaskLists>
 8005938:	e00d      	b.n	8005956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d802      	bhi.n	8005956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 800595e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <prvAddNewTaskToReadyList+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <prvAddNewTaskToReadyList+0xd8>)
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fe97 	bl	80046c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005998:	f001 fd0c 	bl	80073b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d207      	bcs.n	80059c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvAddNewTaskToReadyList+0xdc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	24003d94 	.word	0x24003d94
 80059d0:	240038c0 	.word	0x240038c0
 80059d4:	24003da0 	.word	0x24003da0
 80059d8:	24003db0 	.word	0x24003db0
 80059dc:	24003d9c 	.word	0x24003d9c
 80059e0:	240038c4 	.word	0x240038c4
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <vTaskDelay+0x60>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <vTaskDelay+0x30>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a18:	f000 f88a 	bl	8005b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 ffc8 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a24:	f000 f892 	bl	8005b4c <xTaskResumeAll>
 8005a28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <vTaskDelay+0x64>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	24003dbc 	.word	0x24003dbc
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a5e:	463a      	mov	r2, r7
 8005a60:	1d39      	adds	r1, r7, #4
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fbca 	bl	8004200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	4924      	ldr	r1, [pc, #144]	; (8005b10 <vTaskStartScheduler+0xc0>)
 8005a80:	4824      	ldr	r0, [pc, #144]	; (8005b14 <vTaskStartScheduler+0xc4>)
 8005a82:	f7ff fdf9 	bl	8005678 <xTaskCreateStatic>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e001      	b.n	8005a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005aa4:	f000 ffda 	bl	8006a5c <xTimerCreateTimerTask>
 8005aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vTaskStartScheduler+0xcc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3354      	adds	r3, #84	; 0x54
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <vTaskStartScheduler+0xd0>)
 8005acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xd4>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xd8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <vTaskStartScheduler+0xdc>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f001 fb95 	bl	8007210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00e      	b.n	8005b06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <vTaskStartScheduler+0xb4>
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	08012de0 	.word	0x08012de0
 8005b14:	080062dd 	.word	0x080062dd
 8005b18:	24003db8 	.word	0x24003db8
 8005b1c:	240038c0 	.word	0x240038c0
 8005b20:	24000038 	.word	0x24000038
 8005b24:	24003db4 	.word	0x24003db4
 8005b28:	24003da0 	.word	0x24003da0
 8005b2c:	24003d98 	.word	0x24003d98

08005b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	24003dbc 	.word	0x24003dbc

08005b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f001 fbec 	bl	8007354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05e      	beq.n	8005c54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02f      	b.n	8005bf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <xTaskResumeAll+0x120>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fdeb 	bl	8004780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fde6 	bl	8004780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskResumeAll+0x7c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <xTaskResumeAll+0x128>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe fd71 	bl	80046c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <xTaskResumeAll+0x130>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1cb      	bne.n	8005b98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c06:	f000 fc23 	bl	8006450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f000 f847 	bl	8005ca8 <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <xTaskResumeAll+0x138>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c54:	f001 fbae 	bl	80073b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	24003dbc 	.word	0x24003dbc
 8005c68:	24003d94 	.word	0x24003d94
 8005c6c:	24003d54 	.word	0x24003d54
 8005c70:	24003d9c 	.word	0x24003d9c
 8005c74:	240038c4 	.word	0x240038c4
 8005c78:	240038c0 	.word	0x240038c0
 8005c7c:	24003da8 	.word	0x24003da8
 8005c80:	24003da4 	.word	0x24003da4
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <xTaskGetTickCount+0x1c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c94:	687b      	ldr	r3, [r7, #4]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	24003d98 	.word	0x24003d98

08005ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <xTaskIncrementTick+0x148>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 808f 	bne.w	8005dda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cc4:	4a4b      	ldr	r2, [pc, #300]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d120      	bne.n	8005d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cd0:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xTaskIncrementTick+0x46>
 8005cf0:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3f      	ldr	r2, [pc, #252]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	f000 fb9f 	bl	8006450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d12:	4b3c      	ldr	r3, [pc, #240]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d349      	bcc.n	8005db0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
					break;
 8005d2e:	e03f      	b.n	8005db0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d203      	bcs.n	8005d50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d48:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d4e:	e02f      	b.n	8005db0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe fd13 	bl	8004780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fd0a 	bl	8004780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <xTaskIncrementTick+0xd8>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fc95 	bl	80046c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b8      	bcc.n	8005d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	e7b5      	b.n	8005d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4915      	ldr	r1, [pc, #84]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d901      	bls.n	8005dcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <xTaskIncrementTick+0x16c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e004      	b.n	8005de4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005de2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005de4:	697b      	ldr	r3, [r7, #20]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	24003dbc 	.word	0x24003dbc
 8005df4:	24003d98 	.word	0x24003d98
 8005df8:	24003d4c 	.word	0x24003d4c
 8005dfc:	24003d50 	.word	0x24003d50
 8005e00:	24003dac 	.word	0x24003dac
 8005e04:	24003db4 	.word	0x24003db4
 8005e08:	24003d9c 	.word	0x24003d9c
 8005e0c:	240038c4 	.word	0x240038c4
 8005e10:	240038c0 	.word	0x240038c0
 8005e14:	24003da8 	.word	0x24003da8
 8005e18:	24003da4 	.word	0x24003da4

08005e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <vTaskSwitchContext+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e2a:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <vTaskSwitchContext+0xb4>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e30:	e046      	b.n	8005ec0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e32:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <vTaskSwitchContext+0xb4>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e38:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <vTaskSwitchContext+0xb8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e010      	b.n	8005e62 <vTaskSwitchContext+0x46>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <vTaskSwitchContext+0x40>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	607b      	str	r3, [r7, #4]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <vTaskSwitchContext+0x3e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	491d      	ldr	r1, [pc, #116]	; (8005ed8 <vTaskSwitchContext+0xbc>)
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0e4      	beq.n	8005e40 <vTaskSwitchContext+0x24>
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <vTaskSwitchContext+0xbc>)
 8005e82:	4413      	add	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3308      	adds	r3, #8
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d104      	bne.n	8005ea6 <vTaskSwitchContext+0x8a>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <vTaskSwitchContext+0xc0>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <vTaskSwitchContext+0xb8>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <vTaskSwitchContext+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3354      	adds	r3, #84	; 0x54
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <vTaskSwitchContext+0xc4>)
 8005ebe:	6013      	str	r3, [r2, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	24003dbc 	.word	0x24003dbc
 8005ed0:	24003da8 	.word	0x24003da8
 8005ed4:	24003d9c 	.word	0x24003d9c
 8005ed8:	240038c4 	.word	0x240038c4
 8005edc:	240038c0 	.word	0x240038c0
 8005ee0:	24000038 	.word	0x24000038

08005ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <vTaskPlaceOnEventList+0x44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fe fbfb 	bl	800470e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6838      	ldr	r0, [r7, #0]
 8005f1c:	f000 fd4a 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	240038c0 	.word	0x240038c0

08005f2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005f54:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <vTaskPlaceOnUnorderedEventList+0x70>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	613b      	str	r3, [r7, #16]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f7c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f7e:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3318      	adds	r3, #24
 8005f84:	4619      	mov	r1, r3
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7fe fb9d 	bl	80046c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fd10 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
}
 8005f94:	bf00      	nop
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	24003dbc 	.word	0x24003dbc
 8005fa0:	240038c0 	.word	0x240038c0

08005fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	617b      	str	r3, [r7, #20]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7fe fb76 	bl	80046c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f000 fce3 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
	}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	240038c0 	.word	0x240038c0

08005ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60fb      	str	r3, [r7, #12]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3318      	adds	r3, #24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fba7 	bl	8004780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <xTaskRemoveFromEventList+0xb0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11d      	bne.n	8006076 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fb9e 	bl	8004780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <xTaskRemoveFromEventList+0xb4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d903      	bls.n	8006058 <xTaskRemoveFromEventList+0x5c>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <xTaskRemoveFromEventList+0xb4>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <xTaskRemoveFromEventList+0xb8>)
 8006066:	441a      	add	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fb29 	bl	80046c6 <vListInsertEnd>
 8006074:	e005      	b.n	8006082 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3318      	adds	r3, #24
 800607a:	4619      	mov	r1, r3
 800607c:	480e      	ldr	r0, [pc, #56]	; (80060b8 <xTaskRemoveFromEventList+0xbc>)
 800607e:	f7fe fb22 	bl	80046c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <xTaskRemoveFromEventList+0xc0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d905      	bls.n	800609c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <xTaskRemoveFromEventList+0xc4>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e001      	b.n	80060a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a0:	697b      	ldr	r3, [r7, #20]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	24003dbc 	.word	0x24003dbc
 80060b0:	24003d9c 	.word	0x24003d9c
 80060b4:	240038c4 	.word	0x240038c4
 80060b8:	24003d54 	.word	0x24003d54
 80060bc:	240038c0 	.word	0x240038c0
 80060c0:	24003da8 	.word	0x24003da8

080060c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80060ce:	4b29      	ldr	r3, [pc, #164]	; (8006174 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	613b      	str	r3, [r7, #16]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fe fb31 	bl	8004780 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	3304      	adds	r3, #4
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fb2c 	bl	8004780 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d903      	bls.n	800613c <vTaskRemoveFromUnorderedEventList+0x78>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	4a0f      	ldr	r2, [pc, #60]	; (8006178 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4a0c      	ldr	r2, [pc, #48]	; (800617c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800614a:	441a      	add	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fe fab7 	bl	80046c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	429a      	cmp	r2, r3
 8006164:	d902      	bls.n	800616c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
	}
}
 800616c:	bf00      	nop
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	24003dbc 	.word	0x24003dbc
 8006178:	24003d9c 	.word	0x24003d9c
 800617c:	240038c4 	.word	0x240038c4
 8006180:	240038c0 	.word	0x240038c0
 8006184:	24003da8 	.word	0x24003da8

08006188 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <vTaskSetTimeOutState+0x24>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80061ac:	f001 f8d2 	bl	8007354 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <vTaskSetTimeOutState+0x44>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <vTaskSetTimeOutState+0x48>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80061c0:	f001 f8f8 	bl	80073b4 <vPortExitCritical>
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	24003dac 	.word	0x24003dac
 80061d0:	24003d98 	.word	0x24003d98

080061d4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <vTaskInternalSetTimeOutState+0x24>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <vTaskInternalSetTimeOutState+0x28>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	24003dac 	.word	0x24003dac
 80061fc:	24003d98 	.word	0x24003d98

08006200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006242:	f001 f887 	bl	8007354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <xTaskCheckForTimeOut+0xbc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d102      	bne.n	8006266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e023      	b.n	80062ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <xTaskCheckForTimeOut+0xc0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d007      	beq.n	8006282 <xTaskCheckForTimeOut+0x82>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	e015      	b.n	80062ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	429a      	cmp	r2, r3
 800628a:	d20b      	bcs.n	80062a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ff9b 	bl	80061d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e004      	b.n	80062ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062aa:	2301      	movs	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062ae:	f001 f881 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 80062b2:	69fb      	ldr	r3, [r7, #28]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	24003d98 	.word	0x24003d98
 80062c0:	24003dac 	.word	0x24003dac

080062c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <vTaskMissedYield+0x14>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	24003da8 	.word	0x24003da8

080062dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062e4:	f000 f852 	bl	800638c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <prvIdleTask+0x28>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d9f9      	bls.n	80062e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <prvIdleTask+0x2c>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006300:	e7f0      	b.n	80062e4 <prvIdleTask+0x8>
 8006302:	bf00      	nop
 8006304:	240038c4 	.word	0x240038c4
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	e00c      	b.n	8006332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4a12      	ldr	r2, [pc, #72]	; (800636c <prvInitialiseTaskLists+0x60>)
 8006324:	4413      	add	r3, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe f9a0 	bl	800466c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3301      	adds	r3, #1
 8006330:	607b      	str	r3, [r7, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b37      	cmp	r3, #55	; 0x37
 8006336:	d9ef      	bls.n	8006318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006338:	480d      	ldr	r0, [pc, #52]	; (8006370 <prvInitialiseTaskLists+0x64>)
 800633a:	f7fe f997 	bl	800466c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <prvInitialiseTaskLists+0x68>)
 8006340:	f7fe f994 	bl	800466c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006344:	480c      	ldr	r0, [pc, #48]	; (8006378 <prvInitialiseTaskLists+0x6c>)
 8006346:	f7fe f991 	bl	800466c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800634a:	480c      	ldr	r0, [pc, #48]	; (800637c <prvInitialiseTaskLists+0x70>)
 800634c:	f7fe f98e 	bl	800466c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006350:	480b      	ldr	r0, [pc, #44]	; (8006380 <prvInitialiseTaskLists+0x74>)
 8006352:	f7fe f98b 	bl	800466c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <prvInitialiseTaskLists+0x78>)
 8006358:	4a05      	ldr	r2, [pc, #20]	; (8006370 <prvInitialiseTaskLists+0x64>)
 800635a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <prvInitialiseTaskLists+0x7c>)
 800635e:	4a05      	ldr	r2, [pc, #20]	; (8006374 <prvInitialiseTaskLists+0x68>)
 8006360:	601a      	str	r2, [r3, #0]
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	240038c4 	.word	0x240038c4
 8006370:	24003d24 	.word	0x24003d24
 8006374:	24003d38 	.word	0x24003d38
 8006378:	24003d54 	.word	0x24003d54
 800637c:	24003d68 	.word	0x24003d68
 8006380:	24003d80 	.word	0x24003d80
 8006384:	24003d4c 	.word	0x24003d4c
 8006388:	24003d50 	.word	0x24003d50

0800638c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006392:	e019      	b.n	80063c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006394:	f000 ffde 	bl	8007354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <prvCheckTasksWaitingTermination+0x50>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe f9eb 	bl	8004780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <prvCheckTasksWaitingTermination+0x54>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <prvCheckTasksWaitingTermination+0x54>)
 80063b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	4a0a      	ldr	r2, [pc, #40]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063be:	f000 fff9 	bl	80073b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f810 	bl	80063e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <prvCheckTasksWaitingTermination+0x58>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e1      	bne.n	8006394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	24003d68 	.word	0x24003d68
 80063e0:	24003d94 	.word	0x24003d94
 80063e4:	24003d7c 	.word	0x24003d7c

080063e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3354      	adds	r3, #84	; 0x54
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00b fc4f 	bl	8011c98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f991 	bl	8007730 <vPortFree>
				vPortFree( pxTCB );
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f98e 	bl	8007730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006414:	e018      	b.n	8006448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800641c:	2b01      	cmp	r3, #1
 800641e:	d103      	bne.n	8006428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f985 	bl	8007730 <vPortFree>
	}
 8006426:	e00f      	b.n	8006448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800642e:	2b02      	cmp	r3, #2
 8006430:	d00a      	beq.n	8006448 <prvDeleteTCB+0x60>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <prvDeleteTCB+0x5e>
	}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <prvResetNextTaskUnblockTime+0x38>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <prvResetNextTaskUnblockTime+0x3c>)
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006468:	e008      	b.n	800647c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <prvResetNextTaskUnblockTime+0x38>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a04      	ldr	r2, [pc, #16]	; (800648c <prvResetNextTaskUnblockTime+0x3c>)
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	24003d4c 	.word	0x24003d4c
 800648c:	24003db4 	.word	0x24003db4

08006490 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <xTaskGetCurrentTaskHandle+0x1c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800649c:	687b      	ldr	r3, [r7, #4]
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	240038c0 	.word	0x240038c0

080064b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <xTaskGetSchedulerState+0x34>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064be:	2301      	movs	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
 80064c2:	e008      	b.n	80064d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <xTaskGetSchedulerState+0x38>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064cc:	2302      	movs	r3, #2
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	e001      	b.n	80064d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064d6:	687b      	ldr	r3, [r7, #4]
	}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	24003da0 	.word	0x24003da0
 80064e8:	24003dbc 	.word	0x24003dbc

080064ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d051      	beq.n	80065a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <xTaskPriorityInherit+0xc4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	429a      	cmp	r2, r3
 800650e:	d241      	bcs.n	8006594 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	db06      	blt.n	8006526 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <xTaskPriorityInherit+0xc4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6959      	ldr	r1, [r3, #20]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <xTaskPriorityInherit+0xc8>)
 8006538:	4413      	add	r3, r2
 800653a:	4299      	cmp	r1, r3
 800653c:	d122      	bne.n	8006584 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe f91c 	bl	8004780 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <xTaskPriorityInherit+0xc4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <xTaskPriorityInherit+0xcc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d903      	bls.n	8006566 <xTaskPriorityInherit+0x7a>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <xTaskPriorityInherit+0xcc>)
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <xTaskPriorityInherit+0xc8>)
 8006574:	441a      	add	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7fe f8a2 	bl	80046c6 <vListInsertEnd>
 8006582:	e004      	b.n	800658e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <xTaskPriorityInherit+0xc4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e008      	b.n	80065a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <xTaskPriorityInherit+0xc4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d201      	bcs.n	80065a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065a6:	68fb      	ldr	r3, [r7, #12]
	}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	240038c0 	.word	0x240038c0
 80065b4:	240038c4 	.word	0x240038c4
 80065b8:	24003d9c 	.word	0x24003d9c

080065bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d056      	beq.n	8006680 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <xTaskPriorityDisinherit+0xd0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d00a      	beq.n	80065f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60bb      	str	r3, [r7, #8]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	1e5a      	subs	r2, r3, #1
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	429a      	cmp	r2, r3
 8006624:	d02c      	beq.n	8006680 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	2b00      	cmp	r3, #0
 800662c:	d128      	bne.n	8006680 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3304      	adds	r3, #4
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe f8a4 	bl	8004780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <xTaskPriorityDisinherit+0xd4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d903      	bls.n	8006660 <xTaskPriorityDisinherit+0xa4>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <xTaskPriorityDisinherit+0xd4>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a09      	ldr	r2, [pc, #36]	; (8006694 <xTaskPriorityDisinherit+0xd8>)
 800666e:	441a      	add	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe f825 	bl	80046c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006680:	697b      	ldr	r3, [r7, #20]
	}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	240038c0 	.word	0x240038c0
 8006690:	24003d9c 	.word	0x24003d9c
 8006694:	240038c4 	.word	0x240038c4

08006698 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d06a      	beq.n	8006786 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d902      	bls.n	80066de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e002      	b.n	80066e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d04b      	beq.n	8006786 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d146      	bne.n	8006786 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066f8:	4b25      	ldr	r3, [pc, #148]	; (8006790 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d10a      	bne.n	8006718 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60bb      	str	r3, [r7, #8]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	db04      	blt.n	8006736 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	6959      	ldr	r1, [r3, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006746:	4413      	add	r3, r2
 8006748:	4299      	cmp	r1, r3
 800674a:	d11c      	bne.n	8006786 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	3304      	adds	r3, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe f815 	bl	8004780 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d903      	bls.n	800676a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	4a0c      	ldr	r2, [pc, #48]	; (8006798 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a07      	ldr	r2, [pc, #28]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006778:	441a      	add	r2, r3
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fd ffa0 	bl	80046c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006786:	bf00      	nop
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	240038c0 	.word	0x240038c0
 8006794:	240038c4 	.word	0x240038c4
 8006798:	24003d9c 	.word	0x24003d9c

0800679c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <uxTaskResetEventItemValue+0x2c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <uxTaskResetEventItemValue+0x2c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <uxTaskResetEventItemValue+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80067b8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80067ba:	687b      	ldr	r3, [r7, #4]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	240038c0 	.word	0x240038c0

080067cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067de:	3201      	adds	r2, #1
 80067e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80067e2:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80067e4:	681b      	ldr	r3, [r3, #0]
	}
 80067e6:	4618      	mov	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	240038c0 	.word	0x240038c0

080067f4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80067fe:	f000 fda9 	bl	8007354 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <ulTaskNotifyTake+0x90>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d113      	bne.n	8006836 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800680e:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <ulTaskNotifyTake+0x90>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800681e:	2101      	movs	r1, #1
 8006820:	6838      	ldr	r0, [r7, #0]
 8006822:	f000 f8c7 	bl	80069b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <ulTaskNotifyTake+0x94>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006836:	f000 fdbd 	bl	80073b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800683a:	f000 fd8b 	bl	8007354 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <ulTaskNotifyTake+0x90>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006846:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00e      	beq.n	800686c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <ulTaskNotifyTake+0x90>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800685e:	e005      	b.n	800686c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <ulTaskNotifyTake+0x90>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	3a01      	subs	r2, #1
 8006868:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <ulTaskNotifyTake+0x90>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8006876:	f000 fd9d 	bl	80073b4 <vPortExitCritical>

		return ulReturn;
 800687a:	68fb      	ldr	r3, [r7, #12]
	}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	240038c0 	.word	0x240038c0
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61bb      	str	r3, [r7, #24]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b2:	f000 fe31 	bl	8007518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80068ba:	f3ef 8211 	mrs	r2, BASEPRI
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	617a      	str	r2, [r7, #20]
 80068d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068d2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80068dc:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80068f4:	7ffb      	ldrb	r3, [r7, #31]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d146      	bne.n	8006988 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60fb      	str	r3, [r7, #12]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006918:	4b20      	ldr	r3, [pc, #128]	; (800699c <vTaskNotifyGiveFromISR+0x110>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11d      	bne.n	800695c <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	3304      	adds	r3, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd ff2b 	bl	8004780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <vTaskNotifyGiveFromISR+0x114>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d903      	bls.n	800693e <vTaskNotifyGiveFromISR+0xb2>
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <vTaskNotifyGiveFromISR+0x114>)
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <vTaskNotifyGiveFromISR+0x118>)
 800694c:	441a      	add	r2, r3
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fd feb6 	bl	80046c6 <vListInsertEnd>
 800695a:	e005      	b.n	8006968 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	3318      	adds	r3, #24
 8006960:	4619      	mov	r1, r3
 8006962:	4811      	ldr	r0, [pc, #68]	; (80069a8 <vTaskNotifyGiveFromISR+0x11c>)
 8006964:	f7fd feaf 	bl	80046c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <vTaskNotifyGiveFromISR+0x120>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d908      	bls.n	8006988 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006982:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vTaskNotifyGiveFromISR+0x124>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f383 8811 	msr	BASEPRI, r3
}
 8006992:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006994:	bf00      	nop
 8006996:	3728      	adds	r7, #40	; 0x28
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	24003dbc 	.word	0x24003dbc
 80069a0:	24003d9c 	.word	0x24003d9c
 80069a4:	240038c4 	.word	0x240038c4
 80069a8:	24003d54 	.word	0x24003d54
 80069ac:	240038c0 	.word	0x240038c0
 80069b0:	24003da8 	.word	0x24003da8

080069b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069be:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x90>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c4:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd fed8 	bl	8004780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d10a      	bne.n	80069ee <prvAddCurrentTaskToDelayedList+0x3a>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069de:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4819      	ldr	r0, [pc, #100]	; (8006a4c <prvAddCurrentTaskToDelayedList+0x98>)
 80069e8:	f7fd fe6d 	bl	80046c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069ec:	e026      	b.n	8006a3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d209      	bcs.n	8006a1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a06:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f7fd fe7b 	bl	800470e <vListInsert>
}
 8006a18:	e010      	b.n	8006a3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fd fe71 	bl	800470e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d202      	bcs.n	8006a3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a36:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	24003d98 	.word	0x24003d98
 8006a48:	240038c0 	.word	0x240038c0
 8006a4c:	24003d80 	.word	0x24003d80
 8006a50:	24003d50 	.word	0x24003d50
 8006a54:	24003d4c 	.word	0x24003d4c
 8006a58:	24003db4 	.word	0x24003db4

08006a5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	; 0x28
 8006a60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a66:	f000 fb07 	bl	8007078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a6a:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <xTimerCreateTimerTask+0x80>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d021      	beq.n	8006ab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a7a:	1d3a      	adds	r2, r7, #4
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	f107 030c 	add.w	r3, r7, #12
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd fbd5 	bl	8004234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	9202      	str	r2, [sp, #8]
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	2302      	movs	r3, #2
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	4910      	ldr	r1, [pc, #64]	; (8006ae0 <xTimerCreateTimerTask+0x84>)
 8006a9e:	4811      	ldr	r0, [pc, #68]	; (8006ae4 <xTimerCreateTimerTask+0x88>)
 8006aa0:	f7fe fdea 	bl	8005678 <xTaskCreateStatic>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <xTimerCreateTimerTask+0x8c>)
 8006aa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <xTimerCreateTimerTask+0x8c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	613b      	str	r3, [r7, #16]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	24003df0 	.word	0x24003df0
 8006ae0:	08012de8 	.word	0x08012de8
 8006ae4:	08006c21 	.word	0x08006c21
 8006ae8:	24003df4 	.word	0x24003df4

08006aec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	623b      	str	r3, [r7, #32]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <xTimerGenericCommand+0x98>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02a      	beq.n	8006b78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	dc18      	bgt.n	8006b66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b34:	f7ff fcbc 	bl	80064b0 <xTaskGetSchedulerState>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d109      	bne.n	8006b52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b3e:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <xTimerGenericCommand+0x98>)
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	f107 0110 	add.w	r1, r7, #16
 8006b46:	2300      	movs	r3, #0
 8006b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4a:	f7fe f81d 	bl	8004b88 <xQueueGenericSend>
 8006b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b50:	e012      	b.n	8006b78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <xTimerGenericCommand+0x98>)
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f107 0110 	add.w	r1, r7, #16
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f7fe f813 	bl	8004b88 <xQueueGenericSend>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24
 8006b64:	e008      	b.n	8006b78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <xTimerGenericCommand+0x98>)
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f107 0110 	add.w	r1, r7, #16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	f7fe f907 	bl	8004d84 <xQueueGenericSendFromISR>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3728      	adds	r7, #40	; 0x28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	24003df0 	.word	0x24003df0

08006b88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <prvProcessExpiredTimer+0x94>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fd fded 	bl	8004780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d022      	beq.n	8006bfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	18d1      	adds	r1, r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f000 f8d1 	bl	8006d68 <prvInsertTimerInActiveList>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01f      	beq.n	8006c0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7ff ff88 	bl	8006aec <xTimerGenericCommand>
 8006bdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d113      	bne.n	8006c0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	4798      	blx	r3
}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	24003de8 	.word	0x24003de8

08006c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 f857 	bl	8006ce0 <prvGetNextExpireTime>
 8006c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f803 	bl	8006c44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c3e:	f000 f8d5 	bl	8006dec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c42:	e7f1      	b.n	8006c28 <prvTimerTask+0x8>

08006c44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c4e:	f7fe ff6f 	bl	8005b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c52:	f107 0308 	add.w	r3, r7, #8
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f866 	bl	8006d28 <prvSampleTimeNow>
 8006c5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d130      	bne.n	8006cc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <prvProcessTimerOrBlockTask+0x3c>
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d806      	bhi.n	8006c80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c72:	f7fe ff6b 	bl	8005b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ff85 	bl	8006b88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c7e:	e024      	b.n	8006cca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <prvProcessTimerOrBlockTask+0x90>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <prvProcessTimerOrBlockTask+0x50>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x52>
 8006c94:	2300      	movs	r3, #0
 8006c96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <prvProcessTimerOrBlockTask+0x94>)
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7fe fcb3 	bl	8005610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006caa:	f7fe ff4f 	bl	8005b4c <xTaskResumeAll>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <prvProcessTimerOrBlockTask+0x98>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
}
 8006cc4:	e001      	b.n	8006cca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cc6:	f7fe ff41 	bl	8005b4c <xTaskResumeAll>
}
 8006cca:	bf00      	nop
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	24003dec 	.word	0x24003dec
 8006cd8:	24003df0 	.word	0x24003df0
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <prvGetNextExpireTime+0x44>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <prvGetNextExpireTime+0x16>
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	e000      	b.n	8006cf8 <prvGetNextExpireTime+0x18>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <prvGetNextExpireTime+0x44>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e001      	b.n	8006d14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d14:	68fb      	ldr	r3, [r7, #12]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	24003de8 	.word	0x24003de8

08006d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d30:	f7fe ffaa 	bl	8005c88 <xTaskGetTickCount>
 8006d34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <prvSampleTimeNow+0x3c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d205      	bcs.n	8006d4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d40:	f000 f936 	bl	8006fb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e002      	b.n	8006d52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d52:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <prvSampleTimeNow+0x3c>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d58:	68fb      	ldr	r3, [r7, #12]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	24003df8 	.word	0x24003df8

08006d68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d812      	bhi.n	8006db4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e01b      	b.n	8006dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <prvInsertTimerInActiveList+0x7c>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fd fcae 	bl	800470e <vListInsert>
 8006db2:	e012      	b.n	8006dda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d206      	bcs.n	8006dca <prvInsertTimerInActiveList+0x62>
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d302      	bcc.n	8006dca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e007      	b.n	8006dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <prvInsertTimerInActiveList+0x80>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f7fd fc9a 	bl	800470e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dda:	697b      	ldr	r3, [r7, #20]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	24003dec 	.word	0x24003dec
 8006de8:	24003de8 	.word	0x24003de8

08006dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08e      	sub	sp, #56	; 0x38
 8006df0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006df2:	e0ca      	b.n	8006f8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da18      	bge.n	8006e2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	61fb      	str	r3, [r7, #28]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e22:	6850      	ldr	r0, [r2, #4]
 8006e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e26:	6892      	ldr	r2, [r2, #8]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f2c0 80aa 	blt.w	8006f88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	3304      	adds	r3, #4
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fd fc9b 	bl	8004780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff6b 	bl	8006d28 <prvSampleTimeNow>
 8006e52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b09      	cmp	r3, #9
 8006e58:	f200 8097 	bhi.w	8006f8a <prvProcessReceivedCommands+0x19e>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <prvProcessReceivedCommands+0x78>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e8d 	.word	0x08006e8d
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f15 	.word	0x08006f15
 8006e78:	08006f5f 	.word	0x08006f5f
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e8d 	.word	0x08006e8d
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f15 	.word	0x08006f15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	18d1      	adds	r1, r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eac:	f7ff ff5c 	bl	8006d68 <prvInsertTimerInActiveList>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d069      	beq.n	8006f8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05e      	beq.n	8006f8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	441a      	add	r2, r3
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ede:	f7ff fe05 	bl	8006aec <xTimerGenericCommand>
 8006ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d14f      	bne.n	8006f8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61bb      	str	r3, [r7, #24]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f12:	e03a      	b.n	8006f8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	617b      	str	r3, [r7, #20]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	18d1      	adds	r1, r2, r3
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f58:	f7ff ff06 	bl	8006d68 <prvInsertTimerInActiveList>
					break;
 8006f5c:	e015      	b.n	8006f8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d103      	bne.n	8006f74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6e:	f000 fbdf 	bl	8007730 <vPortFree>
 8006f72:	e00a      	b.n	8006f8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f86:	e000      	b.n	8006f8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <prvProcessReceivedCommands+0x1c0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1d39      	adds	r1, r7, #4
 8006f90:	2200      	movs	r2, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fd ff92 	bl	8004ebc <xQueueReceive>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f af2a 	bne.w	8006df4 <prvProcessReceivedCommands+0x8>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	3730      	adds	r7, #48	; 0x30
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	24003df0 	.word	0x24003df0

08006fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb6:	e048      	b.n	800704a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb8:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <prvSwitchTimerLists+0xc0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc2:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <prvSwitchTimerLists+0xc0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd fbd5 	bl	8004780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02e      	beq.n	800704a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90e      	bls.n	800701c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800700a:	4b19      	ldr	r3, [pc, #100]	; (8007070 <prvSwitchTimerLists+0xc0>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f7fd fb7a 	bl	800470e <vListInsert>
 800701a:	e016      	b.n	800704a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	2100      	movs	r1, #0
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fd60 	bl	8006aec <xTimerGenericCommand>
 800702c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	603b      	str	r3, [r7, #0]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <prvSwitchTimerLists+0xc0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1b1      	bne.n	8006fb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvSwitchTimerLists+0xc0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <prvSwitchTimerLists+0xc4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a04      	ldr	r2, [pc, #16]	; (8007070 <prvSwitchTimerLists+0xc0>)
 8007060:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <prvSwitchTimerLists+0xc4>)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	6013      	str	r3, [r2, #0]
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	24003de8 	.word	0x24003de8
 8007074:	24003dec 	.word	0x24003dec

08007078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800707e:	f000 f969 	bl	8007354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <prvCheckForValidListAndQueue+0x60>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d120      	bne.n	80070cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800708a:	4814      	ldr	r0, [pc, #80]	; (80070dc <prvCheckForValidListAndQueue+0x64>)
 800708c:	f7fd faee 	bl	800466c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007090:	4813      	ldr	r0, [pc, #76]	; (80070e0 <prvCheckForValidListAndQueue+0x68>)
 8007092:	f7fd faeb 	bl	800466c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007096:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <prvCheckForValidListAndQueue+0x6c>)
 8007098:	4a10      	ldr	r2, [pc, #64]	; (80070dc <prvCheckForValidListAndQueue+0x64>)
 800709a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <prvCheckForValidListAndQueue+0x70>)
 800709e:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <prvCheckForValidListAndQueue+0x68>)
 80070a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070a2:	2300      	movs	r3, #0
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <prvCheckForValidListAndQueue+0x74>)
 80070a8:	4a11      	ldr	r2, [pc, #68]	; (80070f0 <prvCheckForValidListAndQueue+0x78>)
 80070aa:	2110      	movs	r1, #16
 80070ac:	200a      	movs	r0, #10
 80070ae:	f7fd fbf9 	bl	80048a4 <xQueueGenericCreateStatic>
 80070b2:	4603      	mov	r3, r0
 80070b4:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <prvCheckForValidListAndQueue+0x60>)
 80070b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070b8:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <prvCheckForValidListAndQueue+0x60>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <prvCheckForValidListAndQueue+0x60>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	490b      	ldr	r1, [pc, #44]	; (80070f4 <prvCheckForValidListAndQueue+0x7c>)
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fa4e 	bl	8005568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070cc:	f000 f972 	bl	80073b4 <vPortExitCritical>
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	24003df0 	.word	0x24003df0
 80070dc:	24003dc0 	.word	0x24003dc0
 80070e0:	24003dd4 	.word	0x24003dd4
 80070e4:	24003de8 	.word	0x24003de8
 80070e8:	24003dec 	.word	0x24003dec
 80070ec:	24003e9c 	.word	0x24003e9c
 80070f0:	24003dfc 	.word	0x24003dfc
 80070f4:	08012df0 	.word	0x08012df0

080070f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3b04      	subs	r3, #4
 8007108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3b04      	subs	r3, #4
 8007116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f023 0201 	bic.w	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3b04      	subs	r3, #4
 8007126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007128:	4a0c      	ldr	r2, [pc, #48]	; (800715c <pxPortInitialiseStack+0x64>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3b14      	subs	r3, #20
 8007132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3b04      	subs	r3, #4
 800713e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b20      	subs	r3, #32
 800714c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	08007161 	.word	0x08007161

08007160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <prvTaskExitError+0x54>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d00a      	beq.n	800718a <prvTaskExitError+0x2a>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60fb      	str	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <prvTaskExitError+0x28>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	60bb      	str	r3, [r7, #8]
}
 800719c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800719e:	bf00      	nop
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0fc      	beq.n	80071a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	24000018 	.word	0x24000018
	...

080071c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	240038c0 	.word	0x240038c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071e8:	4808      	ldr	r0, [pc, #32]	; (800720c <prvPortStartFirstTask+0x24>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f380 8808 	msr	MSP, r0
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8814 	msr	CONTROL, r0
 80071fa:	b662      	cpsie	i
 80071fc:	b661      	cpsie	f
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	df00      	svc	0
 8007208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800720a:	bf00      	nop
 800720c:	e000ed08 	.word	0xe000ed08

08007210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007216:	4b46      	ldr	r3, [pc, #280]	; (8007330 <xPortStartScheduler+0x120>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a46      	ldr	r2, [pc, #280]	; (8007334 <xPortStartScheduler+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10a      	bne.n	8007236 <xPortStartScheduler+0x26>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	613b      	str	r3, [r7, #16]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007236:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <xPortStartScheduler+0x120>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a3f      	ldr	r2, [pc, #252]	; (8007338 <xPortStartScheduler+0x128>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10a      	bne.n	8007256 <xPortStartScheduler+0x46>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <xPortStartScheduler+0x12c>)
 8007258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007278:	b2da      	uxtb	r2, r3
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <xPortStartScheduler+0x130>)
 800727c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <xPortStartScheduler+0x134>)
 8007280:	2207      	movs	r2, #7
 8007282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007284:	e009      	b.n	800729a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <xPortStartScheduler+0x134>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3b01      	subs	r3, #1
 800728c:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <xPortStartScheduler+0x134>)
 800728e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d0ef      	beq.n	8007286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072a6:	4b27      	ldr	r3, [pc, #156]	; (8007344 <xPortStartScheduler+0x134>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1c3 0307 	rsb	r3, r3, #7
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d00a      	beq.n	80072c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60bb      	str	r3, [r7, #8]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <xPortStartScheduler+0x134>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <xPortStartScheduler+0x134>)
 80072d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xPortStartScheduler+0x134>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <xPortStartScheduler+0x134>)
 80072dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <xPortStartScheduler+0x138>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <xPortStartScheduler+0x138>)
 80072ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <xPortStartScheduler+0x138>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a14      	ldr	r2, [pc, #80]	; (8007348 <xPortStartScheduler+0x138>)
 80072f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072fe:	f000 f8dd 	bl	80074bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <xPortStartScheduler+0x13c>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007308:	f000 f8fc 	bl	8007504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800730c:	4b10      	ldr	r3, [pc, #64]	; (8007350 <xPortStartScheduler+0x140>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <xPortStartScheduler+0x140>)
 8007312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007318:	f7ff ff66 	bl	80071e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800731c:	f7fe fd7e 	bl	8005e1c <vTaskSwitchContext>
	prvTaskExitError();
 8007320:	f7ff ff1e 	bl	8007160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000ed00 	.word	0xe000ed00
 8007334:	410fc271 	.word	0x410fc271
 8007338:	410fc270 	.word	0x410fc270
 800733c:	e000e400 	.word	0xe000e400
 8007340:	24003eec 	.word	0x24003eec
 8007344:	24003ef0 	.word	0x24003ef0
 8007348:	e000ed20 	.word	0xe000ed20
 800734c:	24000018 	.word	0x24000018
 8007350:	e000ef34 	.word	0xe000ef34

08007354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	607b      	str	r3, [r7, #4]
}
 800736c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <vPortEnterCritical+0x58>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3301      	adds	r3, #1
 8007374:	4a0d      	ldr	r2, [pc, #52]	; (80073ac <vPortEnterCritical+0x58>)
 8007376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <vPortEnterCritical+0x58>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10f      	bne.n	80073a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <vPortEnterCritical+0x5c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	603b      	str	r3, [r7, #0]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <vPortEnterCritical+0x4a>
	}
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	24000018 	.word	0x24000018
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <vPortExitCritical+0x50>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vPortExitCritical+0x24>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	607b      	str	r3, [r7, #4]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <vPortExitCritical+0x50>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <vPortExitCritical+0x50>)
 80073e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <vPortExitCritical+0x50>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <vPortExitCritical+0x42>
 80073ea:	2300      	movs	r3, #0
 80073ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f383 8811 	msr	BASEPRI, r3
}
 80073f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	24000018 	.word	0x24000018
	...

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f01e 0f10 	tst.w	lr, #16
 8007420:	bf08      	it	eq
 8007422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	6010      	str	r0, [r2, #0]
 800742c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007434:	f380 8811 	msr	BASEPRI, r0
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f7fe fcec 	bl	8005e1c <vTaskSwitchContext>
 8007444:	f04f 0000 	mov.w	r0, #0
 8007448:	f380 8811 	msr	BASEPRI, r0
 800744c:	bc09      	pop	{r0, r3}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	f01e 0f10 	tst.w	lr, #16
 800745a:	bf08      	it	eq
 800745c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007460:	f380 8809 	msr	PSP, r0
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst>:
 8007470:	240038c0 	.word	0x240038c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007492:	f7fe fc09 	bl	8005ca8 <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <xPortSysTickHandler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <vPortSetupTimerInterrupt+0x44>)
 80074da:	3b01      	subs	r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010
 80074f4:	e000e018 	.word	0xe000e018
 80074f8:	24000008 	.word	0x24000008
 80074fc:	10624dd3 	.word	0x10624dd3
 8007500:	e000e014 	.word	0xe000e014

08007504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007514 <vPortEnableVFP+0x10>
 8007508:	6801      	ldr	r1, [r0, #0]
 800750a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800750e:	6001      	str	r1, [r0, #0]
 8007510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007512:	bf00      	nop
 8007514:	e000ed88 	.word	0xe000ed88

08007518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800751e:	f3ef 8305 	mrs	r3, IPSR
 8007522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d914      	bls.n	8007554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <vPortValidateInterruptPriority+0x70>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <vPortValidateInterruptPriority+0x74>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	7afa      	ldrb	r2, [r7, #11]
 800753a:	429a      	cmp	r2, r3
 800753c:	d20a      	bcs.n	8007554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vPortValidateInterruptPriority+0x78>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <vPortValidateInterruptPriority+0x7c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d90a      	bls.n	800757a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	603b      	str	r3, [r7, #0]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vPortValidateInterruptPriority+0x60>
	}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	e000e3f0 	.word	0xe000e3f0
 800758c:	24003eec 	.word	0x24003eec
 8007590:	e000ed0c 	.word	0xe000ed0c
 8007594:	24003ef0 	.word	0x24003ef0

08007598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075a4:	f7fe fac4 	bl	8005b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075a8:	4b5b      	ldr	r3, [pc, #364]	; (8007718 <pvPortMalloc+0x180>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075b0:	f000 f92c 	bl	800780c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075b4:	4b59      	ldr	r3, [pc, #356]	; (800771c <pvPortMalloc+0x184>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8093 	bne.w	80076e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01d      	beq.n	8007604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075c8:	2208      	movs	r2, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d014      	beq.n	8007604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <pvPortMalloc+0x6c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d06e      	beq.n	80076e8 <pvPortMalloc+0x150>
 800760a:	4b45      	ldr	r3, [pc, #276]	; (8007720 <pvPortMalloc+0x188>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d869      	bhi.n	80076e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <pvPortMalloc+0x18c>)
 8007616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <pvPortMalloc+0x18c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761e:	e004      	b.n	800762a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <pvPortMalloc+0xa4>
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f1      	bne.n	8007620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <pvPortMalloc+0x180>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	429a      	cmp	r2, r3
 8007644:	d050      	beq.n	80076e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2208      	movs	r2, #8
 800764c:	4413      	add	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	2308      	movs	r3, #8
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	d91f      	bls.n	80076a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <pvPortMalloc+0xf8>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	613b      	str	r3, [r7, #16]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f000 f914 	bl	80078d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <pvPortMalloc+0x188>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <pvPortMalloc+0x188>)
 80076b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <pvPortMalloc+0x188>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <pvPortMalloc+0x190>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d203      	bcs.n	80076ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <pvPortMalloc+0x188>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <pvPortMalloc+0x190>)
 80076c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x184>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x194>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a11      	ldr	r2, [pc, #68]	; (800772c <pvPortMalloc+0x194>)
 80076e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076e8:	f7fe fa30 	bl	8005b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <pvPortMalloc+0x174>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <pvPortMalloc+0x172>
	return pvReturn;
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	24007afc 	.word	0x24007afc
 800771c:	24007b10 	.word	0x24007b10
 8007720:	24007b00 	.word	0x24007b00
 8007724:	24007af4 	.word	0x24007af4
 8007728:	24007b04 	.word	0x24007b04
 800772c:	24007b08 	.word	0x24007b08

08007730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04d      	beq.n	80077de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007742:	2308      	movs	r3, #8
 8007744:	425b      	negs	r3, r3
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <vPortFree+0xb8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <vPortFree+0x44>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <vPortFree+0x62>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60bb      	str	r3, [r7, #8]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <vPortFree+0xb8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01e      	beq.n	80077de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11a      	bne.n	80077de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <vPortFree+0xb8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	401a      	ands	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077b8:	f7fe f9ba 	bl	8005b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <vPortFree+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4413      	add	r3, r2
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <vPortFree+0xbc>)
 80077c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 f880 	bl	80078d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vPortFree+0xc0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vPortFree+0xc0>)
 80077d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077da:	f7fe f9b7 	bl	8005b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	24007b10 	.word	0x24007b10
 80077ec:	24007b00 	.word	0x24007b00
 80077f0:	24007b0c 	.word	0x24007b0c

080077f4 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	24007b04 	.word	0x24007b04

0800780c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007812:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007816:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007818:	4b27      	ldr	r3, [pc, #156]	; (80078b8 <prvHeapInit+0xac>)
 800781a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3307      	adds	r3, #7
 800782a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0307 	bic.w	r3, r3, #7
 8007832:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	4a1f      	ldr	r2, [pc, #124]	; (80078b8 <prvHeapInit+0xac>)
 800783c:	4413      	add	r3, r2
 800783e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007844:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <prvHeapInit+0xb0>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800784a:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <prvHeapInit+0xb0>)
 800784c:	2200      	movs	r2, #0
 800784e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	4413      	add	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007858:	2208      	movs	r2, #8
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <prvHeapInit+0xb4>)
 800786c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <prvHeapInit+0xb4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007876:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <prvHeapInit+0xb4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <prvHeapInit+0xb4>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <prvHeapInit+0xb8>)
 800789a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <prvHeapInit+0xbc>)
 80078a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078a4:	4b09      	ldr	r3, [pc, #36]	; (80078cc <prvHeapInit+0xc0>)
 80078a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078aa:	601a      	str	r2, [r3, #0]
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	24003ef4 	.word	0x24003ef4
 80078bc:	24007af4 	.word	0x24007af4
 80078c0:	24007afc 	.word	0x24007afc
 80078c4:	24007b04 	.word	0x24007b04
 80078c8:	24007b00 	.word	0x24007b00
 80078cc:	24007b10 	.word	0x24007b10

080078d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078d8:	4b28      	ldr	r3, [pc, #160]	; (800797c <prvInsertBlockIntoFreeList+0xac>)
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	e002      	b.n	80078e4 <prvInsertBlockIntoFreeList+0x14>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d8f7      	bhi.n	80078de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d108      	bne.n	8007912 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d118      	bne.n	8007958 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b15      	ldr	r3, [pc, #84]	; (8007980 <prvInsertBlockIntoFreeList+0xb0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d00d      	beq.n	800794e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	441a      	add	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e008      	b.n	8007960 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <prvInsertBlockIntoFreeList+0xb0>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e003      	b.n	8007960 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d002      	beq.n	800796e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800796e:	bf00      	nop
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	24007af4 	.word	0x24007af4
 8007980:	24007afc 	.word	0x24007afc

08007984 <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800798c:	2300      	movs	r3, #0
 800798e:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	330e      	adds	r3, #14
 8007994:	61bb      	str	r3, [r7, #24]

    /* Only Ethernet hardware type is supported.
     * Only IPv4 address can be present in the ARP packet.
     * The hardware length (the MAC address) must be 6 bytes. And,
     * The Protocol address length must be 4 bytes as it is IPv4. */
    if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a0:	f040 808d 	bne.w	8007abe <eARPProcessPacket+0x13a>
        ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	885b      	ldrh	r3, [r3, #2]
 80079a8:	b29b      	uxth	r3, r3
    if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	f040 8087 	bne.w	8007abe <eARPProcessPacket+0x13a>
        ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	791b      	ldrb	r3, [r3, #4]
        ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80079b4:	2b06      	cmp	r3, #6
 80079b6:	f040 8082 	bne.w	8007abe <eARPProcessPacket+0x13a>
        ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	795b      	ldrb	r3, [r3, #5]
        ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d17d      	bne.n	8007abe <eARPProcessPacket+0x13a>
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	330e      	adds	r3, #14
 80079c6:	617b      	str	r3, [r7, #20]
        pvCopyDest = &ulSenderProtocolAddress;
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	601a      	str	r2, [r3, #0]
        /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
        ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	60fb      	str	r3, [r7, #12]

        traceARP_PACKET_RECEIVED();

        /* Don't do anything if the local IP address is zero because
         * that means a DHCP request has not completed. */
        if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 80079de:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <eARPProcessPacket+0x144>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d068      	beq.n	8007ab8 <eARPProcessPacket+0x134>
        {
            switch( pxARPHeader->usOperation )
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d003      	beq.n	80079fa <eARPProcessPacket+0x76>
 80079f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f6:	d057      	beq.n	8007aa8 <eARPProcessPacket+0x124>
                    #endif /* ipconfigARP_USE_CLASH_DETECTION */
                    break;

                default:
                    /* Invalid. */
                    break;
 80079f8:	e061      	b.n	8007abe <eARPProcessPacket+0x13a>
                    if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <eARPProcessPacket+0x144>)
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d15b      	bne.n	8007abc <eARPProcessPacket+0x138>
                        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	3308      	adds	r3, #8
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f861 	bl	8007ad4 <vARPRefreshCacheEntry>
                        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2200      	movs	r2, #0
 8007a16:	719a      	strb	r2, [r3, #6]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f042 0202 	orr.w	r2, r2, #2
 8007a1e:	71da      	strb	r2, [r3, #7]
                        if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d11a      	bne.n	8007a5e <eARPProcessPacket+0xda>
                            pvCopySource = xBroadcastMACAddress.ucBytes;
 8007a28:	4b28      	ldr	r3, [pc, #160]	; (8007acc <eARPProcessPacket+0x148>)
 8007a2a:	617b      	str	r3, [r7, #20]
                            pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3306      	adds	r3, #6
 8007a30:	613b      	str	r3, [r7, #16]
                            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 8007a32:	2206      	movs	r2, #6
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	6938      	ldr	r0, [r7, #16]
 8007a38:	f00a f855 	bl	8011ae6 <memcpy>
                            ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	3312      	adds	r3, #18
 8007a40:	2206      	movs	r2, #6
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f00a f876 	bl	8011b36 <memset>
                            pxARPHeader->ulTargetProtocolAddress = 0UL;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	761a      	strb	r2, [r3, #24]
 8007a50:	2200      	movs	r2, #0
 8007a52:	765a      	strb	r2, [r3, #25]
 8007a54:	2200      	movs	r2, #0
 8007a56:	769a      	strb	r2, [r3, #26]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	76da      	strb	r2, [r3, #27]
 8007a5c:	e00d      	b.n	8007a7a <eARPProcessPacket+0xf6>
                            pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	3308      	adds	r3, #8
 8007a62:	617b      	str	r3, [r7, #20]
                            pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	3312      	adds	r3, #18
 8007a68:	613b      	str	r3, [r7, #16]
                            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007a6a:	2206      	movs	r2, #6
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	6938      	ldr	r0, [r7, #16]
 8007a70:	f00a f839 	bl	8011ae6 <memcpy>
                            pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	619a      	str	r2, [r3, #24]
                        pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007a7a:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <eARPProcessPacket+0x144>)
 8007a7c:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	3308      	adds	r3, #8
 8007a82:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007a84:	2206      	movs	r2, #6
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	6938      	ldr	r0, [r7, #16]
 8007a8a:	f00a f82c 	bl	8011ae6 <memcpy>
                        pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <eARPProcessPacket+0x14c>)
 8007a90:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	330e      	adds	r3, #14
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	601a      	str	r2, [r3, #0]
                        eReturn = eReturnEthernetFrame;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
                    break;
 8007aa6:	e009      	b.n	8007abc <eARPProcessPacket+0x138>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 f80f 	bl	8007ad4 <vARPRefreshCacheEntry>
                    break;
 8007ab6:	e002      	b.n	8007abe <eARPProcessPacket+0x13a>
            }
        }
 8007ab8:	bf00      	nop
 8007aba:	e000      	b.n	8007abe <eARPProcessPacket+0x13a>
                    break;
 8007abc:	bf00      	nop
    else
    {
        iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
    }

    return eReturn;
 8007abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	24000020 	.word	0x24000020
 8007acc:	08012f48 	.word	0x08012f48
 8007ad0:	24000034 	.word	0x24000034

08007ad4 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aec:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
        /* Only process the IP address if it is on the local network. */
        if( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8007af6:	4b6e      	ldr	r3, [pc, #440]	; (8007cb0 <vARPRefreshCacheEntry+0x1dc>)
 8007af8:	695a      	ldr	r2, [r3, #20]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	405a      	eors	r2, r3
 8007afe:	4b6d      	ldr	r3, [pc, #436]	; (8007cb4 <vARPRefreshCacheEntry+0x1e0>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 80d0 	bne.w	8007caa <vARPRefreshCacheEntry+0x1d6>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e067      	b.n	8007be6 <vARPRefreshCacheEntry+0x112>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d015      	beq.n	8007b48 <vARPRefreshCacheEntry+0x74>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a64      	ldr	r2, [pc, #400]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	2206      	movs	r2, #6
 8007b30:	4618      	mov	r0, r3
 8007b32:	f009 ffca 	bl	8011aca <memcmp>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <vARPRefreshCacheEntry+0x6e>
                {
                    xMatchingMAC = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	60bb      	str	r3, [r7, #8]
 8007b40:	e004      	b.n	8007b4c <vARPRefreshCacheEntry+0x78>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60bb      	str	r3, [r7, #8]
 8007b46:	e001      	b.n	8007b4c <vARPRefreshCacheEntry+0x78>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007b4c:	495a      	ldr	r1, [pc, #360]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	4613      	mov	r3, r2
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d120      	bne.n	8007ba4 <vARPRefreshCacheEntry+0xd0>
            {
                if( pxMACAddress == NULL )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <vARPRefreshCacheEntry+0x9a>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	61bb      	str	r3, [r7, #24]
                    break;
 8007b6c:	e03e      	b.n	8007bec <vARPRefreshCacheEntry+0x118>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d014      	beq.n	8007b9e <vARPRefreshCacheEntry+0xca>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007b74:	4950      	ldr	r1, [pc, #320]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	330a      	adds	r3, #10
 8007b84:	2296      	movs	r2, #150	; 0x96
 8007b86:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007b88:	494b      	ldr	r1, [pc, #300]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	330b      	adds	r3, #11
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
                    return;
 8007b9c:	e085      	b.n	8007caa <vARPRefreshCacheEntry+0x1d6>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	e01d      	b.n	8007be0 <vARPRefreshCacheEntry+0x10c>
            }
            else if( xMatchingMAC != pdFALSE )
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <vARPRefreshCacheEntry+0xdc>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e017      	b.n	8007be0 <vARPRefreshCacheEntry+0x10c>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007bb0:	4941      	ldr	r1, [pc, #260]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	330a      	adds	r3, #10
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	7bfa      	ldrb	r2, [r7, #15]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d90b      	bls.n	8007be0 <vARPRefreshCacheEntry+0x10c>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007bc8:	493b      	ldr	r1, [pc, #236]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	330a      	adds	r3, #10
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	3301      	adds	r3, #1
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	dd94      	ble.n	8007b16 <vARPRefreshCacheEntry+0x42>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	db11      	blt.n	8007c16 <vARPRefreshCacheEntry+0x142>
        {
            xUseEntry = xMacEntry;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db11      	blt.n	8007c20 <vARPRefreshCacheEntry+0x14c>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a2c      	ldr	r2, [pc, #176]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c08:	4413      	add	r3, r2
 8007c0a:	220c      	movs	r2, #12
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f009 ff91 	bl	8011b36 <memset>
 8007c14:	e004      	b.n	8007c20 <vARPRefreshCacheEntry+0x14c>
            }
        }
        else if( xIpEntry >= 0 )
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db01      	blt.n	8007c20 <vARPRefreshCacheEntry+0x14c>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8007c20:	4925      	ldr	r1, [pc, #148]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	4613      	mov	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d021      	beq.n	8007c7c <vARPRefreshCacheEntry+0x1a8>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c44:	4413      	add	r3, r2
 8007c46:	3304      	adds	r3, #4
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	2206      	movs	r2, #6
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f009 ff4a 	bl	8011ae6 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007c52:	4919      	ldr	r1, [pc, #100]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	440b      	add	r3, r1
 8007c60:	330a      	adds	r3, #10
 8007c62:	2296      	movs	r2, #150	; 0x96
 8007c64:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007c66:	4914      	ldr	r1, [pc, #80]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	330b      	adds	r3, #11
 8007c76:	2201      	movs	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e016      	b.n	8007caa <vARPRefreshCacheEntry+0x1d6>
        }
        else if( xIpEntry < 0 )
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da13      	bge.n	8007caa <vARPRefreshCacheEntry+0x1d6>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007c82:	490d      	ldr	r1, [pc, #52]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	330a      	adds	r3, #10
 8007c92:	2205      	movs	r2, #5
 8007c94:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007c96:	4908      	ldr	r1, [pc, #32]	; (8007cb8 <vARPRefreshCacheEntry+0x1e4>)
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	330b      	adds	r3, #11
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	24000020 	.word	0x24000020
 8007cb4:	24007b68 	.word	0x24007b68
 8007cb8:	24007b14 	.word	0x24007b14

08007cbc <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60bb      	str	r3, [r7, #8]

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007ccc:	68b8      	ldr	r0, [r7, #8]
 8007cce:	f000 fe3e 	bl	800894e <xIsIPv4Multicast>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <eARPGetCacheEntry+0x2a>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	68b8      	ldr	r0, [r7, #8]
 8007cdc:	f000 fe5f 	bl	800899e <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	e056      	b.n	8007d94 <eARPGetCacheEntry+0xd8>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d005      	beq.n	8007cfc <eARPGetCacheEntry+0x40>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <eARPGetCacheEntry+0xe4>)
 8007cf6:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d108      	bne.n	8007d0e <eARPGetCacheEntry+0x52>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <eARPGetCacheEntry+0xe8>)
 8007d00:	6811      	ldr	r1, [r2, #0]
 8007d02:	6019      	str	r1, [r3, #0]
 8007d04:	8892      	ldrh	r2, [r2, #4]
 8007d06:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	e042      	b.n	8007d94 <eARPGetCacheEntry+0xd8>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <eARPGetCacheEntry+0xec>)
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <eARPGetCacheEntry+0x60>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8007d16:	2302      	movs	r3, #2
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	e03b      	b.n	8007d94 <eARPGetCacheEntry+0xd8>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == *pulIPAddress )
 8007d1c:	4b22      	ldr	r3, [pc, #136]	; (8007da8 <eARPGetCacheEntry+0xec>)
 8007d1e:	695a      	ldr	r2, [r3, #20]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d108      	bne.n	8007d3a <eARPGetCacheEntry+0x7e>
    {
        /* The address of this device. May be useful for the loopback device. */
        eReturn = eARPCacheHit;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
        memcpy( pxMACAddress->ucBytes, ipLOCAL_MAC_ADDRESS, sizeof( pxMACAddress->ucBytes ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2206      	movs	r2, #6
 8007d30:	491d      	ldr	r1, [pc, #116]	; (8007da8 <eARPGetCacheEntry+0xec>)
 8007d32:	4618      	mov	r0, r3
 8007d34:	f009 fed7 	bl	8011ae6 <memcpy>
 8007d38:	e02c      	b.n	8007d94 <eARPGetCacheEntry+0xd8>
    }
    else
    {
        eReturn = eARPCacheMiss;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <eARPGetCacheEntry+0xec>)
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	405a      	eors	r2, r3
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <eARPGetCacheEntry+0xe4>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <eARPGetCacheEntry+0xae>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <eARPGetCacheEntry+0xe4>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <eARPGetCacheEntry+0xa6>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <eARPGetCacheEntry+0xe4>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]
 8007d60:	e006      	b.n	8007d70 <eARPGetCacheEntry+0xb4>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	e002      	b.n	8007d70 <eARPGetCacheEntry+0xb4>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <eARPGetCacheEntry+0xc0>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007d76:	2302      	movs	r3, #2
 8007d78:	73fb      	strb	r3, [r7, #15]
 8007d7a:	e00b      	b.n	8007d94 <eARPGetCacheEntry+0xd8>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	68b8      	ldr	r0, [r7, #8]
 8007d80:	f000 f814 	bl	8007dac <prvCacheLookup>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <eARPGetCacheEntry+0xd8>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	24007b68 	.word	0x24007b68
 8007da4:	08012f48 	.word	0x08012f48
 8007da8:	24000020 	.word	0x24000020

08007dac <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 8007db6:	2300      	movs	r3, #0
 8007db8:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	e02b      	b.n	8007e18 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007dc0:	4919      	ldr	r1, [pc, #100]	; (8007e28 <prvCacheLookup+0x7c>)
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d11d      	bne.n	8007e12 <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007dd6:	4914      	ldr	r1, [pc, #80]	; (8007e28 <prvCacheLookup+0x7c>)
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	330b      	adds	r3, #11
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8007dec:	2302      	movs	r3, #2
 8007dee:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8007df0:	e015      	b.n	8007e1e <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007df2:	6838      	ldr	r0, [r7, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <prvCacheLookup+0x7c>)
 8007e00:	4413      	add	r3, r2
 8007e02:	3304      	adds	r3, #4
 8007e04:	2206      	movs	r2, #6
 8007e06:	4619      	mov	r1, r3
 8007e08:	f009 fe6d 	bl	8011ae6 <memcpy>
                eReturn = eARPCacheHit;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	72fb      	strb	r3, [r7, #11]
            break;
 8007e10:	e005      	b.n	8007e1e <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	ddd0      	ble.n	8007dc0 <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	24007b14 	.word	0x24007b14

08007e2c <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	e063      	b.n	8007f00 <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8007e38:	4940      	ldr	r1, [pc, #256]	; (8007f3c <vARPAgeCache+0x110>)
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	330a      	adds	r3, #10
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d055      	beq.n	8007efa <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8007e4e:	493b      	ldr	r1, [pc, #236]	; (8007f3c <vARPAgeCache+0x110>)
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	330a      	adds	r3, #10
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b2d8      	uxtb	r0, r3
 8007e64:	4935      	ldr	r1, [pc, #212]	; (8007f3c <vARPAgeCache+0x110>)
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	330a      	adds	r3, #10
 8007e74:	4602      	mov	r2, r0
 8007e76:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007e78:	4930      	ldr	r1, [pc, #192]	; (8007f3c <vARPAgeCache+0x110>)
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	330b      	adds	r3, #11
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10b      	bne.n	8007ea6 <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007e8e:	492b      	ldr	r1, [pc, #172]	; (8007f3c <vARPAgeCache+0x110>)
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f852 	bl	8007f48 <FreeRTOS_OutputARPRequest>
 8007ea4:	e015      	b.n	8007ed2 <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007ea6:	4925      	ldr	r1, [pc, #148]	; (8007f3c <vARPAgeCache+0x110>)
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	330a      	adds	r3, #10
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d80a      	bhi.n	8007ed2 <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007ebc:	491f      	ldr	r1, [pc, #124]	; (8007f3c <vARPAgeCache+0x110>)
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f83b 	bl	8007f48 <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 8007ed2:	491a      	ldr	r1, [pc, #104]	; (8007f3c <vARPAgeCache+0x110>)
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	330a      	adds	r3, #10
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d108      	bne.n	8007efa <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8007ee8:	4914      	ldr	r1, [pc, #80]	; (8007f3c <vARPAgeCache+0x110>)
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3301      	adds	r3, #1
 8007efe:	607b      	str	r3, [r7, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	dd98      	ble.n	8007e38 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 8007f06:	f7fd febf 	bl	8005c88 <xTaskGetTickCount>
 8007f0a:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <vARPAgeCache+0x114>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d007      	beq.n	8007f24 <vARPAgeCache+0xf8>
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <vARPAgeCache+0x114>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d907      	bls.n	8007f34 <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <vARPAgeCache+0x118>)
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 f80d 	bl	8007f48 <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8007f2e:	4a04      	ldr	r2, [pc, #16]	; (8007f40 <vARPAgeCache+0x114>)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6013      	str	r3, [r2, #0]
    }
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	24007b14 	.word	0x24007b14
 8007f40:	24007b5c 	.word	0x24007b5c
 8007f44:	24000020 	.word	0x24000020

08007f48 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007f50:	2100      	movs	r1, #0
 8007f52:	202a      	movs	r0, #42	; 0x2a
 8007f54:	f007 f854 	bl	800f000 <pxGetNetworkBufferWithDescriptor>
 8007f58:	6178      	str	r0, [r7, #20]

    if( pxNetworkBuffer != NULL )
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d020      	beq.n	8007fa2 <FreeRTOS_OutputARPRequest+0x5a>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 8007f66:	6978      	ldr	r0, [r7, #20]
 8007f68:	f000 f820 	bl	8007fac <vARPGenerateRequestPacket>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != pdFALSE )
 8007f6c:	f000 f97c 	bl	8008268 <xIsCallingFromIPTask>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <FreeRTOS_OutputARPRequest+0x38>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8007f76:	2101      	movs	r1, #1
 8007f78:	6978      	ldr	r0, [r7, #20]
 8007f7a:	f007 fe11 	bl	800fba0 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 8007f7e:	e010      	b.n	8007fa2 <FreeRTOS_OutputARPRequest+0x5a>
            xSendEvent.eEventType = eNetworkTxEvent;
 8007f80:	2302      	movs	r3, #2
 8007f82:	733b      	strb	r3, [r7, #12]
            xSendEvent.pvData = pxNetworkBuffer;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	613b      	str	r3, [r7, #16]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fba9 	bl	80086e8 <xSendEventStructToIPTask>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <FreeRTOS_OutputARPRequest+0x5a>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007f9c:	6978      	ldr	r0, [r7, #20]
 8007f9e:	f007 f8ad 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <vARPGenerateRequestPacket+0x24>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	613b      	str	r3, [r7, #16]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vARPGenerateRequestPacket+0x22>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	2b29      	cmp	r3, #41	; 0x29
 8007fd6:	d80a      	bhi.n	8007fee <vARPGenerateRequestPacket+0x42>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	60fb      	str	r3, [r7, #12]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <vARPGenerateRequestPacket+0x40>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fad0 	bl	8009598 <vCastPointerTo_ARPPacket_t>
 8007ff8:	61f8      	str	r0, [r7, #28]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8007ffa:	4b19      	ldr	r3, [pc, #100]	; (8008060 <vARPGenerateRequestPacket+0xb4>)
 8007ffc:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8008002:	2226      	movs	r2, #38	; 0x26
 8008004:	69b9      	ldr	r1, [r7, #24]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f009 fd6d 	bl	8011ae6 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 800800c:	4b15      	ldr	r3, [pc, #84]	; (8008064 <vARPGenerateRequestPacket+0xb8>)
 800800e:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3306      	adds	r3, #6
 8008014:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008016:	2206      	movs	r2, #6
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	f009 fd63 	bl	8011ae6 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8008020:	4b10      	ldr	r3, [pc, #64]	; (8008064 <vARPGenerateRequestPacket+0xb8>)
 8008022:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	3316      	adds	r3, #22
 8008028:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800802a:	2206      	movs	r2, #6
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f009 fd59 	bl	8011ae6 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <vARPGenerateRequestPacket+0xbc>)
 8008036:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	331c      	adds	r3, #28
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	222a      	movs	r2, #42	; 0x2a
 8008056:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8008058:	bf00      	nop
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	08012f20 	.word	0x08012f20
 8008064:	24000020 	.word	0x24000020
 8008068:	24000034 	.word	0x24000034

0800806c <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8008070:	2248      	movs	r2, #72	; 0x48
 8008072:	2100      	movs	r1, #0
 8008074:	4802      	ldr	r0, [pc, #8]	; (8008080 <FreeRTOS_ClearARP+0x14>)
 8008076:	f009 fd5e 	bl	8011b36 <memset>
}
 800807a:	bf00      	nop
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	24007b14 	.word	0x24007b14

08008084 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800808c:	687b      	ldr	r3, [r7, #4]
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 80080a4:	f000 f9de 	bl	8008464 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80080a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080ac:	4869      	ldr	r0, [pc, #420]	; (8008254 <prvIPTask+0x1b8>)
 80080ae:	f000 f98d 	bl	80083cc <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80080b2:	4b69      	ldr	r3, [pc, #420]	; (8008258 <prvIPTask+0x1bc>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 80080b8:	f000 f920 	bl	80082fc <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 80080bc:	f000 f8f6 	bl	80082ac <prvCalculateSleepTime>
 80080c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80080c2:	4b66      	ldr	r3, [pc, #408]	; (800825c <prvIPTask+0x1c0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f107 0110 	add.w	r1, r7, #16
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fc fef5 	bl	8004ebc <xQueueReceive>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <prvIPTask+0x40>
        {
            xReceivedEvent.eEventType = eNoEvent;
 80080d8:	23ff      	movs	r3, #255	; 0xff
 80080da:	743b      	strb	r3, [r7, #16]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 80080dc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80080e0:	3301      	adds	r3, #1
 80080e2:	2b0e      	cmp	r3, #14
 80080e4:	f200 80aa 	bhi.w	800823c <prvIPTask+0x1a0>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <prvIPTask+0x54>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	0800823d 	.word	0x0800823d
 80080f4:	0800812d 	.word	0x0800812d
 80080f8:	08008139 	.word	0x08008139
 80080fc:	0800814b 	.word	0x0800814b
 8008100:	0800815f 	.word	0x0800815f
 8008104:	080081c7 	.word	0x080081c7
 8008108:	0800823d 	.word	0x0800823d
 800810c:	080081eb 	.word	0x080081eb
 8008110:	080081f7 	.word	0x080081f7
 8008114:	08008221 	.word	0x08008221
 8008118:	08008165 	.word	0x08008165
 800811c:	080081b5 	.word	0x080081b5
 8008120:	080081d9 	.word	0x080081d9
 8008124:	0800823d 	.word	0x0800823d
 8008128:	08008227 	.word	0x08008227
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 800812c:	4b4c      	ldr	r3, [pc, #304]	; (8008260 <prvIPTask+0x1c4>)
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 8008132:	f000 fb69 	bl	8008808 <prvProcessNetworkDownEvent>
                break;
 8008136:	e084      	b.n	8008242 <prvIPTask+0x1a6>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff ffa2 	bl	8008084 <vCastPointerTo_NetworkBufferDescriptor_t>
 8008140:	4603      	mov	r3, r0
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f8a6 	bl	8008294 <prvHandleEthernetPacket>
                break;
 8008148:	e07b      	b.n	8008242 <prvIPTask+0x1a6>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff ff99 	bl	8008084 <vCastPointerTo_NetworkBufferDescriptor_t>
 8008152:	61b8      	str	r0, [r7, #24]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 8008154:	2101      	movs	r1, #1
 8008156:	69b8      	ldr	r0, [r7, #24]
 8008158:	f007 fd22 	bl	800fba0 <xNetworkInterfaceOutput>
               }

               break;
 800815c:	e071      	b.n	8008242 <prvIPTask+0x1a6>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 800815e:	f7ff fe65 	bl	8007e2c <vARPAgeCache>
                break;
 8008162:	e06e      	b.n	8008242 <prvIPTask+0x1a6>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fa9a 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800816c:	61f8      	str	r0, [r7, #28]
                xAddress.sin_addr = 0U; /* For the moment. */
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	b21a      	sxth	r2, r3
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	b29b      	uxth	r3, r3
 8008182:	b21b      	sxth	r3, r3
 8008184:	4313      	orrs	r3, r2
 8008186:	b21b      	sxth	r3, r3
 8008188:	b29b      	uxth	r3, r3
 800818a:	817b      	strh	r3, [r7, #10]
                pxSocket->usLocalPort = 0U;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2200      	movs	r2, #0
 8008190:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008192:	f107 0108 	add.w	r1, r7, #8
 8008196:	2300      	movs	r3, #0
 8008198:	2208      	movs	r2, #8
 800819a:	69f8      	ldr	r0, [r7, #28]
 800819c:	f001 fcb4 	bl	8009b08 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f043 0210 	orr.w	r2, r3, #16
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 80081ac:	69f8      	ldr	r0, [r7, #28]
 80081ae:	f002 f8cf 	bl	800a350 <vSocketWakeUpUser>
                break;
 80081b2:	e046      	b.n	8008242 <prvIPTask+0x1a6>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 fa72 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 80081bc:	4603      	mov	r3, r0
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fd5f 	bl	8009c82 <vSocketClose>
                break;
 80081c4:	e03d      	b.n	8008242 <prvIPTask+0x1a6>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ff5b 	bl	8008084 <vCastPointerTo_NetworkBufferDescriptor_t>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f006 fd3d 	bl	800ec50 <vProcessGeneratedUDPPacket>
                break;
 80081d6:	e034      	b.n	8008242 <prvIPTask+0x1a6>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fa76 	bl	80096cc <vCastPointerTo_SocketSelect_t>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f002 fedc 	bl	800afa0 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 80081e8:	e02b      	b.n	8008242 <prvIPTask+0x1a6>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <prvIPTask+0x1b8>)
 80081ec:	7813      	ldrb	r3, [r2, #0]
 80081ee:	f043 0302 	orr.w	r3, r3, #2
 80081f2:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 80081f4:	e025      	b.n	8008242 <prvIPTask+0x1a6>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fa51 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 80081fe:	61f8      	str	r0, [r7, #28]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008200:	69f8      	ldr	r0, [r7, #28]
 8008202:	f005 fd11 	bl	800dc28 <xTCPCheckNewClient>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d019      	beq.n	8008240 <prvIPTask+0x1a4>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f043 0204 	orr.w	r2, r3, #4
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 8008218:	69f8      	ldr	r0, [r7, #28]
 800821a:	f002 f899 	bl	800a350 <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 800821e:	e00f      	b.n	8008240 <prvIPTask+0x1a4>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 8008220:	f002 fe3a 	bl	800ae98 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 8008224:	e00d      	b.n	8008242 <prvIPTask+0x1a6>

            case eSocketSetDeleteEvent:
                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	623b      	str	r3, [r7, #32]

                        iptraceMEM_STATS_DELETE( pxSocketSet );
                        vEventGroupDelete( pxSocketSet->xSelectGroup );
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f7fc f9c5 	bl	80045be <vEventGroupDelete>
                        vPortFree( ( void * ) pxSocketSet );
 8008234:	6a38      	ldr	r0, [r7, #32]
 8008236:	f7ff fa7b 	bl	8007730 <vPortFree>
                    }
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 800823a:	e002      	b.n	8008242 <prvIPTask+0x1a6>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 800823c:	bf00      	nop
 800823e:	e000      	b.n	8008242 <prvIPTask+0x1a6>
                break;
 8008240:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <prvIPTask+0x1c8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f43f af36 	beq.w	80080b8 <prvIPTask+0x1c>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 800824c:	f000 fadc 	bl	8008808 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 8008250:	e732      	b.n	80080b8 <prvIPTask+0x1c>
 8008252:	bf00      	nop
 8008254:	24007bb4 	.word	0x24007bb4
 8008258:	24007bc8 	.word	0x24007bc8
 800825c:	24007b60 	.word	0x24007b60
 8008260:	24007b9c 	.word	0x24007b9c
 8008264:	24007b90 	.word	0x24007b90

08008268 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800826e:	f7fe f90f 	bl	8006490 <xTaskGetCurrentTaskHandle>
 8008272:	4602      	mov	r2, r0
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <xIsCallingFromIPTask+0x28>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d102      	bne.n	8008282 <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	e001      	b.n	8008286 <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8008286:	687b      	ldr	r3, [r7, #4]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	24007b94 	.word	0x24007b94

08008294 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
        {
            /* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
             * buffer will be sent at a time.  This is the default way for +TCP to pass
             * messages from the MAC to the TCP/IP stack. */
            prvProcessEthernetPacket( pxBuffer );
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 faef 	bl	8008880 <prvProcessEthernetPacket>

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 80082b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80082b6:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 80082b8:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <prvCalculateSleepTime+0x48>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvCalculateSleepTime+0x48>)
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d902      	bls.n	80082d6 <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <prvCalculateSleepTime+0x48>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 80082d6:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <prvCalculateSleepTime+0x4c>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d902      	bls.n	80082e6 <prvCalculateSleepTime+0x3a>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <prvCalculateSleepTime+0x4c>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 80082e6:	687b      	ldr	r3, [r7, #4]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	24007ba0 	.word	0x24007ba0
 80082f8:	24007bb4 	.word	0x24007bb4

080082fc <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8008302:	481c      	ldr	r0, [pc, #112]	; (8008374 <prvCheckNetworkTimers+0x78>)
 8008304:	f000 f872 	bl	80083ec <prvIPTimerCheck>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800830e:	2003      	movs	r0, #3
 8008310:	f000 f9d4 	bl	80086bc <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8008314:	4b18      	ldr	r3, [pc, #96]	; (8008378 <prvCheckNetworkTimers+0x7c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fc ffbb 	bl	8005294 <uxQueueMessagesWaiting>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <prvCheckNetworkTimers+0x2e>
            {
                xWillSleep = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e001      	b.n	800832e <prvCheckNetworkTimers+0x32>
            }
            else
            {
                xWillSleep = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800832e:	4813      	ldr	r0, [pc, #76]	; (800837c <prvCheckNetworkTimers+0x80>)
 8008330:	f000 f85c 	bl	80083ec <prvIPTimerCheck>
 8008334:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <prvCheckNetworkTimers+0x84>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <prvCheckNetworkTimers+0x4c>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <prvCheckNetworkTimers+0x4c>
            {
                xCheckTCPSockets = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <prvCheckNetworkTimers+0x68>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f002 fbac 	bl	800aaac <xTCPTimerCheck>
 8008354:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4808      	ldr	r0, [pc, #32]	; (800837c <prvCheckNetworkTimers+0x80>)
 800835a:	f000 f813 	bl	8008384 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <prvCheckNetworkTimers+0x84>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
            }
        }

        /* See if any socket was planned to be closed. */
        vSocketCloseNextTime( NULL );
 8008364:	2000      	movs	r0, #0
 8008366:	f003 f973 	bl	800b650 <vSocketCloseNextTime>
    #endif /* ipconfigUSE_TCP == 1 */
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	24007ba0 	.word	0x24007ba0
 8008378:	24007b60 	.word	0x24007b60
 800837c:	24007bb4 	.word	0x24007bb4
 8008380:	24007b98 	.word	0x24007b98

08008384 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3304      	adds	r3, #4
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fef8 	bl	8006188 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7813      	ldrb	r3, [r2, #0]
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	7013      	strb	r3, [r2, #0]
 80083ae:	e004      	b.n	80083ba <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7813      	ldrb	r3, [r2, #0]
 80083b4:	f36f 0341 	bfc	r3, #1, #1
 80083b8:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	7813      	ldrb	r3, [r2, #0]
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	7013      	strb	r3, [r2, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff ffd0 	bl	8008384 <prvIPTimerStart>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e028      	b.n	800845a <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10f      	bne.n	8008436 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	1d1a      	adds	r2, r3, #4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	330c      	adds	r3, #12
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fd feed 	bl	8006200 <xTaskCheckForTimeOut>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7813      	ldrb	r3, [r2, #0]
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d008      	beq.n	8008456 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff ff9a 	bl	8008384 <prvIPTimerStart>
            xReturn = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e001      	b.n	800845a <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800845a:	68fb      	ldr	r3, [r7, #12]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800846a:	2300      	movs	r3, #0
 800846c:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4808      	ldr	r0, [pc, #32]	; (8008494 <FreeRTOS_NetworkDown+0x30>)
 8008472:	f000 f939 	bl	80086e8 <xSendEventStructToIPTask>
 8008476:	4603      	mov	r3, r0
 8008478:	2b01      	cmp	r3, #1
 800847a:	d003      	beq.n	8008484 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <FreeRTOS_NetworkDown+0x34>)
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008482:	e002      	b.n	800848a <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <FreeRTOS_NetworkDown+0x34>)
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	08012f50 	.word	0x08012f50
 8008498:	24007b90 	.word	0x24007b90

0800849c <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800849c:	b5b0      	push	{r4, r5, r7, lr}
 800849e:	b08e      	sub	sp, #56	; 0x38
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 80084ae:	f001 f801 	bl	80094b4 <xIPIsNetworkTaskReady>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <FreeRTOS_IPInit+0x32>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	623b      	str	r3, [r7, #32]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <FreeRTOS_IPInit+0x30>
    configASSERT( xNetworkEventQueue == NULL );
 80084ce:	4b6f      	ldr	r3, [pc, #444]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <FreeRTOS_IPInit+0x50>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	61fb      	str	r3, [r7, #28]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <FreeRTOS_IPInit+0x4e>
    configASSERT( xIPTaskHandle == NULL );
 80084ec:	4b68      	ldr	r3, [pc, #416]	; (8008690 <FreeRTOS_IPInit+0x1f4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <FreeRTOS_IPInit+0x6e>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <FreeRTOS_IPInit+0x6c>
    /* Attempt to create the queue used to communicate with the IP task. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            static StaticQueue_t xNetworkEventStaticQueue;
            static uint8_t ucNetworkEventQueueStorageArea[ ipconfigEVENT_QUEUE_LENGTH * sizeof( IPStackEvent_t ) ];
            xNetworkEventQueue = xQueueCreateStatic( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ), ucNetworkEventQueueStorageArea, &xNetworkEventStaticQueue );
 800850a:	2300      	movs	r3, #0
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4b61      	ldr	r3, [pc, #388]	; (8008694 <FreeRTOS_IPInit+0x1f8>)
 8008510:	4a61      	ldr	r2, [pc, #388]	; (8008698 <FreeRTOS_IPInit+0x1fc>)
 8008512:	2108      	movs	r1, #8
 8008514:	2045      	movs	r0, #69	; 0x45
 8008516:	f7fc f9c5 	bl	80048a4 <xQueueGenericCreateStatic>
 800851a:	4603      	mov	r3, r0
 800851c:	4a5b      	ldr	r2, [pc, #364]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 800851e:	6013      	str	r3, [r2, #0]
            xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
            configASSERT( xNetworkEventQueue != NULL );
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008520:	4b5a      	ldr	r3, [pc, #360]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80ab 	beq.w	8008680 <FreeRTOS_IPInit+0x1e4>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800852a:	4b58      	ldr	r3, [pc, #352]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	495b      	ldr	r1, [pc, #364]	; (800869c <FreeRTOS_IPInit+0x200>)
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd f819 	bl	8005568 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008536:	f006 fcd1 	bl	800eedc <xNetworkBuffersInitialise>
 800853a:	4603      	mov	r3, r0
 800853c:	2b01      	cmp	r3, #1
 800853e:	f040 8097 	bne.w	8008670 <FreeRTOS_IPInit+0x1d4>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3303      	adds	r3, #3
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	061a      	lsls	r2, r3, #24
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3302      	adds	r3, #2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	041b      	lsls	r3, r3, #16
 8008552:	431a      	orrs	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3301      	adds	r3, #1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	4313      	orrs	r3, r2
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	4313      	orrs	r3, r2
 8008564:	4a4e      	ldr	r2, [pc, #312]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 8008566:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	3303      	adds	r3, #3
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	061a      	lsls	r2, r3, #24
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3302      	adds	r3, #2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	431a      	orrs	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3301      	adds	r3, #1
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	4313      	orrs	r3, r2
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	4313      	orrs	r3, r2
 800858a:	4a45      	ldr	r2, [pc, #276]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 800858c:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3303      	adds	r3, #3
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	061a      	lsls	r2, r3, #24
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3302      	adds	r3, #2
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	041b      	lsls	r3, r3, #16
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3301      	adds	r3, #1
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	4313      	orrs	r3, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	7812      	ldrb	r2, [r2, #0]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	4a3b      	ldr	r2, [pc, #236]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085b2:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	3303      	adds	r3, #3
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	061a      	lsls	r2, r3, #24
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	3302      	adds	r3, #2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	431a      	orrs	r2, r3
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	4313      	orrs	r3, r2
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	4a32      	ldr	r2, [pc, #200]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085d8:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 80085da:	4b31      	ldr	r3, [pc, #196]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b30      	ldr	r3, [pc, #192]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	43db      	mvns	r3, r3
 80085e4:	4313      	orrs	r3, r2
 80085e6:	4a2e      	ldr	r2, [pc, #184]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085e8:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 80085ea:	4a2e      	ldr	r2, [pc, #184]	; (80086a4 <FreeRTOS_IPInit+0x208>)
 80085ec:	4b2c      	ldr	r3, [pc, #176]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085ee:	4614      	mov	r4, r2
 80085f0:	461d      	mov	r5, r3
 80085f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	6023      	str	r3, [r4, #0]
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
                }
            #else
                {
                    /* The IP address is set from the value passed in. */
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 80085fa:	4b29      	ldr	r3, [pc, #164]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a2a      	ldr	r2, [pc, #168]	; (80086a8 <FreeRTOS_IPInit+0x20c>)
 8008600:	6153      	str	r3, [r2, #20]

                    /* Added to prevent ARP flood to gateway.  Ensure the
                    * gateway is on the same subnet as the IP address. */
                    if( xNetworkAddressing.ulGatewayAddress != 0UL )
 8008602:	4b27      	ldr	r3, [pc, #156]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <FreeRTOS_IPInit+0x198>
                    {
                        configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800860a:	4b27      	ldr	r3, [pc, #156]	; (80086a8 <FreeRTOS_IPInit+0x20c>)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	405a      	eors	r2, r3
 8008614:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <FreeRTOS_IPInit+0x204>)
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <FreeRTOS_IPInit+0x198>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <FreeRTOS_IPInit+0x196>
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008634:	2206      	movs	r2, #6
 8008636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008638:	481b      	ldr	r0, [pc, #108]	; (80086a8 <FreeRTOS_IPInit+0x20c>)
 800863a:	f009 fa54 	bl	8011ae6 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 800863e:	f001 f8c3 	bl	80097c8 <vNetworkSocketsInit>
            /* Create the task that processes Ethernet and stack events. */
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    static StaticTask_t xIPTaskBuffer;
                    static StackType_t xIPTaskStack[ ipconfigIP_TASK_STACK_SIZE_WORDS ];
                    xIPTaskHandle = xTaskCreateStatic( prvIPTask,
 8008642:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <FreeRTOS_IPInit+0x210>)
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <FreeRTOS_IPInit+0x214>)
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2336      	movs	r3, #54	; 0x36
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008654:	4917      	ldr	r1, [pc, #92]	; (80086b4 <FreeRTOS_IPInit+0x218>)
 8008656:	4818      	ldr	r0, [pc, #96]	; (80086b8 <FreeRTOS_IPInit+0x21c>)
 8008658:	f7fd f80e 	bl	8005678 <xTaskCreateStatic>
 800865c:	4603      	mov	r3, r0
 800865e:	4a0c      	ldr	r2, [pc, #48]	; (8008690 <FreeRTOS_IPInit+0x1f4>)
 8008660:	6013      	str	r3, [r2, #0]
                                                       NULL,
                                                       ipconfigIP_TASK_PRIORITY,
                                                       xIPTaskStack,
                                                       &xIPTaskBuffer );

                    if( xIPTaskHandle != NULL )
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <FreeRTOS_IPInit+0x1f4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <FreeRTOS_IPInit+0x1e4>
                    {
                        xReturn = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
 800866e:	e007      	b.n	8008680 <FreeRTOS_IPInit+0x1e4>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f7fc fe2b 	bl	80052d0 <vQueueDelete>
            xNetworkEventQueue = NULL;
 800867a:	4b04      	ldr	r3, [pc, #16]	; (800868c <FreeRTOS_IPInit+0x1f0>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
    }

    return xReturn;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008682:	4618      	mov	r0, r3
 8008684:	3728      	adds	r7, #40	; 0x28
 8008686:	46bd      	mov	sp, r7
 8008688:	bdb0      	pop	{r4, r5, r7, pc}
 800868a:	bf00      	nop
 800868c:	24007b60 	.word	0x24007b60
 8008690:	24007b94 	.word	0x24007b94
 8008694:	24007df4 	.word	0x24007df4
 8008698:	24007bcc 	.word	0x24007bcc
 800869c:	08012df8 	.word	0x08012df8
 80086a0:	24007b68 	.word	0x24007b68
 80086a4:	24007b7c 	.word	0x24007b7c
 80086a8:	24000020 	.word	0x24000020
 80086ac:	24008844 	.word	0x24008844
 80086b0:	24007e44 	.word	0x24007e44
 80086b4:	08012e00 	.word	0x08012e00
 80086b8:	0800809d 	.word	0x0800809d

080086bc <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	6979      	ldr	r1, [r7, #20]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f805 	bl	80086e8 <xSendEventStructToIPTask>
 80086de:	4603      	mov	r3, r0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80086f6:	f000 fedd 	bl	80094b4 <xIPIsNetworkTaskReady>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d107      	bne.n	8008710 <xSendEventStructToIPTask+0x28>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f993 3000 	ldrsb.w	r3, [r3]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e02d      	b.n	800876c <xSendEventStructToIPTask+0x84>
    }
    else
    {
        xSendMessage = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f993 3000 	ldrsb.w	r3, [r3]
 800871a:	2b06      	cmp	r3, #6
 800871c:	d10e      	bne.n	800873c <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800871e:	4a16      	ldr	r2, [pc, #88]	; (8008778 <xSendEventStructToIPTask+0x90>)
 8008720:	7813      	ldrb	r3, [r2, #0]
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8008728:	4b14      	ldr	r3, [pc, #80]	; (800877c <xSendEventStructToIPTask+0x94>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f7fc fdb1 	bl	8005294 <uxQueueMessagesWaiting>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d012      	beq.n	8008768 <xSendEventStructToIPTask+0x80>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8008742:	f7ff fd91 	bl	8008268 <xIsCallingFromIPTask>
 8008746:	4603      	mov	r3, r0
 8008748:	2b01      	cmp	r3, #1
 800874a:	d104      	bne.n	8008756 <xSendEventStructToIPTask+0x6e>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <xSendEventStructToIPTask+0x94>)
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	f7fc fa12 	bl	8004b88 <xQueueGenericSend>
 8008764:	6178      	str	r0, [r7, #20]
 8008766:	e001      	b.n	800876c <xSendEventStructToIPTask+0x84>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8008768:	2301      	movs	r3, #1
 800876a:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800876c:	697b      	ldr	r3, [r7, #20]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	24007bb4 	.word	0x24007bb4
 800877c:	24007b60 	.word	0x24007b60

08008780 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer: The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn;
    const EthernetHeader_t * pxEthernetHeader;

    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pucEthernetBuffer );
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 feef 	bl	800956c <vCastConstPointerTo_EthernetHeader_t>
 800878e:	6138      	str	r0, [r7, #16]

    if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2206      	movs	r2, #6
 8008794:	4619      	mov	r1, r3
 8008796:	481a      	ldr	r0, [pc, #104]	; (8008800 <eConsiderFrameForProcessing+0x80>)
 8008798:	f009 f997 	bl	8011aca <memcmp>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <eConsiderFrameForProcessing+0x28>
    {
        /* The packet was directed to this node - process it. */
        eReturn = eProcessBuffer;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]
 80087a6:	e00d      	b.n	80087c4 <eConsiderFrameForProcessing+0x44>
    }
    else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2206      	movs	r2, #6
 80087ac:	4619      	mov	r1, r3
 80087ae:	4815      	ldr	r0, [pc, #84]	; (8008804 <eConsiderFrameForProcessing+0x84>)
 80087b0:	f009 f98b 	bl	8011aca <memcmp>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <eConsiderFrameForProcessing+0x40>
    {
        /* The packet was a broadcast - process it. */
        eReturn = eProcessBuffer;
 80087ba:	2301      	movs	r3, #1
 80087bc:	75fb      	strb	r3, [r7, #23]
 80087be:	e001      	b.n	80087c4 <eConsiderFrameForProcessing+0x44>
        else
    #endif /* ipconfigUSE_LLMNR */
    {
        /* The packet was not a broadcast, or for this node, just release
         * the buffer without taking any other action. */
        eReturn = eReleaseBuffer;
 80087c0:	2300      	movs	r3, #0
 80087c2:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
        {
            uint16_t usFrameType;

            if( eReturn == eProcessBuffer )
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d115      	bne.n	80087f6 <eConsiderFrameForProcessing+0x76>
            {
                usFrameType = pxEthernetHeader->usFrameType;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	7b1a      	ldrb	r2, [r3, #12]
 80087ce:	7b5b      	ldrb	r3, [r3, #13]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	4313      	orrs	r3, r2
 80087d4:	81fb      	strh	r3, [r7, #14]
                usFrameType = FreeRTOS_ntohs( usFrameType );
 80087d6:	89fb      	ldrh	r3, [r7, #14]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	b21a      	sxth	r2, r3
 80087dc:	89fb      	ldrh	r3, [r7, #14]
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	4313      	orrs	r3, r2
 80087e6:	b21b      	sxth	r3, r3
 80087e8:	81fb      	strh	r3, [r7, #14]

                if( usFrameType <= 0x600U )
 80087ea:	89fb      	ldrh	r3, [r7, #14]
 80087ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087f0:	d801      	bhi.n	80087f6 <eConsiderFrameForProcessing+0x76>
                {
                    /* Not an Ethernet II frame. */
                    eReturn = eReleaseBuffer;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	24000020 	.word	0x24000020
 8008804:	08012f48 	.word	0x08012f48

08008808 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 800880c:	4a10      	ldr	r2, [pc, #64]	; (8008850 <prvProcessNetworkDownEvent+0x48>)
 800880e:	7813      	ldrb	r3, [r2, #0]
 8008810:	f36f 0300 	bfc	r3, #0, #1
 8008814:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <prvProcessNetworkDownEvent+0x4c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d102      	bne.n	8008824 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 800881e:	2001      	movs	r0, #1
 8008820:	f7f7 ff20 	bl	8000664 <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <prvProcessNetworkDownEvent+0x4c>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 800882a:	f7ff fc1f 	bl	800806c <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 800882e:	f007 f8d7 	bl	800f9e0 <xNetworkInterfaceInitialise>
 8008832:	4603      	mov	r3, r0
 8008834:	2b01      	cmp	r3, #1
 8008836:	d006      	beq.n	8008846 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8008838:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800883c:	f7fd f8d4 	bl	80059e8 <vTaskDelay>
        FreeRTOS_NetworkDown();
 8008840:	f7ff fe10 	bl	8008464 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 8008844:	e001      	b.n	800884a <prvProcessNetworkDownEvent+0x42>
                vIPNetworkUpCalls();
 8008846:	f000 f807 	bl	8008858 <vIPNetworkUpCalls>
}
 800884a:	bf00      	nop
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	24007ba0 	.word	0x24007ba0
 8008854:	24008900 	.word	0x24008900

08008858 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <vIPNetworkUpCalls+0x20>)
 800885e:	2201      	movs	r2, #1
 8008860:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008862:	2000      	movs	r0, #0
 8008864:	f7f7 fefe 	bl	8000664 <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008868:	f242 7110 	movw	r1, #10000	; 0x2710
 800886c:	4803      	ldr	r0, [pc, #12]	; (800887c <vIPNetworkUpCalls+0x24>)
 800886e:	f7ff fdad 	bl	80083cc <prvIPTimerReload>
}
 8008872:	bf00      	nop
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	24007b9c 	.word	0x24007b9c
 800887c:	24007ba0 	.word	0x24007ba0

08008880 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]

    configASSERT( pxNetworkBuffer != NULL );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <prvProcessEthernetPacket+0x28>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60fb      	str	r3, [r7, #12]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <prvProcessEthernetPacket+0x26>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	2b0d      	cmp	r3, #13
 80088ae:	d939      	bls.n	8008924 <prvProcessEthernetPacket+0xa4>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fe57 	bl	800956c <vCastConstPointerTo_EthernetHeader_t>
 80088be:	6138      	str	r0, [r7, #16]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	899b      	ldrh	r3, [r3, #12]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d015      	beq.n	80088f6 <prvProcessEthernetPacket+0x76>
 80088ca:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80088ce:	d126      	bne.n	800891e <prvProcessEthernetPacket+0x9e>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b29      	cmp	r3, #41	; 0x29
 80088d6:	d90b      	bls.n	80088f0 <prvProcessEthernetPacket+0x70>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fe5b 	bl	8009598 <vCastPointerTo_ARPPacket_t>
 80088e2:	4603      	mov	r3, r0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff f84d 	bl	8007984 <eARPProcessPacket>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80088ee:	e01a      	b.n	8008926 <prvProcessEthernetPacket+0xa6>
                        eReturned = eReleaseBuffer;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]
                    break;
 80088f4:	e017      	b.n	8008926 <prvProcessEthernetPacket+0xa6>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	2b21      	cmp	r3, #33	; 0x21
 80088fc:	d90c      	bls.n	8008918 <prvProcessEthernetPacket+0x98>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fe53 	bl	80095ae <vCastPointerTo_IPPacket_t>
 8008908:	4603      	mov	r3, r0
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8f7 	bl	8008b00 <prvProcessIPPacket>
 8008912:	4603      	mov	r3, r0
 8008914:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8008916:	e006      	b.n	8008926 <prvProcessEthernetPacket+0xa6>
                        eReturned = eReleaseBuffer;
 8008918:	2300      	movs	r3, #0
 800891a:	75fb      	strb	r3, [r7, #23]
                    break;
 800891c:	e003      	b.n	8008926 <prvProcessEthernetPacket+0xa6>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]
                    #endif
                    break;
 8008922:	e000      	b.n	8008926 <prvProcessEthernetPacket+0xa6>
            }
        }
 8008924:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d002      	beq.n	8008932 <prvProcessEthernetPacket+0xb2>
 800892c:	2b03      	cmp	r3, #3
 800892e:	d009      	beq.n	8008944 <prvProcessEthernetPacket+0xc4>
 8008930:	e004      	b.n	800893c <prvProcessEthernetPacket+0xbc>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fd55 	bl	80093e4 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 800893a:	e004      	b.n	8008946 <prvProcessEthernetPacket+0xc6>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f006 fbdd 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
            break;
 8008942:	e000      	b.n	8008946 <prvProcessEthernetPacket+0xc6>
            break;
 8008944:	bf00      	nop
    }
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	061a      	lsls	r2, r3, #24
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800896c:	431a      	orrs	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	0e1b      	lsrs	r3, r3, #24
 8008972:	4313      	orrs	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800897c:	d306      	bcc.n	800898c <xIsIPv4Multicast+0x3e>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8008984:	d202      	bcs.n	800898c <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e001      	b.n	8008990 <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8008990:	68fb      	ldr	r3, [r7, #12]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	061a      	lsls	r2, r3, #24
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2201      	movs	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	225e      	movs	r2, #94	; 0x5e
 80089d8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	0a1b      	lsrs	r3, r3, #8
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	715a      	strb	r2, [r3, #5]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8008a14:	2301      	movs	r3, #1
 8008a16:	77fb      	strb	r3, [r7, #31]

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	330e      	adds	r3, #14
 8008a1c:	61bb      	str	r3, [r7, #24]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	617b      	str	r3, [r7, #20]

            /* Ensure that the incoming packet is not fragmented because the stack
             * doesn't not support IP fragmentation. All but the last fragment coming in will have their
             * "more fragments" flag set and the last fragment will have a non-zero offset.
             * We need to drop the packet in either of those cases. */
            if( ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U ) || ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_FLAGS_MORE_FRAGMENTS ) != 0U ) )
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	88db      	ldrh	r3, [r3, #6]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <prvAllowIPPacket+0x3c>
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	88db      	ldrh	r3, [r3, #6]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <prvAllowIPPacket+0x42>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 8008a44:	2300      	movs	r3, #0
 8008a46:	77fb      	strb	r3, [r7, #31]
 8008a48:	e01e      	b.n	8008a88 <prvAllowIPPacket+0x80>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b44      	cmp	r3, #68	; 0x44
 8008a50:	d903      	bls.n	8008a5a <prvAllowIPPacket+0x52>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8008a56:	2b4f      	cmp	r3, #79	; 0x4f
 8008a58:	d902      	bls.n	8008a60 <prvAllowIPPacket+0x58>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	77fb      	strb	r3, [r7, #31]
 8008a5e:	e013      	b.n	8008a88 <prvAllowIPPacket+0x80>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 8008a60:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <prvAllowIPPacket+0xec>)
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d00e      	beq.n	8008a88 <prvAllowIPPacket+0x80>
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d00a      	beq.n	8008a88 <prvAllowIPPacket+0x80>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <prvAllowIPPacket+0xf0>)
 8008a74:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d005      	beq.n	8008a88 <prvAllowIPPacket+0x80>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <prvAllowIPPacket+0xec>)
 8008a7e:	695b      	ldr	r3, [r3, #20]
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <prvAllowIPPacket+0x80>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 8008a84:	2300      	movs	r3, #0
 8008a86:	77fb      	strb	r3, [r7, #31]
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8008a88:	7ffb      	ldrb	r3, [r7, #31]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d10c      	bne.n	8008aa8 <prvAllowIPPacket+0xa0>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f000 f9c6 	bl	8008e2a <xCheckSizeFields>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d001      	beq.n	8008aa8 <prvAllowIPPacket+0xa0>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	77fb      	strb	r3, [r7, #31]
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 8008aa8:	7ffb      	ldrb	r3, [r7, #31]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d11c      	bne.n	8008ae8 <prvAllowIPPacket+0xe0>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	7ddb      	ldrb	r3, [r3, #23]
 8008ab2:	2b11      	cmp	r3, #17
 8008ab4:	d118      	bne.n	8008ae8 <prvAllowIPPacket+0xe0>
                        {
                            ProtocolPacket_t * pxProtPack;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3b14      	subs	r3, #20
 8008abe:	4413      	add	r3, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fdc1 	bl	8009648 <vCastPointerTo_ProtocolPacket_t>
 8008ac6:	6138      	str	r0, [r7, #16]

                            if( pxProtPack->xUDPPacket.xUDPHeader.usChecksum == ( uint16_t ) 0U )
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <prvAllowIPPacket+0xe0>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <prvAllowIPPacket+0xf4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	dc04      	bgt.n	8008ae4 <prvAllowIPPacket+0xdc>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 8008ada:	4b08      	ldr	r3, [pc, #32]	; (8008afc <prvAllowIPPacket+0xf4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	4a06      	ldr	r2, [pc, #24]	; (8008afc <prvAllowIPPacket+0xf4>)
 8008ae2:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	77fb      	strb	r3, [r7, #31]
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8008ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	24000020 	.word	0x24000020
 8008af8:	24007b68 	.word	0x24007b68
 8008afc:	24008904 	.word	0x24008904

08008b00 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b090      	sub	sp, #64	; 0x40
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	330e      	adds	r3, #14
 8008b0e:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	3b0e      	subs	r3, #14
 8008b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d802      	bhi.n	8008b32 <prvProcessIPPacket+0x32>
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	2b13      	cmp	r3, #19
 8008b30:	d803      	bhi.n	8008b3a <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 8008b32:	2300      	movs	r3, #0
 8008b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b38:	e0eb      	b.n	8008d12 <prvProcessIPPacket+0x212>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7ddb      	ldrb	r3, [r3, #23]
 8008b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8008b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff ff5e 	bl	8008a08 <prvAllowIPPacket>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 8008b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	f040 80d6 	bne.w	8008d08 <prvProcessIPPacket+0x208>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2b14      	cmp	r3, #20
 8008b60:	d952      	bls.n	8008c08 <prvProcessIPPacket+0x108>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3b14      	subs	r3, #20
 8008b66:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	330e      	adds	r3, #14
 8008b70:	4413      	add	r3, r2
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	3322      	adds	r3, #34	; 0x22
 8008b7a:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	3b22      	subs	r3, #34	; 0x22
 8008b86:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b8c:	6a38      	ldr	r0, [r7, #32]
 8008b8e:	f008 ffb8 	bl	8011b02 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	1ad2      	subs	r2, r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	61da      	str	r2, [r3, #28]
                        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	b21a      	sxth	r2, r3
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	885b      	ldrh	r3, [r3, #2]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	b21b      	sxth	r3, r3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	b21b      	sxth	r3, r3
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	b219      	sxth	r1, r3
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	885b      	ldrh	r3, [r3, #2]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	b21b      	sxth	r3, r3
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4619      	mov	r1, r3
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	1acb      	subs	r3, r1, r3
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	805a      	strh	r2, [r3, #2]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f023 030f 	bic.w	r3, r3, #15
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f043 0305 	orr.w	r3, r3, #5
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 8008c08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d07b      	beq.n	8008d08 <prvProcessIPPacket+0x208>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8008c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c14:	2b11      	cmp	r3, #17
 8008c16:	d007      	beq.n	8008c28 <prvProcessIPPacket+0x128>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	1d9a      	adds	r2, r3, #6
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fe ff56 	bl	8007ad4 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 8008c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c2c:	2b11      	cmp	r3, #17
 8008c2e:	d013      	beq.n	8008c58 <prvProcessIPPacket+0x158>
 8008c30:	2b11      	cmp	r3, #17
 8008c32:	dc6b      	bgt.n	8008d0c <prvProcessIPPacket+0x20c>
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d002      	beq.n	8008c3e <prvProcessIPPacket+0x13e>
 8008c38:	2b06      	cmp	r3, #6
 8008c3a:	d056      	beq.n	8008cea <prvProcessIPPacket+0x1ea>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 8008c3c:	e066      	b.n	8008d0c <prvProcessIPPacket+0x20c>
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <prvProcessIPPacket+0x220>)
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d162      	bne.n	8008d10 <prvProcessIPPacket+0x210>
                                    eReturn = prvProcessICMPPacket( pxNetworkBuffer );
 8008c4a:	6838      	ldr	r0, [r7, #0]
 8008c4c:	f000 f8b6 	bl	8008dbc <prvProcessICMPPacket>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8008c56:	e05b      	b.n	8008d10 <prvProcessIPPacket+0x210>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fcd2 	bl	8009606 <vCastConstPointerTo_UDPPacket_t>
 8008c62:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	021b      	lsls	r3, r3, #8
 8008c6c:	b21a      	sxth	r2, r3
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	b21b      	sxth	r3, r3
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	b21b      	sxth	r3, r3
 8008c7e:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	2b29      	cmp	r3, #41	; 0x29
 8008c86:	d92a      	bls.n	8008cde <prvProcessIPPacket+0x1de>
 8008c88:	8afb      	ldrh	r3, [r7, #22]
 8008c8a:	2b07      	cmp	r3, #7
 8008c8c:	d927      	bls.n	8008cde <prvProcessIPPacket+0x1de>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	3b2a      	subs	r3, #42	; 0x2a
 8008c94:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8008c96:	8afb      	ldrh	r3, [r7, #22]
 8008c98:	3b08      	subs	r3, #8
 8008c9a:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d904      	bls.n	8008cae <prvProcessIPPacket+0x1ae>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	f006 f898 	bl	800ee00 <xProcessReceivedUDPPacket>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d107      	bne.n	8008ce6 <prvProcessIPPacket+0x1e6>
                                   eReturn = eFrameConsumed;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 8008cdc:	e003      	b.n	8008ce6 <prvProcessIPPacket+0x1e6>
                               eReturn = eReleaseBuffer;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 8008ce4:	e015      	b.n	8008d12 <prvProcessIPPacket+0x212>
                           {
 8008ce6:	bf00      	nop
                       break;
 8008ce8:	e013      	b.n	8008d12 <prvProcessIPPacket+0x212>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8008cea:	6838      	ldr	r0, [r7, #0]
 8008cec:	f004 fca6 	bl	800d63c <xProcessReceivedTCPPacket>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d102      	bne.n	8008cfc <prvProcessIPPacket+0x1fc>
                                    eReturn = eFrameConsumed;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <prvProcessIPPacket+0x224>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3301      	adds	r3, #1
 8008d02:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <prvProcessIPPacket+0x224>)
 8008d04:	6013      	str	r3, [r2, #0]
                                break;
 8008d06:	e004      	b.n	8008d12 <prvProcessIPPacket+0x212>
                }
            }
 8008d08:	bf00      	nop
 8008d0a:	e002      	b.n	8008d12 <prvProcessIPPacket+0x212>
                        break;
 8008d0c:	bf00      	nop
 8008d0e:	e000      	b.n	8008d12 <prvProcessIPPacket+0x212>
                        break;
 8008d10:	bf00      	nop
        }
    }

    return eReturn;
 8008d12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3740      	adds	r7, #64	; 0x40
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	24000020 	.word	0x24000020
 8008d24:	24007b98 	.word	0x24007b98

08008d28 <prvProcessICMPEchoRequest>:
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3322      	adds	r3, #34	; 0x22
 8008d36:	60fb      	str	r3, [r7, #12]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	330e      	adds	r3, #14
 8008d3c:	60bb      	str	r3, [r7, #8]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008d4c:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <prvProcessICMPEchoRequest+0x90>)
 8008d4e:	695a      	ldr	r2, [r3, #20]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	60da      	str	r2, [r3, #12]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	719a      	strb	r2, [r3, #6]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	71da      	strb	r2, [r3, #7]
        #endif

        #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
            {
                /* calculate the IP header checksum, in case the driver won't do that. */
                pxIPHeader->usHeaderChecksum = 0x00U;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	729a      	strb	r2, [r3, #10]
 8008d64:	2200      	movs	r2, #0
 8008d66:	72da      	strb	r2, [r3, #11]
                pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2214      	movs	r2, #20
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f000 fa52 	bl	8009218 <usGenerateChecksum>
 8008d74:	4603      	mov	r3, r0
 8008d76:	461a      	mov	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	815a      	strh	r2, [r3, #10]
                pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	895b      	ldrh	r3, [r3, #10]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	b21a      	sxth	r2, r3
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	895b      	ldrh	r3, [r3, #10]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	0a1b      	lsrs	r3, r3, #8
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	b21b      	sxth	r3, r3
 8008d92:	4313      	orrs	r3, r2
 8008d94:	b21b      	sxth	r3, r3
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	815a      	strh	r2, [r3, #10]

                /* calculate the ICMP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxICMPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	2201      	movs	r2, #1
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f8cd 	bl	8008f48 <usGenerateProtocolChecksum>
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader->usChecksum = 0U;
            }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008dae:	2302      	movs	r3, #2
    }
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	24000020 	.word	0x24000020

08008dbc <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75fb      	strb	r3, [r7, #23]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	2b29      	cmp	r3, #41	; 0x29
 8008dce:	d80a      	bhi.n	8008de6 <prvProcessICMPPacket+0x2a>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60fb      	str	r3, [r7, #12]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <prvProcessICMPPacket+0x28>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	2b29      	cmp	r3, #41	; 0x29
 8008dec:	d913      	bls.n	8008e16 <prvProcessICMPPacket+0x5a>
        {
            /* Map the buffer onto a ICMP-Packet struct to easily access the
             * fields of ICMP packet. */
            ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fbf1 	bl	80095da <vCastPointerTo_ICMPPacket_t>
 8008df8:	6138      	str	r0, [r7, #16]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <prvProcessICMPPacket+0x5e>
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d10a      	bne.n	8008e1e <prvProcessICMPPacket+0x62>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                        {
                            eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	6938      	ldr	r0, [r7, #16]
 8008e0c:	f7ff ff8c 	bl	8008d28 <prvProcessICMPEchoRequest>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75fb      	strb	r3, [r7, #23]
                        }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008e14:	e004      	b.n	8008e20 <prvProcessICMPPacket+0x64>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
            }
        }
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <prvProcessICMPPacket+0x64>
                    break;
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <prvProcessICMPPacket+0x64>
                    break;
 8008e1e:	bf00      	nop

        return eReturn;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
    }
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b08c      	sub	sp, #48	; 0x30
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8008e34:	2300      	movs	r3, #0
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8008e38:	2300      	movs	r3, #0
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b21      	cmp	r3, #33	; 0x21
 8008e40:	d802      	bhi.n	8008e48 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8008e42:	2301      	movs	r3, #1
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008e46:	e07a      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fbbb 	bl	80095c4 <vCastConstPointerTo_IPPacket_t>
 8008e4e:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	7b9b      	ldrb	r3, [r3, #14]
 8008e54:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8008e56:	8bfb      	ldrh	r3, [r7, #30]
 8008e58:	2b44      	cmp	r3, #68	; 0x44
 8008e5a:	d902      	bls.n	8008e62 <xCheckSizeFields+0x38>
 8008e5c:	8bfb      	ldrh	r3, [r7, #30]
 8008e5e:	2b4f      	cmp	r3, #79	; 0x4f
 8008e60:	d902      	bls.n	8008e68 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8008e62:	2302      	movs	r3, #2
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008e66:	e06a      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 8008e68:	8bfb      	ldrh	r3, [r7, #30]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008e72:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8008e74:	8bfb      	ldrh	r3, [r7, #30]
 8008e76:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	330e      	adds	r3, #14
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d202      	bcs.n	8008e88 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8008e82:	2303      	movs	r3, #3
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008e86:	e05a      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	7c1a      	ldrb	r2, [r3, #16]
 8008e8c:	7c5b      	ldrb	r3, [r3, #17]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	4313      	orrs	r3, r2
 8008e92:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 8008e94:	8afb      	ldrh	r3, [r7, #22]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	8afb      	ldrh	r3, [r7, #22]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8008ea8:	8afb      	ldrh	r3, [r7, #22]
 8008eaa:	330e      	adds	r3, #14
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d202      	bcs.n	8008eb8 <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8008eb2:	2304      	movs	r3, #4
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008eb6:	e042      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	7ddb      	ldrb	r3, [r3, #23]
 8008ebc:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	3b14      	subs	r3, #20
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fbc9 	bl	800965e <vCastConstPointerTo_ProtocolPacket_t>
 8008ecc:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8008ece:	7d7b      	ldrb	r3, [r7, #21]
 8008ed0:	2b11      	cmp	r3, #17
 8008ed2:	d103      	bne.n	8008edc <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	3316      	adds	r3, #22
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eda:	e013      	b.n	8008f04 <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8008edc:	7d7b      	ldrb	r3, [r7, #21]
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d103      	bne.n	8008eea <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	3322      	adds	r3, #34	; 0x22
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee8:	e00c      	b.n	8008f04 <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8008eea:	7d7b      	ldrb	r3, [r7, #21]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d002      	beq.n	8008ef6 <xCheckSizeFields+0xcc>
 8008ef0:	7d7b      	ldrb	r3, [r7, #21]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d103      	bne.n	8008efe <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	3316      	adds	r3, #22
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efc:	e002      	b.n	8008f04 <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8008efe:	2305      	movs	r3, #5
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008f02:	e01c      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            if( uxBufferLength < uxMinimumLength )
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d202      	bcs.n	8008f12 <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8008f0c:	2306      	movs	r3, #6
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008f10:	e015      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            uxLength = ( size_t ) usLength;
 8008f12:	8afb      	ldrh	r3, [r7, #22]
 8008f14:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b07      	cmp	r3, #7
 8008f26:	d905      	bls.n	8008f34 <xCheckSizeFields+0x10a>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d902      	bls.n	8008f3a <xCheckSizeFields+0x110>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8008f34:	2307      	movs	r3, #7
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008f38:	e001      	b.n	8008f3e <xCheckSizeFields+0x114>
            }

            xResult = pdPASS;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <usGenerateProtocolChecksum>:
 *         or ipCORRECT_CRC.
 */
uint16_t usGenerateProtocolChecksum( uint8_t * pucEthernetBuffer,
                                     size_t uxBufferLength,
                                     BaseType_t xOutgoingPacket )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	; 0x30
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
    uint32_t ulLength;
    uint16_t usChecksum;           /* The checksum as calculated. */
    uint16_t usChecksumFound = 0U; /* The checksum as found in the incoming packet. */
 8008f54:	2300      	movs	r3, #0
 8008f56:	85bb      	strh	r3, [r7, #44]	; 0x2c
    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
        const char * pcType;
    #endif
    uint16_t usLength;
    uint16_t ucVersionHeaderLength;
    DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8008f58:	2300      	movs	r3, #0
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* Introduce a do-while loop to allow use of break statements.
     * Note: MISRA prohibits use of 'goto', thus replaced with breaks. */
    do
    {
        /* Check for minimum packet size. */
        if( uxBufferLength < sizeof( IPPacket_t ) )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b21      	cmp	r3, #33	; 0x21
 8008f60:	d805      	bhi.n	8008f6e <usGenerateProtocolChecksum+0x26>
        {
            usChecksum = ipINVALID_LENGTH;
 8008f62:	f241 2334 	movw	r3, #4660	; 0x1234
 8008f66:	85fb      	strh	r3, [r7, #46]	; 0x2e
            DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8008f68:	2301      	movs	r3, #1
 8008f6a:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8008f6c:	e14c      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        }

        /* Parse the packet length. */
        pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 fb28 	bl	80095c4 <vCastConstPointerTo_IPPacket_t>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header
         * Length field contains the length of the internet header in 32-bit words. */
        ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	7b9b      	ldrb	r3, [r3, #14]
 8008f7a:	847b      	strh	r3, [r7, #34]	; 0x22
        ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 8008f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008f86:	847b      	strh	r3, [r7, #34]	; 0x22
        uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8008f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f8a:	61fb      	str	r3, [r7, #28]

        /* Check for minimum packet size. */
        if( uxBufferLength < ( sizeof( IPPacket_t ) + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) ) )
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	330e      	adds	r3, #14
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d205      	bcs.n	8008fa2 <usGenerateProtocolChecksum+0x5a>
        {
            usChecksum = ipINVALID_LENGTH;
 8008f96:	f241 2334 	movw	r3, #4660	; 0x1234
 8008f9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
            DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8008fa0:	e132      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	7c1a      	ldrb	r2, [r3, #16]
 8008fa6:	7c5b      	ldrb	r3, [r3, #17]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	4313      	orrs	r3, r2
 8008fac:	837b      	strh	r3, [r7, #26]
        usLength = FreeRTOS_ntohs( usLength );
 8008fae:	8b7b      	ldrh	r3, [r7, #26]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	b21a      	sxth	r2, r3
 8008fb4:	8b7b      	ldrh	r3, [r7, #26]
 8008fb6:	0a1b      	lsrs	r3, r3, #8
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	b21b      	sxth	r3, r3
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	b21b      	sxth	r3, r3
 8008fc0:	837b      	strh	r3, [r7, #26]

        if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8008fc2:	8b7b      	ldrh	r3, [r7, #26]
 8008fc4:	330e      	adds	r3, #14
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d205      	bcs.n	8008fd8 <usGenerateProtocolChecksum+0x90>
        {
            usChecksum = ipINVALID_LENGTH;
 8008fcc:	f241 2334 	movw	r3, #4660	; 0x1234
 8008fd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
            DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8008fd6:	e117      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        }

        /* Identify the next protocol. */
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	7ddb      	ldrb	r3, [r3, #23]
 8008fdc:	767b      	strb	r3, [r7, #25]
        /* N.B., if this IP packet header includes Options, then the following
         * assignment results in a pointer into the protocol packet with the Ethernet
         * and IP headers incorrectly aligned. However, either way, the "third"
         * protocol (Layer 3 or 4) header will be aligned, which is the convenience
         * of this calculation. */
        pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3b14      	subs	r3, #20
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fb2e 	bl	8009648 <vCastPointerTo_ProtocolPacket_t>
 8008fec:	6178      	str	r0, [r7, #20]

        /* Switch on the Layer 3/4 protocol. */
        if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8008fee:	7e7b      	ldrb	r3, [r7, #25]
 8008ff0:	2b11      	cmp	r3, #17
 8008ff2:	d11e      	bne.n	8009032 <usGenerateProtocolChecksum+0xea>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	3316      	adds	r3, #22
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d205      	bcs.n	800900a <usGenerateProtocolChecksum+0xc2>
            {
                usChecksum = ipINVALID_LENGTH;
 8008ffe:	f241 2334 	movw	r3, #4660	; 0x1234
 8009002:	85fb      	strh	r3, [r7, #46]	; 0x2e
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009004:	2304      	movs	r3, #4
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8009008:	e0fe      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
            }

            if( xOutgoingPacket != pdFALSE )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <usGenerateProtocolChecksum+0xd8>
            {
                /* Clear the UDP checksum field before calculating it. */
                pxProtPack->xUDPPacket.xUDPHeader.usChecksum = 0U;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800901e:	e055      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
            }
            else
            {
                usChecksumFound = pxProtPack->xUDPPacket.xUDPHeader.usChecksum;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8009026:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	4313      	orrs	r3, r2
 800902e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009030:	e04c      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
                {
                    pcType = "UDP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009032:	7e7b      	ldrb	r3, [r7, #25]
 8009034:	2b06      	cmp	r3, #6
 8009036:	d11e      	bne.n	8009076 <usGenerateProtocolChecksum+0x12e>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3322      	adds	r3, #34	; 0x22
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	429a      	cmp	r2, r3
 8009040:	d205      	bcs.n	800904e <usGenerateProtocolChecksum+0x106>
            {
                usChecksum = ipINVALID_LENGTH;
 8009042:	f241 2334 	movw	r3, #4660	; 0x1234
 8009046:	85fb      	strh	r3, [r7, #46]	; 0x2e
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009048:	2305      	movs	r3, #5
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 800904c:	e0dc      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
            }

            if( xOutgoingPacket != pdFALSE )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <usGenerateProtocolChecksum+0x11c>
            {
                /* Clear the TCP checksum field before calculating it. */
                pxProtPack->xTCPPacket.xTCPHeader.usChecksum = 0U;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8009062:	e033      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
            }
            else
            {
                usChecksumFound = pxProtPack->xTCPPacket.xTCPHeader.usChecksum;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800906a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	4313      	orrs	r3, r2
 8009072:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009074:	e02a      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
                {
                    pcType = "TCP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009076:	7e7b      	ldrb	r3, [r7, #25]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d002      	beq.n	8009082 <usGenerateProtocolChecksum+0x13a>
 800907c:	7e7b      	ldrb	r3, [r7, #25]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d11e      	bne.n	80090c0 <usGenerateProtocolChecksum+0x178>
                 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3316      	adds	r3, #22
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	429a      	cmp	r2, r3
 800908a:	d205      	bcs.n	8009098 <usGenerateProtocolChecksum+0x150>
            {
                usChecksum = ipINVALID_LENGTH;
 800908c:	f241 2334 	movw	r3, #4660	; 0x1234
 8009090:	85fb      	strh	r3, [r7, #46]	; 0x2e
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009092:	2306      	movs	r3, #6
 8009094:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8009096:	e0b7      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
            }

            if( xOutgoingPacket != pdFALSE )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <usGenerateProtocolChecksum+0x166>
            {
                /* Clear the ICMP/IGMP checksum field before calculating it. */
                pxProtPack->xICMPPacket.xICMPHeader.usChecksum = 0U;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            if( xOutgoingPacket != pdFALSE )
 80090ac:	e00e      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
            }
            else
            {
                usChecksumFound = pxProtPack->xICMPPacket.xICMPHeader.usChecksum;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80090b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	4313      	orrs	r3, r2
 80090bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if( xOutgoingPacket != pdFALSE )
 80090be:	e005      	b.n	80090cc <usGenerateProtocolChecksum+0x184>
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else
        {
            /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
            usChecksum = ipUNHANDLED_PROTOCOL;
 80090c0:	f244 3321 	movw	r3, #17185	; 0x4321
 80090c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 80090c6:	2307      	movs	r3, #7
 80090c8:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 80090ca:	e09d      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        }

        /* The protocol and checksum field have been identified. Check the direction
         * of the packet. */
        if( xOutgoingPacket != pdFALSE )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d113      	bne.n	80090fa <usGenerateProtocolChecksum+0x1b2>
        {
            /* This is an outgoing packet. The CRC-field has been cleared. */
        }
        else if( ( usChecksumFound == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 80090d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d110      	bne.n	80090fa <usGenerateProtocolChecksum+0x1b2>
 80090d8:	7e7b      	ldrb	r3, [r7, #25]
 80090da:	2b11      	cmp	r3, #17
 80090dc:	d10d      	bne.n	80090fa <usGenerateProtocolChecksum+0x1b2>
        {
            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Sender hasn't set the checksum, drop the packet because
                     * ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is not set. */
                    usChecksum = ipWRONG_CRC;
 80090de:	2300      	movs	r3, #0
 80090e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            if( xCount < 5 )
 80090e2:	4b4c      	ldr	r3, [pc, #304]	; (8009214 <usGenerateProtocolChecksum+0x2cc>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	dc04      	bgt.n	80090f4 <usGenerateProtocolChecksum+0x1ac>
                            {
                                FreeRTOS_printf( ( "usGenerateProtocolChecksum: UDP packet from %xip without CRC dropped\n",
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 80090ea:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <usGenerateProtocolChecksum+0x2cc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3301      	adds	r3, #1
 80090f0:	4a48      	ldr	r2, [pc, #288]	; (8009214 <usGenerateProtocolChecksum+0x2cc>)
 80090f2:	6013      	str	r3, [r2, #0]
                {
                    /* Sender hasn't set the checksum, no use to calculate it. */
                    usChecksum = ipCORRECT_CRC;
                }
            #endif /* if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 ) */
            DEBUG_SET_TRACE_VARIABLE( xLocation, 8 );
 80090f4:	2308      	movs	r3, #8
 80090f6:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 80090f8:	e086      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        else
        {
            /* Other incoming packet than UDP. */
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	7c1a      	ldrb	r2, [r3, #16]
 80090fe:	7c5b      	ldrb	r3, [r3, #17]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	4313      	orrs	r3, r2
 8009104:	837b      	strh	r3, [r7, #26]
        usLength = FreeRTOS_ntohs( usLength );
 8009106:	8b7b      	ldrh	r3, [r7, #26]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	b21a      	sxth	r2, r3
 800910c:	8b7b      	ldrh	r3, [r7, #26]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b29b      	uxth	r3, r3
 8009112:	b21b      	sxth	r3, r3
 8009114:	4313      	orrs	r3, r2
 8009116:	b21b      	sxth	r3, r3
 8009118:	837b      	strh	r3, [r7, #26]
        ulLength = ( uint32_t ) usLength;
 800911a:	8b7b      	ldrh	r3, [r7, #26]
 800911c:	613b      	str	r3, [r7, #16]
        ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	b29b      	uxth	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	1a9b      	subs	r3, r3, r2
 8009128:	613b      	str	r3, [r7, #16]

        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b07      	cmp	r3, #7
 800912e:	d905      	bls.n	800913c <usGenerateProtocolChecksum+0x1f4>
            ( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	429a      	cmp	r2, r3
 800913a:	d905      	bls.n	8009148 <usGenerateProtocolChecksum+0x200>

            /* Again, in a 16-bit return value there is no space to indicate an
             * error.  For incoming packets, 0x1234 will cause dropping of the packet.
             * For outgoing packets, there is a serious problem with the
             * format/length */
            usChecksum = ipINVALID_LENGTH;
 800913c:	f241 2334 	movw	r3, #4660	; 0x1234
 8009140:	85fb      	strh	r3, [r7, #46]	; 0x2e
            DEBUG_SET_TRACE_VARIABLE( xLocation, 9 );
 8009142:	2309      	movs	r3, #9
 8009144:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8009146:	e05f      	b.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        }

        if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 8009148:	7e7b      	ldrb	r3, [r7, #25]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d80a      	bhi.n	8009164 <usGenerateProtocolChecksum+0x21c>
        {
            /* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( 0U,
                                                ( const uint8_t * ) &( pxProtPack->xICMPPacket.xICMPHeader ), ( size_t ) ulLength ) );
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	3322      	adds	r3, #34	; 0x22
                         ( ~usGenerateChecksum( 0U,
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4619      	mov	r1, r3
 8009156:	2000      	movs	r0, #0
 8009158:	f000 f85e 	bl	8009218 <usGenerateChecksum>
 800915c:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 800915e:	43db      	mvns	r3, r3
 8009160:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009162:	e012      	b.n	800918a <usGenerateProtocolChecksum+0x242>
        }
        else
        {
            /* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
             * fields */
            usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	b29a      	uxth	r2, r3
 8009168:	7e7b      	ldrb	r3, [r7, #25]
 800916a:	b29b      	uxth	r3, r3
 800916c:	4413      	add	r3, r2
 800916e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /* And then continue at the IPv4 source and destination addresses. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( usChecksum,
                                                ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	f103 011a 	add.w	r1, r3, #26
                                                ( size_t ) ( ( 2U * ipSIZE_OF_IPv4_ADDRESS ) + ulLength ) ) );
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f103 0208 	add.w	r2, r3, #8
                         ( ~usGenerateChecksum( usChecksum,
 800917c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f84a 	bl	8009218 <usGenerateChecksum>
 8009184:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 8009186:	43db      	mvns	r3, r3
 8009188:	85fb      	strh	r3, [r7, #46]	; 0x2e
            /* Sum TCP header and data. */
        }

        if( xOutgoingPacket == pdFALSE )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d109      	bne.n	80091a4 <usGenerateProtocolChecksum+0x25c>
        {
            /* This is in incoming packet. If the CRC is correct, it should be zero. */
            if( usChecksum == 0U )
 8009190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <usGenerateProtocolChecksum+0x256>
            {
                usChecksum = ( uint16_t ) ipCORRECT_CRC;
 8009196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800919a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800919c:	e00b      	b.n	80091b6 <usGenerateProtocolChecksum+0x26e>
            }
            else
            {
                usChecksum = ( uint16_t ) ipWRONG_CRC;
 800919e:	2300      	movs	r3, #0
 80091a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80091a2:	e008      	b.n	80091b6 <usGenerateProtocolChecksum+0x26e>
            }
        }
        else
        {
            if( ( usChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 80091a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <usGenerateProtocolChecksum+0x26e>
 80091aa:	7e7b      	ldrb	r3, [r7, #25]
 80091ac:	2b11      	cmp	r3, #17
 80091ae:	d102      	bne.n	80091b6 <usGenerateProtocolChecksum+0x26e>
            {
                /* In case of UDP, a calculated checksum of 0x0000 is transmitted
                 * as 0xffff. A value of zero would mean that the checksum is not used. */
                usChecksum = ( uint16_t ) 0xffffu;
 80091b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
        }

        usChecksum = FreeRTOS_htons( usChecksum );
 80091b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	b21a      	sxth	r2, r3
 80091bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	b21b      	sxth	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b21b      	sxth	r3, r3
 80091c8:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if( xOutgoingPacket != pdFALSE )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01b      	beq.n	8009208 <usGenerateProtocolChecksum+0x2c0>
        {
            switch( ucProtocol )
 80091d0:	7e7b      	ldrb	r3, [r7, #25]
 80091d2:	2b11      	cmp	r3, #17
 80091d4:	d009      	beq.n	80091ea <usGenerateProtocolChecksum+0x2a2>
 80091d6:	2b11      	cmp	r3, #17
 80091d8:	dc13      	bgt.n	8009202 <usGenerateProtocolChecksum+0x2ba>
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dc02      	bgt.n	80091e4 <usGenerateProtocolChecksum+0x29c>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc0b      	bgt.n	80091fa <usGenerateProtocolChecksum+0x2b2>
 80091e2:	e00e      	b.n	8009202 <usGenerateProtocolChecksum+0x2ba>
 80091e4:	2b06      	cmp	r3, #6
 80091e6:	d004      	beq.n	80091f2 <usGenerateProtocolChecksum+0x2aa>
 80091e8:	e00b      	b.n	8009202 <usGenerateProtocolChecksum+0x2ba>
            {
                case ipPROTOCOL_UDP:
                    pxProtPack->xUDPPacket.xUDPHeader.usChecksum = usChecksum;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091ee:	851a      	strh	r2, [r3, #40]	; 0x28
                    break;
 80091f0:	e007      	b.n	8009202 <usGenerateProtocolChecksum+0x2ba>

                case ipPROTOCOL_TCP:
                    pxProtPack->xTCPPacket.xTCPHeader.usChecksum = usChecksum;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091f6:	865a      	strh	r2, [r3, #50]	; 0x32
                    break;
 80091f8:	e003      	b.n	8009202 <usGenerateProtocolChecksum+0x2ba>

                case ipPROTOCOL_ICMP:
                case ipPROTOCOL_IGMP:
                    pxProtPack->xICMPPacket.xICMPHeader.usChecksum = usChecksum;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091fe:	849a      	strh	r2, [r3, #36]	; 0x24
                    break;
 8009200:	bf00      	nop
            }

            usChecksum = ( uint16_t ) ipCORRECT_CRC;
 8009202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009206:	85fb      	strh	r3, [r7, #46]	; 0x2e
    {
        /* NOP if ipconfigHAS_PRINTF != 0 */
        FreeRTOS_printf( ( "CRC error: %04x location %ld\n", usChecksum, xLocation ) );
    }

    return usChecksum;
 8009208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800920a:	4618      	mov	r0, r3
 800920c:	3730      	adds	r7, #48	; 0x30
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	24008908 	.word	0x24008908

08009218 <usGenerateChecksum>:
 *         words in the header
 */
uint16_t usGenerateChecksum( uint16_t usSum,
                             const uint8_t * pucNextData,
                             size_t uxByteCount )
{
 8009218:	b480      	push	{r7}
 800921a:	b08f      	sub	sp, #60	; 0x3c
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	81fb      	strh	r3, [r7, #14]
 * aid though to optimise the calculations. */
    xUnion32 xSum2, xSum, xTerm;
    xUnionPtr xSource;
    xUnionPtr xLastSource;
    uintptr_t uxAlignBits;
    uint32_t ulCarry = 0UL;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t usTemp;
    size_t uxDataLengthBytes = uxByteCount;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	633b      	str	r3, [r7, #48]	; 0x30
    /* Small MCUs often spend up to 30% of the time doing checksum calculations
    * This function is optimised for 32-bit CPUs; Each time it will try to fetch
    * 32-bits, sums it with an accumulator and counts the number of carries. */

    /* Swap the input (little endian platform only). */
    usTemp = FreeRTOS_ntohs( usSum );
 800922e:	89fb      	ldrh	r3, [r7, #14]
 8009230:	021b      	lsls	r3, r3, #8
 8009232:	b21a      	sxth	r2, r3
 8009234:	89fb      	ldrh	r3, [r7, #14]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b29b      	uxth	r3, r3
 800923a:	b21b      	sxth	r3, r3
 800923c:	4313      	orrs	r3, r2
 800923e:	b21b      	sxth	r3, r3
 8009240:	85fb      	strh	r3, [r7, #46]	; 0x2e
    xSum.u32 = ( uint32_t ) usTemp;
 8009242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009244:	623b      	str	r3, [r7, #32]
    xTerm.u32 = 0UL;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]

    xSource.u8ptr = ipPOINTER_CAST( uint8_t *, pucNextData );
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	61bb      	str	r3, [r7, #24]
    uxAlignBits = ( ( ( uintptr_t ) pucNextData ) & 0x03U );
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	62bb      	str	r3, [r7, #40]	; 0x28
    /*
     * If pucNextData is non-aligned then the checksum is starting at an
     * odd position and we need to make sure the usSum value now in xSum is
     * as if it had been "aligned" in the same way.
     */
    if( ( uxAlignBits & 1UL ) != 0U )
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d007      	beq.n	8009270 <usGenerateChecksum+0x58>
    {
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b29a      	uxth	r2, r3
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	623b      	str	r3, [r7, #32]
    }

    /* If byte (8-bit) aligned... */
    if( ( ( uxAlignBits & 1UL ) != 0UL ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00b      	beq.n	8009292 <usGenerateChecksum+0x7a>
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <usGenerateChecksum+0x7a>
    {
        xTerm.u8[ 1 ] = *( xSource.u8ptr );
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	777b      	strb	r3, [r7, #29]
        xSource.u8ptr++;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	3301      	adds	r3, #1
 800928a:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes--;
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	3b01      	subs	r3, #1
 8009290:	633b      	str	r3, [r7, #48]	; 0x30
        /* Now xSource is word (16-bit) aligned. */
    }

    /* If half-word (16-bit) aligned... */
    if( ( ( uxAlignBits == 1U ) || ( uxAlignBits == 2U ) ) && ( uxDataLengthBytes >= 2U ) )
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	2b01      	cmp	r3, #1
 8009296:	d002      	beq.n	800929e <usGenerateChecksum+0x86>
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	2b02      	cmp	r3, #2
 800929c:	d10d      	bne.n	80092ba <usGenerateChecksum+0xa2>
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d90a      	bls.n	80092ba <usGenerateChecksum+0xa2>
    {
        xSum.u32 += *( xSource.u16ptr );
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	8812      	ldrh	r2, [r2, #0]
 80092aa:	4413      	add	r3, r2
 80092ac:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	3302      	adds	r3, #2
 80092b2:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes -= 2U;
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	3b02      	subs	r3, #2
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Now xSource is word (32-bit) aligned. */
    }

    /* Word (32-bit) aligned, do the most part. */
    xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4U ) ) - 3U;
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	f023 0303 	bic.w	r3, r3, #3
 80092c2:	3b0c      	subs	r3, #12
 80092c4:	4413      	add	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]

    /* In this loop, four 32-bit additions will be done, in total 16 bytes.
     * Indexing with constants (0,1,2,3) gives faster code than using
     * post-increments. */
    while( xSource.u32ptr < xLastSource.u32ptr )
 80092c8:	e035      	b.n	8009336 <usGenerateChecksum+0x11e>
    {
        /* Use a secondary Sum2, just to see if the addition produced an
         * overflow. */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 80092ca:	6a3a      	ldr	r2, [r7, #32]
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4413      	add	r3, r2
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24

        if( xSum2.u32 < xSum.u32 )
 80092d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d202      	bcs.n	80092e2 <usGenerateChecksum+0xca>
        {
            ulCarry++;
 80092dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092de:	3301      	adds	r3, #1
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* Now add the secondary sum to the major sum, and remember if there was
         * a carry. */
        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	3304      	adds	r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4413      	add	r3, r2
 80092ec:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 80092ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d902      	bls.n	80092fc <usGenerateChecksum+0xe4>
        {
            ulCarry++;
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	3301      	adds	r3, #1
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* And do the same trick once again for indexes 2 and 3 */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 80092fc:	6a3a      	ldr	r2, [r7, #32]
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	3308      	adds	r3, #8
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4413      	add	r3, r2
 8009306:	627b      	str	r3, [r7, #36]	; 0x24

        if( xSum2.u32 < xSum.u32 )
 8009308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	429a      	cmp	r2, r3
 800930e:	d202      	bcs.n	8009316 <usGenerateChecksum+0xfe>
        {
            ulCarry++;
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	3301      	adds	r3, #1
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
        }

        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 8009316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	330c      	adds	r3, #12
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4413      	add	r3, r2
 8009320:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 8009322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	429a      	cmp	r2, r3
 8009328:	d902      	bls.n	8009330 <usGenerateChecksum+0x118>
        {
            ulCarry++;
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	3301      	adds	r3, #1
 800932e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* And finally advance the pointer 4 * 4 = 16 bytes. */
        xSource.u32ptr = &( xSource.u32ptr[ 4 ] );
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	3310      	adds	r3, #16
 8009334:	61bb      	str	r3, [r7, #24]
    while( xSource.u32ptr < xLastSource.u32ptr )
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	429a      	cmp	r2, r3
 800933c:	d3c5      	bcc.n	80092ca <usGenerateChecksum+0xb2>
    }

    /* Now add all carries. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 800933e:	8c3b      	ldrh	r3, [r7, #32]
 8009340:	461a      	mov	r2, r3
 8009342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009344:	441a      	add	r2, r3
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	4413      	add	r3, r2
 800934a:	623b      	str	r3, [r7, #32]

    uxDataLengthBytes %= 16U;
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	633b      	str	r3, [r7, #48]	; 0x30
    xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	4413      	add	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
    /* Half-word aligned. */

    /* Coverity does not like Unions. Warning issued here: "The operator "<"
     * is being applied to the pointers "xSource.u16ptr" and "xLastSource.u16ptr",
     * which do not point into the same object." */
    while( xSource.u16ptr < xLastSource.u16ptr )
 8009360:	e007      	b.n	8009372 <usGenerateChecksum+0x15a>
    {
        /* At least one more short. */
        xSum.u32 += xSource.u16ptr[ 0 ];
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	4413      	add	r3, r2
 800936a:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	3302      	adds	r3, #2
 8009370:	61bb      	str	r3, [r7, #24]
    while( xSource.u16ptr < xLastSource.u16ptr )
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	429a      	cmp	r2, r3
 8009378:	d3f3      	bcc.n	8009362 <usGenerateChecksum+0x14a>
    }

    if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0U ) /* Maybe one more ? */
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <usGenerateChecksum+0x172>
    {
        xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	773b      	strb	r3, [r7, #28]
    }

    xSum.u32 += xTerm.u32;
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	4413      	add	r3, r2
 8009390:	623b      	str	r3, [r7, #32]

    /* Now add all carries again. */

    /* Assigning value from "xTerm.u32" to "xSum.u32" here, but that stored value is overwritten before it can be used.
     * Coverity doesn't understand about union variables. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8009392:	8c3b      	ldrh	r3, [r7, #32]
 8009394:	461a      	mov	r2, r3
 8009396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009398:	4413      	add	r3, r2
 800939a:	623b      	str	r3, [r7, #32]

    /* coverity[value_overwrite] */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800939c:	8c3b      	ldrh	r3, [r7, #32]
 800939e:	461a      	mov	r2, r3
 80093a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093a2:	4413      	add	r3, r2
 80093a4:	623b      	str	r3, [r7, #32]

    if( ( uxAlignBits & 1U ) != 0U )
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <usGenerateChecksum+0x1a8>
    {
        /* Quite unlikely, but pucNextData might be non-aligned, which would
        * mean that a checksum is calculated starting at an odd position. */
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	0a1b      	lsrs	r3, r3, #8
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	623b      	str	r3, [r7, #32]
    }

    /* swap the output (little endian platform only). */
    return FreeRTOS_htons( ( ( uint16_t ) xSum.u32 ) );
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	b21b      	sxth	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b21b      	sxth	r3, r3
 80093d6:	b29b      	uxth	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	373c      	adds	r7, #60	; 0x3c
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]

        if( pxNetworkBuffer != NULL )
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f8af 	bl	8009556 <vCastPointerTo_EthernetHeader_t>
 80093f8:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3306      	adds	r3, #6
 80093fe:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8009404:	2206      	movs	r2, #6
 8009406:	6939      	ldr	r1, [r7, #16]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f008 fb6c 	bl	8011ae6 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 800940e:	4b09      	ldr	r3, [pc, #36]	; (8009434 <vReturnEthernetFrame+0x50>)
 8009410:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	3306      	adds	r3, #6
 8009416:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009418:	2206      	movs	r2, #6
 800941a:	6939      	ldr	r1, [r7, #16]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f008 fb62 	bl	8011ae6 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f006 fbbb 	bl	800fba0 <xNetworkInterfaceOutput>
    }
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	24000020 	.word	0x24000020

08009438 <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800943e:	f005 fe9f 	bl	800f180 <uxGetMinimumFreeNetworkBuffers>
 8009442:	6078      	str	r0, [r7, #4]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 8009444:	4b14      	ldr	r3, [pc, #80]	; (8009498 <vPrintResourceStats+0x60>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	429a      	cmp	r2, r3
 800944c:	d202      	bcs.n	8009454 <vPrintResourceStats+0x1c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800944e:	4a12      	ldr	r2, [pc, #72]	; (8009498 <vPrintResourceStats+0x60>)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 8009454:	f7fe f9ce 	bl	80077f4 <xPortGetMinimumEverFreeHeapSize>
 8009458:	6038      	str	r0, [r7, #0]

        if( uxMinLastSize == 0U )
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <vPrintResourceStats+0x64>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <vPrintResourceStats+0x32>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 8009462:	4a0e      	ldr	r2, [pc, #56]	; (800949c <vPrintResourceStats+0x64>)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	6013      	str	r3, [r2, #0]
                    uxLastMinQueueSpace = uxCurrentCount;
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 8009468:	e011      	b.n	800948e <vPrintResourceStats+0x56>
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009470:	d20d      	bcs.n	800948e <vPrintResourceStats+0x56>
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vPrintResourceStats+0x64>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	225a      	movs	r2, #90	; 0x5a
 8009478:	fb02 f203 	mul.w	r2, r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2164      	movs	r1, #100	; 0x64
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	429a      	cmp	r2, r3
 8009486:	d902      	bls.n	800948e <vPrintResourceStats+0x56>
            uxMinLastSize = uxMinSize;
 8009488:	4a04      	ldr	r2, [pc, #16]	; (800949c <vPrintResourceStats+0x64>)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6013      	str	r3, [r2, #0]
    }
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	2400001c 	.word	0x2400001c
 800949c:	2400890c 	.word	0x2400890c

080094a0 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 80094a4:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <FreeRTOS_GetMACAddress+0x10>)
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	24000020 	.word	0x24000020

080094b4 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <xIPIsNetworkTaskReady+0x14>)
 80094ba:	681b      	ldr	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	24007bc8 	.word	0x24007bc8

080094cc <FreeRTOS_max_uint32>:
 * @param[in] b: the second value.
 * @return The highest of the two values.
 */
uint32_t FreeRTOS_max_uint32( uint32_t a,
                              uint32_t b )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	4293      	cmp	r3, r2
 80094dc:	bf38      	it	cc
 80094de:	4613      	movcc	r3, r2
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <FreeRTOS_min_int32>:
 * @param[in] b: the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bfa8      	it	ge
 80094fe:	4613      	movge	r3, r2
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <FreeRTOS_min_uint32>:
 * @param[in] b: the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	4293      	cmp	r3, r2
 800951c:	bf28      	it	cs
 800951e:	4613      	movcs	r3, r2
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <FreeRTOS_round_up>:
 * @param[in] d: the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
    return d * ( ( a + d - 1U ) / d );
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	4413      	add	r3, r2
 800953c:	1e5a      	subs	r2, r3, #1
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	fbb2 f3f3 	udiv	r3, r2, r3
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	fb02 f303 	mul.w	r3, r2, r3
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <vCastPointerTo_EthernetHeader_t>:

/**
 * @brief Cast a given pointer to EthernetHeader_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( EthernetHeader_t )
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
    return ( EthernetHeader_t * ) pvArgument;
 800955e:	687b      	ldr	r3, [r7, #4]
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <vCastConstPointerTo_EthernetHeader_t>:

/**
 * @brief Cast a given constant pointer to EthernetHeader_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( EthernetHeader_t )
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
    return ( const EthernetHeader_t * ) pvArgument;
 8009574:	687b      	ldr	r3, [r7, #4]
}
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <vCastConstPointerTo_IPHeader_t>:

/**
 * @brief Cast a given constant pointer to IPHeader_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( IPHeader_t )
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
    return ( const IPHeader_t * ) pvArgument;
 800958a:	687b      	ldr	r3, [r7, #4]
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <vCastPointerTo_ARPPacket_t>:

/**
 * @brief Cast a given pointer to ARPPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
    return ( ARPPacket_t * ) pvArgument;
 80095a0:	687b      	ldr	r3, [r7, #4]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <vCastPointerTo_IPPacket_t>:

/**
 * @brief Cast a given pointer to IPPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( IPPacket_t )
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
    return ( IPPacket_t * ) pvArgument;
 80095b6:	687b      	ldr	r3, [r7, #4]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <vCastConstPointerTo_IPPacket_t>:

/**
 * @brief Cast a given constant pointer to IPPacket_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( IPPacket_t )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
    return ( const IPPacket_t * ) pvArgument;
 80095cc:	687b      	ldr	r3, [r7, #4]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <vCastPointerTo_ICMPPacket_t>:

/**
 * @brief Cast a given pointer to ICMPPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( ICMPPacket_t )
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
    return ( ICMPPacket_t * ) pvArgument;
 80095e2:	687b      	ldr	r3, [r7, #4]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <vCastPointerTo_UDPPacket_t>:

/**
 * @brief Cast a given pointer to UDPPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
    return ( UDPPacket_t * ) pvArgument;
 80095f8:	687b      	ldr	r3, [r7, #4]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <vCastConstPointerTo_UDPPacket_t>:

/**
 * @brief Cast a given constant pointer to UDPPacket_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
    return ( const UDPPacket_t * ) pvArgument;
 800960e:	687b      	ldr	r3, [r7, #4]
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <vCastPointerTo_TCPPacket_t>:

/**
 * @brief Cast a given pointer to TCPPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPPacket_t )
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
    return ( TCPPacket_t * ) pvArgument;
 8009624:	687b      	ldr	r3, [r7, #4]
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <vCastConstPointerTo_TCPPacket_t>:

/**
 * @brief Cast a given constant pointer to TCPPacket_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( TCPPacket_t )
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
    return ( const TCPPacket_t * ) pvArgument;
 800963a:	687b      	ldr	r3, [r7, #4]
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <vCastPointerTo_ProtocolPacket_t>:

/**
 * @brief Cast a given pointer to ProtocolPacket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
    return ( ProtocolPacket_t * ) pvArgument;
 8009650:	687b      	ldr	r3, [r7, #4]
}
 8009652:	4618      	mov	r0, r3
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <vCastConstPointerTo_ProtocolPacket_t>:

/**
 * @brief Cast a given constant pointer to ProtocolPacket_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
    return ( const ProtocolPacket_t * ) pvArgument;
 8009666:	687b      	ldr	r3, [r7, #4]
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <vCastPointerTo_ProtocolHeaders_t>:

/**
 * @brief Cast a given pointer to ProtocolHeaders_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( ProtocolHeaders_t )
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
    return ( ProtocolHeaders_t * ) pvArgument;
 800967c:	687b      	ldr	r3, [r7, #4]
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <vCastConstPointerTo_ProtocolHeaders_t>:

/**
 * @brief Cast a given constant pointer to ProtocolHeaders_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( ProtocolHeaders_t )
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
    return ( const ProtocolHeaders_t * ) pvArgument;
 8009692:	687b      	ldr	r3, [r7, #4]
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <vCastPointerTo_FreeRTOS_Socket_t>:

/**
 * @brief Cast a given pointer to FreeRTOS_Socket_t type pointer.
 */
ipDECL_CAST_PTR_FUNC_FOR_TYPE( FreeRTOS_Socket_t )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
    return ( FreeRTOS_Socket_t * ) pvArgument;
 80096a8:	687b      	ldr	r3, [r7, #4]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <vCastConstPointerTo_FreeRTOS_Socket_t>:

/**
 * @brief Cast a given constant pointer to FreeRTOS_Socket_t type pointer.
 */
ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( FreeRTOS_Socket_t )
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
    return ( const FreeRTOS_Socket_t * ) pvArgument;
 80096be:	687b      	ldr	r3, [r7, #4]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <vCastPointerTo_SocketSelect_t>:

/**
 * @brief Cast a given pointer to SocketSelect_t type pointer.
 */
    ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
    {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
        return ( SocketSelect_t * ) pvArgument;
 80096d4:	687b      	ldr	r3, [r7, #4]
    }
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3301      	adds	r3, #1
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 80096f8:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3302      	adds	r3, #2
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009702:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	3203      	adds	r2, #3
 8009708:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800970a:	4313      	orrs	r3, r2
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	b29a      	uxth	r2, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3301      	adds	r3, #1
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
    return ( uint16_t )
 8009732:	4313      	orrs	r3, r2
 8009734:	b29b      	uxth	r3, r3
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800974a:	687b      	ldr	r3, [r7, #4]
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 8009760:	687b      	ldr	r3, [r7, #4]
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800976e:	b480      	push	{r7}
 8009770:	b087      	sub	sp, #28
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <prvValidSocket+0x1a>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d102      	bne.n	800978e <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e015      	b.n	80097ba <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <prvValidSocket+0x34>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e00b      	b.n	80097ba <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d002      	beq.n	80097b6 <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e001      	b.n	80097ba <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 80097b6:	2301      	movs	r3, #1
 80097b8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80097ba:	697b      	ldr	r3, [r7, #20]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <vNetworkSocketsInit+0x14>)
 80097ce:	f7fa ff4d 	bl	800466c <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 80097d2:	4803      	ldr	r0, [pc, #12]	; (80097e0 <vNetworkSocketsInit+0x18>)
 80097d4:	f7fa ff4a 	bl	800466c <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 80097d8:	bf00      	nop
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	24009508 	.word	0x24009508
 80097e0:	240094f4 	.word	0x240094f4

080097e4 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	; 0x30
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80097f2:	2301      	movs	r3, #1
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 80097fa:	f7ff fe5b 	bl	80094b4 <xIPIsNetworkTaskReady>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 8009804:	2300      	movs	r3, #0
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009808:	e072      	b.n	80098f0 <prvDetermineSocketSize+0x10c>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d00a      	beq.n	8009826 <prvDetermineSocketSize+0x42>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <prvDetermineSocketSize+0x40>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 8009826:	4b35      	ldr	r3, [pc, #212]	; (80098fc <prvDetermineSocketSize+0x118>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d00a      	beq.n	8009846 <prvDetermineSocketSize+0x62>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	623b      	str	r3, [r7, #32]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <prvDetermineSocketSize+0x60>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 8009846:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <prvDetermineSocketSize+0x11c>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d00a      	beq.n	8009866 <prvDetermineSocketSize+0x82>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	61fb      	str	r3, [r7, #28]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <prvDetermineSocketSize+0x80>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b11      	cmp	r3, #17
 800986a:	d116      	bne.n	800989a <prvDetermineSocketSize+0xb6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d00f      	beq.n	8009892 <prvDetermineSocketSize+0xae>
            {
                xReturn = pdFAIL;
 8009872:	2300      	movs	r3, #0
 8009874:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn == pdPASS );
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d00a      	beq.n	8009892 <prvDetermineSocketSize+0xae>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	61bb      	str	r3, [r7, #24]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <prvDetermineSocketSize+0xac>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	224c      	movs	r2, #76	; 0x4c
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e02a      	b.n	80098f0 <prvDetermineSocketSize+0x10c>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b06      	cmp	r3, #6
 800989e:	d117      	bne.n	80098d0 <prvDetermineSocketSize+0xec>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d00f      	beq.n	80098c6 <prvDetermineSocketSize+0xe2>
                {
                    xReturn = pdFAIL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    configASSERT( xReturn == pdPASS );
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d00a      	beq.n	80098c6 <prvDetermineSocketSize+0xe2>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	617b      	str	r3, [r7, #20]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <prvDetermineSocketSize+0xe0>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e00f      	b.n	80098f0 <prvDetermineSocketSize+0x10c>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            configASSERT( xReturn == pdPASS );
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d00a      	beq.n	80098f0 <prvDetermineSocketSize+0x10c>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	613b      	str	r3, [r7, #16]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <prvDetermineSocketSize+0x10a>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3730      	adds	r7, #48	; 0x30
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	24009508 	.word	0x24009508
 8009900:	240094f4 	.word	0x240094f4

08009904 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 8009910:	2301      	movs	r3, #1
 8009912:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 8009914:	f107 0310 	add.w	r3, r7, #16
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	68b9      	ldr	r1, [r7, #8]
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7ff ff61 	bl	80097e4 <prvDetermineSocketSize>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	e079      	b.n	8009a24 <FreeRTOS_socket+0x120>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd fe30 	bl	8007598 <pvPortMalloc>
 8009938:	4603      	mov	r3, r0
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff feb0 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 8009940:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 8009948:	f04f 33ff 	mov.w	r3, #4294967295
 800994c:	61fb      	str	r3, [r7, #28]
 800994e:	e069      	b.n	8009a24 <FreeRTOS_socket+0x120>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 8009950:	f7fa fc8a 	bl	8004268 <xEventGroupCreate>
 8009954:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d106      	bne.n	800996a <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800995c:	69b8      	ldr	r0, [r7, #24]
 800995e:	f7fd fee7 	bl	8007730 <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e05c      	b.n	8009a24 <FreeRTOS_socket+0x120>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	461a      	mov	r2, r3
 800996e:	2100      	movs	r1, #0
 8009970:	69b8      	ldr	r0, [r7, #24]
 8009972:	f008 f8e0 	bl	8011b36 <memset>

                pxSocket->xEventGroup = xEventGroup;
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b11      	cmp	r3, #17
 8009980:	d104      	bne.n	800998c <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	3338      	adds	r3, #56	; 0x38
 8009986:	4618      	mov	r0, r3
 8009988:	f7fa fe70 	bl	800466c <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	3308      	adds	r3, #8
 8009990:	4618      	mov	r0, r3
 8009992:	f7fa fe8b 	bl	80046ac <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a2:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099aa:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b06      	cmp	r3, #6
 80099c2:	d12d      	bne.n	8009a20 <FreeRTOS_socket+0x11c>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	f44f 6291 	mov.w	r2, #1160	; 0x488
 80099ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80099d4:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 80099d6:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80099da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099de:	f7ff fda5 	bl	800952c <FreeRTOS_round_up>
 80099e2:	4602      	mov	r2, r0
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ec:	4a10      	ldr	r2, [pc, #64]	; (8009a30 <FreeRTOS_socket+0x12c>)
 80099ee:	fba2 2303 	umull	r2, r3, r2, r3
 80099f2:	0adb      	lsrs	r3, r3, #11
 80099f4:	4619      	mov	r1, r3
 80099f6:	2001      	movs	r0, #1
 80099f8:	f7ff fd68 	bl	80094cc <FreeRTOS_max_uint32>
 80099fc:	4602      	mov	r2, r0
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <FreeRTOS_socket+0x12c>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	0adb      	lsrs	r3, r3, #11
 8009a10:	4619      	mov	r1, r3
 8009a12:	2001      	movs	r0, #1
 8009a14:	f7ff fd5a 	bl	80094cc <FreeRTOS_max_uint32>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 8009a24:	69fb      	ldr	r3, [r7, #28]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	e1fc780f 	.word	0xe1fc780f

08009a34 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08c      	sub	sp, #48	; 0x30
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 8009a48:	f7fe fc0e 	bl	8008268 <xIsCallingFromIPTask>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <FreeRTOS_bind+0x34>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	61fb      	str	r3, [r7, #28]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <FreeRTOS_bind+0x32>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <FreeRTOS_bind+0x42>
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d103      	bne.n	8009a7e <FreeRTOS_bind+0x4a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009a76:	f06f 0315 	mvn.w	r3, #21
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a7c:	e03f      	b.n	8009afe <FreeRTOS_bind+0xca>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <FreeRTOS_bind+0x5a>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009a86:	f06f 0315 	mvn.w	r3, #21
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8c:	e037      	b.n	8009afe <FreeRTOS_bind+0xca>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 8009a8e:	2309      	movs	r3, #9
 8009a90:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00e      	beq.n	8009aba <FreeRTOS_bind+0x86>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	885b      	ldrh	r3, [r3, #2]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	b21a      	sxth	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	885b      	ldrh	r3, [r3, #2]
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	b21b      	sxth	r3, r3
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	b21b      	sxth	r3, r3
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	849a      	strh	r2, [r3, #36]	; 0x24
 8009ab8:	e002      	b.n	8009ac0 <FreeRTOS_bind+0x8c>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	2200      	movs	r2, #0
 8009abe:	849a      	strh	r2, [r3, #36]	; 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fe0d 	bl	80086e8 <xSendEventStructToIPTask>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <FreeRTOS_bind+0xa8>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 8009ad4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ada:	e010      	b.n	8009afe <FreeRTOS_bind+0xca>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	6858      	ldr	r0, [r3, #4]
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2201      	movs	r2, #1
 8009aea:	2110      	movs	r1, #16
 8009aec:	f7fa fbd6 	bl	800429c <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <FreeRTOS_bind+0xca>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009af8:	f06f 0315 	mvn.w	r3, #21
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    return xReturn;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3728      	adds	r7, #40	; 0x28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 8009b16:	2300      	movs	r3, #0
 8009b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009b24:	2b06      	cmp	r3, #6
 8009b26:	d102      	bne.n	8009b2e <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 8009b28:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <vSocketBind+0x124>)
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b2c:	e001      	b.n	8009b32 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 8009b2e:	4b40      	ldr	r3, [pc, #256]	; (8009c30 <vSocketBind+0x128>)
 8009b30:	62bb      	str	r3, [r7, #40]	; 0x28

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <vSocketBind+0x46>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	623b      	str	r3, [r7, #32]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <vSocketBind+0x44>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b54:	d10a      	bne.n	8009b6c <vSocketBind+0x64>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	61fb      	str	r3, [r7, #28]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <vSocketBind+0x62>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d105      	bne.n	8009b7e <vSocketBind+0x76>
            {
                pxAddress = &xAddress;
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <vSocketBind+0x92>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	61bb      	str	r3, [r7, #24]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <vSocketBind+0x90>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d111      	bne.n	8009bc6 <vSocketBind+0xbe>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fb25 	bl	800a1f8 <prvGetPrivatePortNumber>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <vSocketBind+0xbe>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8009bbe:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8009bc4:	e02d      	b.n	8009c22 <vSocketBind+0x11a>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <vSocketBind+0xce>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009bd2:	2b06      	cmp	r3, #6
 8009bd4:	d00c      	beq.n	8009bf0 <vSocketBind+0xe8>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bde:	f000 fb63 	bl	800a2a8 <pxListFindListItemWithValue>
 8009be2:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <vSocketBind+0xe8>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8009be8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bee:	e018      	b.n	8009c22 <vSocketBind+0x11a>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	885b      	ldrh	r3, [r3, #2]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	885b      	ldrh	r3, [r3, #2]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	b21a      	sxth	r2, r3
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	885b      	ldrh	r3, [r3, #2]
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	b21b      	sxth	r3, r3
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c1e:	f7fa fd52 	bl	80046c6 <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 8009c24:	4618      	mov	r0, r3
 8009c26:	3730      	adds	r7, #48	; 0x30
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	240094f4 	.word	0x240094f4
 8009c30:	24009508 	.word	0x24009508

08009c34 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 8009c3c:	230a      	movs	r3, #10
 8009c3e:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <FreeRTOS_closesocket+0x1e>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d102      	bne.n	8009c58 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	e00f      	b.n	8009c78 <FreeRTOS_closesocket+0x44>

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009c58:	f107 030c 	add.w	r3, r7, #12
 8009c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe fd41 	bl	80086e8 <xSendEventStructToIPTask>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <FreeRTOS_closesocket+0x40>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
            xResult = -1;
 8009c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e001      	b.n	8009c78 <FreeRTOS_closesocket+0x44>
        }
        else
        {
            xResult = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 8009c78:	697b      	ldr	r3, [r7, #20]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009c90:	2b06      	cmp	r3, #6
 8009c92:	d122      	bne.n	8009cda <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f005 fa2b 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	33d8      	adds	r3, #216	; 0xd8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f004 fa1e 	bl	800e0ec <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fd fd37 	bl	8007730 <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fd fd2e 	bl	8007730 <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f833 	bl	8009d40 <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d004      	beq.n	8009cec <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fa fd4a 	bl	8004780 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009cf2:	2b11      	cmp	r3, #17
 8009cf4:	d112      	bne.n	8009d1c <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8009cf6:	e00d      	b.n	8009d14 <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fd1f 	bl	8009742 <vCastPointerTo_NetworkBufferDescriptor_t>
 8009d04:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fa fd39 	bl	8004780 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f005 f9f4 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1ed      	bne.n	8009cf8 <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fa fc48 	bl	80045be <vEventGroupDelete>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fd fcfe 	bl	8007730 <vPortFree>

    return NULL;
 8009d34:	2300      	movs	r3, #0
} /* Tested */
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <prvTCPSetSocketCount>:
 *        all orphaned child-sockets.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8009d48:	4b33      	ldr	r3, [pc, #204]	; (8009e18 <prvTCPSetSocketCount+0xd8>)
 8009d4a:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d50:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d12e      	bne.n	8009dba <prvTCPSetSocketCount+0x7a>
        {
            for( pxIterator = listGET_NEXT( pxEnd );
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e025      	b.n	8009db0 <prvTCPSetSocketCount+0x70>
                 pxIterator != pxEnd; )
            {
                pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff fc99 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 8009d6e:	60b8      	str	r0, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.ucTCPState != ( uint8_t ) eTCP_LISTEN ) &&
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d017      	beq.n	8009db0 <prvTCPSetSocketCount+0x70>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                if( ( pxOtherSocket->u.xTCP.ucTCPState != ( uint8_t ) eTCP_LISTEN ) &&
 8009d84:	89fa      	ldrh	r2, [r7, #14]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d112      	bne.n	8009db0 <prvTCPSetSocketCount+0x70>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d107      	bne.n	8009daa <prvTCPSetSocketCount+0x6a>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <prvTCPSetSocketCount+0x70>
                {
                    vSocketClose( pxOtherSocket );
 8009daa:	68b8      	ldr	r0, [r7, #8]
 8009dac:	f7ff ff69 	bl	8009c82 <vSocketClose>
            for( pxIterator = listGET_NEXT( pxEnd );
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d1d5      	bne.n	8009d64 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 8009db8:	e029      	b.n	8009e0e <prvTCPSetSocketCount+0xce>
            for( pxIterator = listGET_NEXT( pxEnd );
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e021      	b.n	8009e06 <prvTCPSetSocketCount+0xc6>
                pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fc6a 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 8009dcc:	60b8      	str	r0, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d113      	bne.n	8009e00 <prvTCPSetSocketCount+0xc0>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8009ddc:	89fa      	ldrh	r2, [r7, #14]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d10e      	bne.n	8009e00 <prvTCPSetSocketCount+0xc0>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <prvTCPSetSocketCount+0xc0>
                    pxOtherSocket->u.xTCP.usChildCount--;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    break;
 8009dfc:	bf00      	nop
    }
 8009dfe:	e006      	b.n	8009e0e <prvTCPSetSocketCount+0xce>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d1d9      	bne.n	8009dc2 <prvTCPSetSocketCount+0x82>
    }
 8009e0e:	bf00      	nop
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	240094fc 	.word	0x240094fc

08009e1c <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009e2e:	2b06      	cmp	r3, #6
 8009e30:	d003      	beq.n	8009e3a <prvSockopt_so_buffer+0x1e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009e32:	f06f 0315 	mvn.w	r3, #21
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	e028      	b.n	8009e8c <prvSockopt_so_buffer+0x70>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d103      	bne.n	8009e48 <prvSockopt_so_buffer+0x2c>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <prvSockopt_so_buffer+0x3a>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d107      	bne.n	8009e5e <prvSockopt_so_buffer+0x42>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <prvSockopt_so_buffer+0x42>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009e56:	f06f 0315 	mvn.w	r3, #21
 8009e5a:	617b      	str	r3, [r7, #20]
 8009e5c:	e016      	b.n	8009e8c <prvSockopt_so_buffer+0x70>
        }
        else
        {
            ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d10b      	bne.n	8009e82 <prvSockopt_so_buffer+0x66>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009e70:	4619      	mov	r1, r3
 8009e72:	6938      	ldr	r0, [r7, #16]
 8009e74:	f7ff fb5a 	bl	800952c <FreeRTOS_round_up>
 8009e78:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	671a      	str	r2, [r3, #112]	; 0x70
 8009e80:	e002      	b.n	8009e88 <prvSockopt_so_buffer+0x6c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            xReturn = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8009e8c:	697b      	ldr	r3, [r7, #20]
    }
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009ea6:	f06f 0315 	mvn.w	r3, #21
 8009eaa:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	61bb      	str	r3, [r7, #24]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <FreeRTOS_setsockopt+0x26>
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebc:	d104      	bne.n	8009ec8 <FreeRTOS_setsockopt+0x30>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009ebe:	f06f 0315 	mvn.w	r3, #21
 8009ec2:	61fb      	str	r3, [r7, #28]
        return xReturn;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	e193      	b.n	800a1f0 <FreeRTOS_setsockopt+0x358>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b12      	cmp	r3, #18
 8009ecc:	f200 817a 	bhi.w	800a1c4 <FreeRTOS_setsockopt+0x32c>
 8009ed0:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <FreeRTOS_setsockopt+0x40>)
 8009ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed6:	bf00      	nop
 8009ed8:	08009f25 	.word	0x08009f25
 8009edc:	08009f33 	.word	0x08009f33
 8009ee0:	08009f5f 	.word	0x08009f5f
 8009ee4:	0800a1c5 	.word	0x0800a1c5
 8009ee8:	08009fdf 	.word	0x08009fdf
 8009eec:	08009fdf 	.word	0x08009fdf
 8009ef0:	0800a1c5 	.word	0x0800a1c5
 8009ef4:	0800a1c5 	.word	0x0800a1c5
 8009ef8:	0800a1c5 	.word	0x0800a1c5
 8009efc:	0800a1c5 	.word	0x0800a1c5
 8009f00:	0800a1c5 	.word	0x0800a1c5
 8009f04:	0800a099 	.word	0x0800a099
 8009f08:	0800a0d1 	.word	0x0800a0d1
 8009f0c:	08009fed 	.word	0x08009fed
 8009f10:	0800a109 	.word	0x0800a109
 8009f14:	0800a173 	.word	0x0800a173
 8009f18:	0800a1c5 	.word	0x0800a1c5
 8009f1c:	08009f91 	.word	0x08009f91
 8009f20:	08009f9d 	.word	0x08009f9d

    switch( lOptionName )
    {
        case FREERTOS_SO_RCVTIMEO:
            /* Receive time out. */
            pxSocket->xReceiveBlockTime = *( ( const TickType_t * ) pvOptionValue );
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	61da      	str	r2, [r3, #28]
            xReturn = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61fb      	str	r3, [r7, #28]
            break;
 8009f30:	e15d      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

        case FREERTOS_SO_SNDTIMEO:
            pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	621a      	str	r2, [r3, #32]

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009f40:	2b11      	cmp	r3, #17
 8009f42:	d109      	bne.n	8009f58 <FreeRTOS_setsockopt+0xc0>
            {
                /* The send time out is capped for the reason stated in the
                 * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
                 * in FreeRTOSIPConfig.h (assuming an official configuration file
                 * is being used. */
                if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d903      	bls.n	8009f58 <FreeRTOS_setsockopt+0xc0>
                {
                    pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f56:	621a      	str	r2, [r3, #32]
                /* For TCP socket, it isn't necessary to limit the blocking time
                 * because the FreeRTOS_send() function does not wait for a network
                 * buffer to become available. */
            }

            xReturn = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	61fb      	str	r3, [r7, #28]
            break;
 8009f5c:	e147      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
        case FREERTOS_SO_UDPCKSUM_OUT:

            /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
             * is anything else than NULL, the checksum generation will be turned on. */

            if( pvOptionValue == NULL )
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <FreeRTOS_setsockopt+0xe0>
            {
                pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009f6a:	f023 0302 	bic.w	r3, r3, #2
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8009f76:	e008      	b.n	8009f8a <FreeRTOS_setsockopt+0xf2>
            }
            else
            {
                pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009f7e:	f043 0302 	orr.w	r3, r3, #2
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            }

            xReturn = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	61fb      	str	r3, [r7, #28]
            break;
 8009f8e:	e12e      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                        /* Each socket can have a callback function that is executed
                         * when there is an event the socket's owner might want to
                         * process. */
                        /* The type cast of the pointer expression "A" to type "B" removes const qualifier from the pointed to type. */
                        pxSocket->pxUserWakeCallback = ( const SocketWakeupCallback_t ) pvOptionValue;
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	629a      	str	r2, [r3, #40]	; 0x28
                        xReturn = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
                        break;
 8009f9a:	e128      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                case FREERTOS_SO_SET_LOW_HIGH_WATER:
                   {
                       const LowHighWater_t * pxLowHighWater = ipPOINTER_CAST( const LowHighWater_t *, pvOptionValue );
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	617b      	str	r3, [r7, #20]

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	f040 8110 	bne.w	800a1cc <FreeRTOS_setsockopt+0x334>
                           /* It is not allowed to access 'pxSocket->u.xTCP'. */
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	f080 810b 	bcs.w	800a1d0 <FreeRTOS_setsockopt+0x338>
                           ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	f200 8104 	bhi.w	800a1d0 <FreeRTOS_setsockopt+0x338>
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
                       pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	665a      	str	r2, [r3, #100]	; 0x64
                       /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
                       pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	669a      	str	r2, [r3, #104]	; 0x68
                       xReturn = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61fb      	str	r3, [r7, #28]
                   }
                   break;
 8009fdc:	e107      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                    xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	69b8      	ldr	r0, [r7, #24]
 8009fe4:	f7ff ff1a 	bl	8009e1c <prvSockopt_so_buffer>
 8009fe8:	61f8      	str	r0, [r7, #28]
                    break;
 8009fea:	e100      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                   {
                       const WinProperties_t * pxProps;

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	f040 80ee 	bne.w	800a1d4 <FreeRTOS_setsockopt+0x33c>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f040 80e7 	bne.w	800a1d0 <FreeRTOS_setsockopt+0x338>
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a006:	2b00      	cmp	r3, #0
 800a008:	f040 80e2 	bne.w	800a1d0 <FreeRTOS_setsockopt+0x338>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       pxProps = ipPOINTER_CAST( const WinProperties_t *, pvOptionValue );
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	613b      	str	r3, [r7, #16]

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	461a      	mov	r2, r3
 800a014:	2104      	movs	r1, #4
 800a016:	69b8      	ldr	r0, [r7, #24]
 800a018:	f7ff ff00 	bl	8009e1c <prvSockopt_so_buffer>
 800a01c:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f040 80d9 	bne.w	800a1d8 <FreeRTOS_setsockopt+0x340>
                       {
                           break; /* will return an error. */
                       }

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3308      	adds	r3, #8
 800a02a:	461a      	mov	r2, r3
 800a02c:	2105      	movs	r1, #5
 800a02e:	69b8      	ldr	r0, [r7, #24]
 800a030:	f7ff fef4 	bl	8009e1c <prvSockopt_so_buffer>
 800a034:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f040 80cf 	bne.w	800a1dc <FreeRTOS_setsockopt+0x344>
                           break; /* will return an error. */
                       }

                       #if ( ipconfigUSE_TCP_WIN == 1 )
                           {
                               pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	461a      	mov	r2, r3
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                               pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	461a      	mov	r2, r3
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                           }
                       #endif

                       /* In case the socket has already initialised its tcpWin,
                        * adapt the window size parameters */
                       if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d015      	beq.n	800a092 <FreeRTOS_setsockopt+0x1fa>
                       {
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usMSS;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800a072:	fb02 f203 	mul.w	r2, r2, r3
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usMSS;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800a088:	fb02 f203 	mul.w	r2, r2, r3
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                       }
                   }

                    xReturn = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]
                    break;
 800a096:	e0aa      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	f040 809e 	bne.w	800a1e0 <FreeRTOS_setsockopt+0x348>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <FreeRTOS_setsockopt+0x224>
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a0b2:	f043 0308 	orr.w	r3, r3, #8
 800a0b6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800a0ba:	e006      	b.n	800a0ca <FreeRTOS_setsockopt+0x232>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a0c2:	f36f 03c3 	bfc	r3, #3, #1
 800a0c6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                       }
                   }
                    xReturn = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
                    break;
 800a0ce:	e08e      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	f040 8084 	bne.w	800a1e4 <FreeRTOS_setsockopt+0x34c>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <FreeRTOS_setsockopt+0x25c>
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a0ea:	f043 0310 	orr.w	r3, r3, #16
 800a0ee:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800a0f2:	e006      	b.n	800a102 <FreeRTOS_setsockopt+0x26a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a0fa:	f36f 1304 	bfc	r3, #4, #1
 800a0fe:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                       }
                   }
                    xReturn = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	61fb      	str	r3, [r7, #28]
                    break;
 800a106:	e072      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a10e:	2b06      	cmp	r3, #6
 800a110:	d16a      	bne.n	800a1e8 <FreeRTOS_setsockopt+0x350>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d007      	beq.n	800a12a <FreeRTOS_setsockopt+0x292>
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE;
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 800a120:	f043 0302 	orr.w	r3, r3, #2
 800a124:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
 800a128:	e006      	b.n	800a138 <FreeRTOS_setsockopt+0x2a0>
                       }
                       else
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE;
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 800a130:	f36f 0341 	bfc	r3, #1, #1
 800a134:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
                       }

                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d111      	bne.n	800a16c <FreeRTOS_setsockopt+0x2d4>
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d90c      	bls.n	800a16c <FreeRTOS_setsockopt+0x2d4>
                           ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800a152:	69b8      	ldr	r0, [r7, #24]
 800a154:	f000 fe5c 	bl	800ae10 <FreeRTOS_tx_size>
 800a158:	4603      	mov	r3, r0
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d006      	beq.n	800a16c <FreeRTOS_setsockopt+0x2d4>
                       {
                           pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2201      	movs	r2, #1
 800a162:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                           ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800a166:	2006      	movs	r0, #6
 800a168:	f7fe faa8 	bl	80086bc <xSendEventToIPTask>
                       }
                   }
                    xReturn = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	61fb      	str	r3, [r7, #28]
                    break;
 800a170:	e03d      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a178:	2b06      	cmp	r3, #6
 800a17a:	d137      	bne.n	800a1ec <FreeRTOS_setsockopt+0x354>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <FreeRTOS_setsockopt+0x2fc>
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdTRUE;
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800a18a:	f043 0304 	orr.w	r3, r3, #4
 800a18e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800a192:	e006      	b.n	800a1a2 <FreeRTOS_setsockopt+0x30a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdFALSE;
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800a19a:	f36f 0382 	bfc	r3, #2, #1
 800a19e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                       }

                       pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800a1a8:	f043 0301 	orr.w	r3, r3, #1
 800a1ac:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                       pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                       ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800a1b8:	2006      	movs	r0, #6
 800a1ba:	f7fe fa7f 	bl	80086bc <xSendEventToIPTask>
                   }
                    xReturn = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61fb      	str	r3, [r7, #28]
                    break;
 800a1c2:	e014      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
            #endif /* ipconfigUSE_TCP == 1 */

        default:
            /* No other options are handled. */
            xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800a1c4:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800a1c8:	61fb      	str	r3, [r7, #28]
            break;
 800a1ca:	e010      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1cc:	bf00      	nop
 800a1ce:	e00e      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
    }

    return xReturn;
 800a1d0:	bf00      	nop
 800a1d2:	e00c      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1d4:	bf00      	nop
 800a1d6:	e00a      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return an error. */
 800a1d8:	bf00      	nop
 800a1da:	e008      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return an error. */
 800a1dc:	bf00      	nop
 800a1de:	e006      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1e0:	bf00      	nop
 800a1e2:	e004      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1e4:	bf00      	nop
 800a1e6:	e002      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1e8:	bf00      	nop
 800a1ea:	e000      	b.n	800a1ee <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800a1ec:	bf00      	nop
    return xReturn;
 800a1ee:	69fb      	ldr	r3, [r7, #28]
} /* Tested */
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800a200:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800a204:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800a206:	89fb      	ldrh	r3, [r7, #14]
 800a208:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b06      	cmp	r3, #6
 800a216:	d102      	bne.n	800a21e <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800a218:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <prvGetPrivatePortNumber+0xa8>)
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	e001      	b.n	800a222 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800a21e:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <prvGetPrivatePortNumber+0xac>)
 800a220:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4618      	mov	r0, r3
 800a228:	f7f6 fa34 	bl	8000694 <xApplicationGetRandomNumber>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d030      	beq.n	800a294 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800a236:	89fa      	ldrh	r2, [r7, #14]
 800a238:	fbb3 f1f2 	udiv	r1, r3, r2
 800a23c:	fb02 f201 	mul.w	r2, r2, r1
 800a240:	1a9b      	subs	r3, r3, r2
 800a242:	b29b      	uxth	r3, r3
        usResult =
 800a244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a248:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800a24a:	8abb      	ldrh	r3, [r7, #20]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	b21a      	sxth	r2, r3
 800a250:	8abb      	ldrh	r3, [r7, #20]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	b29b      	uxth	r3, r3
 800a256:	b21b      	sxth	r3, r3
 800a258:	4313      	orrs	r3, r2
 800a25a:	b21b      	sxth	r3, r3
 800a25c:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800a25e:	4619      	mov	r1, r3
 800a260:	6938      	ldr	r0, [r7, #16]
 800a262:	f000 f821 	bl	800a2a8 <pxListFindListItemWithValue>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800a26c:	8abb      	ldrh	r3, [r7, #20]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	b21a      	sxth	r2, r3
 800a272:	8abb      	ldrh	r3, [r7, #20]
 800a274:	0a1b      	lsrs	r3, r3, #8
 800a276:	b29b      	uxth	r3, r3
 800a278:	b21b      	sxth	r3, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b21b      	sxth	r3, r3
 800a27e:	82bb      	strh	r3, [r7, #20]
            break;
 800a280:	e009      	b.n	800a296 <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800a286:	8afb      	ldrh	r3, [r7, #22]
 800a288:	3b01      	subs	r3, #1
 800a28a:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800a28c:	8afb      	ldrh	r3, [r7, #22]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1c7      	bne.n	800a222 <prvGetPrivatePortNumber+0x2a>
 800a292:	e000      	b.n	800a296 <prvGetPrivatePortNumber+0x9e>
            break;
 800a294:	bf00      	nop

    return usResult;
 800a296:	8abb      	ldrh	r3, [r7, #20]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	240094f4 	.word	0x240094f4
 800a2a4:	24009508 	.word	0x24009508

0800a2a8 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800a2b6:	f7ff f8fd 	bl	80094b4 <xIPIsNetworkTaskReady>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d018      	beq.n	800a2f2 <pxListFindListItemWithValue+0x4a>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d015      	beq.n	800a2f2 <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	e00a      	b.n	800a2ea <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d102      	bne.n	800a2e4 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	617b      	str	r3, [r7, #20]
                break;
 800a2e2:	e006      	b.n	800a2f2 <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d1f0      	bne.n	800a2d4 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800a2f2:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4810      	ldr	r0, [pc, #64]	; (800a34c <pxUDPSocketLookup+0x50>)
 800a30c:	f7ff ffcc 	bl	800a2a8 <pxListFindListItemWithValue>
 800a310:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d013      	beq.n	800a340 <pxUDPSocketLookup+0x44>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff f9bf 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800a322:	6178      	str	r0, [r7, #20]
        configASSERT( pxSocket != NULL );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <pxUDPSocketLookup+0x44>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	60fb      	str	r3, [r7, #12]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <pxUDPSocketLookup+0x42>
    }

    return pxSocket;
 800a340:	697b      	ldr	r3, [r7, #20]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	24009508 	.word	0x24009508

0800a350 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
        {
            if( pxSocket->pxUserWakeCallback != NULL )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <vSocketWakeUpUser+0x18>
            {
                pxSocket->pxUserWakeCallback( pxSocket );
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d015      	beq.n	800a39c <vSocketWakeUpUser+0x4c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	0a1b      	lsrs	r3, r3, #8
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00c      	beq.n	800a39c <vSocketWakeUpUser+0x4c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	635a      	str	r2, [r3, #52]	; 0x34
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68f9      	ldr	r1, [r7, #12]
 800a396:	4618      	mov	r0, r3
 800a398:	f7fa f886 	bl	80044a8 <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00b      	beq.n	800a3c8 <vSocketWakeUpUser+0x78>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <vSocketWakeUpUser+0x78>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fa f870 	bl	80044a8 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b090      	sub	sp, #64	; 0x40
 800a3da:	af02      	add	r7, sp, #8
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE, xAsk = pdFALSE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	633b      	str	r3, [r7, #48]	; 0x30
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	2106      	movs	r1, #6
 800a3f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f8:	f7ff f9b9 	bl	800976e <prvValidSocket>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d103      	bne.n	800a40a <FreeRTOS_accept+0x34>
        {
            /* Not a valid socket or wrong type */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
 800a408:	e0ae      	b.n	800a568 <FreeRTOS_accept+0x192>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <FreeRTOS_accept+0x56>
                 ( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eTCP_LISTEN ) )
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800a420:	2b01      	cmp	r3, #1
 800a422:	d003      	beq.n	800a42c <FreeRTOS_accept+0x56>
        {
            /* Parent socket is not in listening mode */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800a424:	f04f 33ff 	mov.w	r3, #4294967295
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
 800a42a:	e09d      	b.n	800a568 <FreeRTOS_accept+0x192>
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                /* Is there a new client? */
                vTaskSuspendAll();
 800a42c:	f7fb fb80 	bl	8005b30 <vTaskSuspendAll>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a436:	f003 0308 	and.w	r3, r3, #8
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <FreeRTOS_accept+0x72>
                    {
                        pxClientSocket = pxSocket->u.xTCP.pxPeerSocket;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
 800a446:	e001      	b.n	800a44c <FreeRTOS_accept+0x76>
                    }
                    else
                    {
                        pxClientSocket = pxSocket;
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    if( pxClientSocket != NULL )
 800a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d014      	beq.n	800a47c <FreeRTOS_accept+0xa6>
                    {
                        pxSocket->u.xTCP.pxPeerSocket = NULL;
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2200      	movs	r2, #0
 800a456:	655a      	str	r2, [r3, #84]	; 0x54

                        /* Is it still not taken ? */
                        if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800a458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <FreeRTOS_accept+0xa2>
                        {
                            pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE;
 800a468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a46a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a46e:	f36f 0341 	bfc	r3, #1, #1
 800a472:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800a476:	e001      	b.n	800a47c <FreeRTOS_accept+0xa6>
                        }
                        else
                        {
                            pxClientSocket = NULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }
                }
                ( void ) xTaskResumeAll();
 800a47c:	f7fb fb66 	bl	8005b4c <xTaskResumeAll>

                if( pxClientSocket != NULL )
 800a480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a482:	2b00      	cmp	r3, #0
 800a484:	d035      	beq.n	800a4f2 <FreeRTOS_accept+0x11c>
                {
                    if( pxAddress != NULL )
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d022      	beq.n	800a4d2 <FreeRTOS_accept+0xfc>
                    {
                        /* IP address of remote machine. */
                        pxAddress->sin_addr = FreeRTOS_ntohl( pxClientSocket->u.xTCP.ulRemoteIP );
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	061a      	lsls	r2, r3, #24
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a49c:	431a      	orrs	r2, r3
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ae:	0e1b      	lsrs	r3, r3, #24
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	605a      	str	r2, [r3, #4]

                        /* Port on remote machine. */
                        pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	b21a      	sxth	r2, r3
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b21b      	sxth	r3, r3
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	b21b      	sxth	r3, r3
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	805a      	strh	r2, [r3, #2]
                    }

                    if( pxAddressLength != NULL )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <FreeRTOS_accept+0x108>
                    {
                        *pxAddressLength = sizeof( *pxAddress );
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2208      	movs	r2, #8
 800a4dc:	601a      	str	r2, [r3, #0]
                    }

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <FreeRTOS_accept+0x11c>
                    {
                        xAsk = pdTRUE;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    }
                }

                if( xAsk != pdFALSE )
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <FreeRTOS_accept+0x138>
                {
                    /* Ask to set an event in 'xEventGroup' as soon as a new
                     * client gets connected for this listening socket. */
                    xAskEvent.eEventType = eTCPAcceptEvent;
 800a4f8:	2307      	movs	r3, #7
 800a4fa:	753b      	strb	r3, [r7, #20]
                    xAskEvent.pvData = pxSocket;
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	61bb      	str	r3, [r7, #24]
                    ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	f04f 31ff 	mov.w	r1, #4294967295
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe f8ed 	bl	80086e8 <xSendEventStructToIPTask>
                }

                if( pxClientSocket != NULL )
 800a50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a510:	2b00      	cmp	r3, #0
 800a512:	d124      	bne.n	800a55e <FreeRTOS_accept+0x188>
                {
                    break;
                }

                if( xTimed == pdFALSE )
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10c      	bne.n	800a534 <FreeRTOS_accept+0x15e>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24

                    if( xRemainingTime == ( TickType_t ) 0 )
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01d      	beq.n	800a562 <FreeRTOS_accept+0x18c>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800a52a:	f107 031c 	add.w	r3, r7, #28
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fb fe2a 	bl	8006188 <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a534:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a538:	f107 031c 	add.w	r3, r7, #28
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fb fe5e 	bl	8006200 <xTaskCheckForTimeOut>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <FreeRTOS_accept+0x190>
                {
                    break;
                }

                /* Go sleeping until we get any down-stream event */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	6858      	ldr	r0, [r3, #4]
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	2201      	movs	r2, #1
 800a556:	2104      	movs	r1, #4
 800a558:	f7f9 fea0 	bl	800429c <xEventGroupWaitBits>
                vTaskSuspendAll();
 800a55c:	e766      	b.n	800a42c <FreeRTOS_accept+0x56>
                    break;
 800a55e:	bf00      	nop
 800a560:	e002      	b.n	800a568 <FreeRTOS_accept+0x192>
                        break;
 800a562:	bf00      	nop
 800a564:	e000      	b.n	800a568 <FreeRTOS_accept+0x192>
                    break;
 800a566:	bf00      	nop
            }
        }

        return pxClientSocket;
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800a56a:	4618      	mov	r0, r3
 800a56c:	3738      	adds	r7, #56	; 0x38
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800a572:	b580      	push	{r7, lr}
 800a574:	b090      	sub	sp, #64	; 0x40
 800a576:	af02      	add	r7, sp, #8
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	633b      	str	r3, [r7, #48]	; 0x30
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800a58c:	2201      	movs	r2, #1
 800a58e:	2106      	movs	r1, #6
 800a590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a592:	f7ff f8ec 	bl	800976e <prvValidSocket>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800a59c:	f06f 0315 	mvn.w	r3, #21
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a2:	e0c4      	b.n	800a72e <FreeRTOS_recv+0x1bc>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d006      	beq.n	800a5bc <FreeRTOS_recv+0x4a>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d103      	bne.n	800a5bc <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800a5b4:	f06f 0315 	mvn.w	r3, #21
 800a5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ba:	e0b8      	b.n	800a72e <FreeRTOS_recv+0x1bc>
        }
        else
        {
            if( pxSocket->u.xTCP.rxStream != NULL )
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d007      	beq.n	800a5d4 <FreeRTOS_recv+0x62>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fe6c 	bl	800b2a6 <uxStreamBufferGetSize>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d2:	e058      	b.n	800a686 <FreeRTOS_recv+0x114>
            }
            else
            {
                xByteCount = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            while( xByteCount == 0 )
 800a5d8:	e055      	b.n	800a686 <FreeRTOS_recv+0x114>
            {
                switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d004      	beq.n	800a5ee <FreeRTOS_recv+0x7c>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	db12      	blt.n	800a60e <FreeRTOS_recv+0x9c>
 800a5e8:	3b08      	subs	r3, #8
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d80f      	bhi.n	800a60e <FreeRTOS_recv+0x9c>
                {
                    case eCLOSED:
                    case eCLOSE_WAIT: /* (server + client) waiting for a connection termination request from the local user. */
                    case eCLOSING:    /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */

                        if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <FreeRTOS_recv+0x94>
                        {
                            /* The no-memory error has priority above the non-connected error.
                             * Both are fatal and will lead to closing the socket. */
                            xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800a5fe:	f06f 030b 	mvn.w	r3, #11
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
                        else
                        {
                            xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
                        }

                        break;
 800a604:	e004      	b.n	800a610 <FreeRTOS_recv+0x9e>
                            xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800a606:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
                        break;
 800a60c:	e000      	b.n	800a610 <FreeRTOS_recv+0x9e>
                    case eFIN_WAIT_2:
                    case eLAST_ACK:
                    case eTIME_WAIT:
                    default:
                        /* Nothing. */
                        break;
 800a60e:	bf00      	nop
                }

                if( xByteCount < 0 )
 800a610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a612:	2b00      	cmp	r3, #0
 800a614:	db3b      	blt.n	800a68e <FreeRTOS_recv+0x11c>
                {
                    break;
                }

                if( xTimed == pdFALSE )
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d111      	bne.n	800a640 <FreeRTOS_recv+0xce>
                {
                    /* Only in the first round, check for non-blocking. */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	61fb      	str	r3, [r7, #28]

                    if( xRemainingTime == ( TickType_t ) 0 )
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d034      	beq.n	800a692 <FreeRTOS_recv+0x120>
                            }
                        #endif /* ipconfigSUPPORT_SIGNALS */
                        break;
                    }

                    if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f003 0310 	and.w	r3, r3, #16
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d131      	bne.n	800a696 <FreeRTOS_recv+0x124>
                    {
                        break;
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800a632:	2301      	movs	r3, #1
 800a634:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Fetch the current time. */
                    vTaskSetTimeOutState( &xTimeOut );
 800a636:	f107 0314 	add.w	r3, r7, #20
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fb fda4 	bl	8006188 <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a640:	f107 021c 	add.w	r2, r7, #28
 800a644:	f107 0314 	add.w	r3, r7, #20
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fb fdd8 	bl	8006200 <xTaskCheckForTimeOut>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d121      	bne.n	800a69a <FreeRTOS_recv+0x128>
                {
                    break;
                }

                /* Block until there is a down-stream event. */
                xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	6858      	ldr	r0, [r3, #4]
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	2300      	movs	r3, #0
 800a660:	2201      	movs	r2, #1
 800a662:	2161      	movs	r1, #97	; 0x61
 800a664:	f7f9 fe1a 	bl	800429c <xEventGroupWaitBits>
 800a668:	62b8      	str	r0, [r7, #40]	; 0x28
                    {
                        ( void ) xEventBits;
                    }
                #endif /* ipconfigSUPPORT_SIGNALS */

                if( pxSocket->u.xTCP.rxStream != NULL )
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <FreeRTOS_recv+0x110>
                {
                    xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fe15 	bl	800b2a6 <uxStreamBufferGetSize>
 800a67c:	4603      	mov	r3, r0
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
 800a680:	e001      	b.n	800a686 <FreeRTOS_recv+0x114>
                }
                else
                {
                    xByteCount = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
            while( xByteCount == 0 )
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0a6      	beq.n	800a5da <FreeRTOS_recv+0x68>
 800a68c:	e006      	b.n	800a69c <FreeRTOS_recv+0x12a>
                    break;
 800a68e:	bf00      	nop
 800a690:	e004      	b.n	800a69c <FreeRTOS_recv+0x12a>
                        break;
 800a692:	bf00      	nop
 800a694:	e002      	b.n	800a69c <FreeRTOS_recv+0x12a>
                        break;
 800a696:	bf00      	nop
 800a698:	e000      	b.n	800a69c <FreeRTOS_recv+0x12a>
                    break;
 800a69a:	bf00      	nop
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800a69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dd45      	ble.n	800a72e <FreeRTOS_recv+0x1bc>
            {
                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d138      	bne.n	800a71e <FreeRTOS_recv+0x1ac>
                {
                    BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	089b      	lsrs	r3, r3, #2
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24

                    xByteCount = ( BaseType_t )
                                 uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	f000 ff29 	bl	800b51a <uxStreamBufferGet>
 800a6c8:	4603      	mov	r3, r0
                    xByteCount = ( BaseType_t )
 800a6ca:	637b      	str	r3, [r7, #52]	; 0x34
                                                    0UL,
                                                    ipPOINTER_CAST( uint8_t *, pvBuffer ),
                                                    ( size_t ) uxBufferLength,
                                                    xIsPeek );

                    if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d028      	beq.n	800a72e <FreeRTOS_recv+0x1bc>
                    {
                        /* We had reached the low-water mark, now see if the flag
                         * can be cleared */
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fdcc 	bl	800b27e <uxStreamBufferFrontSpace>
 800a6e6:	6238      	str	r0, [r7, #32]

                        if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ec:	6a3a      	ldr	r2, [r7, #32]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d31d      	bcc.n	800a72e <FreeRTOS_recv+0x1bc>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 800a6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6f4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a6f8:	f36f 13c7 	bfc	r3, #7, #1
 800a6fc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800a700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a702:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800a706:	f043 0301 	orr.w	r3, r3, #1
 800a70a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800a716:	2006      	movs	r0, #6
 800a718:	f7fd ffd0 	bl	80086bc <xSendEventToIPTask>
 800a71c:	e007      	b.n	800a72e <FreeRTOS_recv+0x1bc>
                    }
                }
                else
                {
                    /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
                    xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ipPOINTER_CAST( uint8_t * *, pvBuffer ) );
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fe58 	bl	800b3da <uxStreamBufferGetPtr>
 800a72a:	4603      	mov	r3, r0
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34
            {
                /* Nothing. */
            }
        } /* prvValidSocket() */

        return xByteCount;
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800a730:	4618      	mov	r0, r3
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800a742:	2301      	movs	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800a746:	2201      	movs	r2, #1
 800a748:	2106      	movs	r1, #6
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff f80f 	bl	800976e <prvValidSocket>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800a756:	f06f 0315 	mvn.w	r3, #21
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e03e      	b.n	800a7dc <prvTCPSendCheck+0xa4>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800a76e:	f06f 030b 	mvn.w	r3, #11
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e032      	b.n	800a7dc <prvTCPSendCheck+0xa4>
        }
        else if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) ||
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d009      	beq.n	800a794 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) ||
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
        else if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) ||
 800a786:	2b08      	cmp	r3, #8
 800a788:	d004      	beq.n	800a794 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSING ) )
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
                 ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) ||
 800a790:	2b09      	cmp	r3, #9
 800a792:	d103      	bne.n	800a79c <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800a794:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	e01f      	b.n	800a7dc <prvTCPSendCheck+0xa4>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e014      	b.n	800a7dc <prvTCPSendCheck+0xa4>
        }
        else if( uxDataLength == 0UL )
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e00e      	b.n	800a7dc <prvTCPSendCheck+0xa4>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <prvTCPSendCheck+0xa4>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa2b 	bl	800ac24 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <prvTCPSendCheck+0xa4>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800a7d6:	f06f 030b 	mvn.w	r3, #11
 800a7da:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
    }
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b090      	sub	sp, #64	; 0x40
 800a7ea:	af02      	add	r7, sp, #8
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	607a      	str	r2, [r7, #4]
 800a7f2:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800a7f4:	f06f 0315 	mvn.w	r3, #21
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
        BaseType_t xBytesLeft;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	623b      	str	r3, [r7, #32]
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
        TimeOut_t xTimeOut;
        BaseType_t xCloseAfterSend;
        const uint8_t * pucSource = ipPOINTER_CAST( const uint8_t *, pvBuffer );
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	627b      	str	r3, [r7, #36]	; 0x24

        /* Prevent compiler warnings about unused parameters.  The parameter
         * may be used in future versions. */
        ( void ) xFlags;

        if( pvBuffer != NULL )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <FreeRTOS_send+0x30>
        {
            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	6a38      	ldr	r0, [r7, #32]
 800a810:	f7ff ff92 	bl	800a738 <prvTCPSendCheck>
 800a814:	6378      	str	r0, [r7, #52]	; 0x34
        }

        if( xByteCount > 0 )
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f340 80a4 	ble.w	800a966 <FreeRTOS_send+0x180>
        {
            /* xBytesLeft is number of bytes to send, will count to zero. */
            xBytesLeft = ( BaseType_t ) uxDataLength;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	633b      	str	r3, [r7, #48]	; 0x30

            /* xByteCount is number of bytes that can be sent now. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fd15 	bl	800b256 <uxStreamBufferGetSpace>
 800a82c:	4603      	mov	r3, r0
 800a82e:	637b      	str	r3, [r7, #52]	; 0x34

            /* While there are still bytes to be sent. */
            while( xBytesLeft > 0 )
 800a830:	e07b      	b.n	800a92a <FreeRTOS_send+0x144>
            {
                /* If txStream has space. */
                if( xByteCount > 0 )
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	2b00      	cmp	r3, #0
 800a836:	dd47      	ble.n	800a8c8 <FreeRTOS_send+0xe2>
                {
                    /* Don't send more than necessary. */
                    if( xByteCount > xBytesLeft )
 800a838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	429a      	cmp	r2, r3
 800a83e:	dd01      	ble.n	800a844 <FreeRTOS_send+0x5e>
                    {
                        xByteCount = xBytesLeft;
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* Is the close-after-send flag set and is this really the
                     * last transmission? */
                    if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a84a:	f003 0310 	and.w	r3, r3, #16
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <FreeRTOS_send+0x7c>
 800a854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	429a      	cmp	r2, r3
 800a85a:	d102      	bne.n	800a862 <FreeRTOS_send+0x7c>
                    {
                        xCloseAfterSend = pdTRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a860:	e001      	b.n	800a866 <FreeRTOS_send+0x80>
                    }
                    else
                    {
                        xCloseAfterSend = pdFALSE;
 800a862:	2300      	movs	r3, #0
 800a864:	62bb      	str	r3, [r7, #40]	; 0x28
                     * When the last data packet is being sent out, a FIN flag will
                     * be included to let the peer know that no more data is to be
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                    if( xCloseAfterSend != pdFALSE )
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d008      	beq.n	800a87e <FreeRTOS_send+0x98>
                    {
                        /* Now suspend the scheduler: sending the last data and
                         * setting bCloseRequested must be done together */
                        vTaskSuspendAll();
 800a86c:	f7fb f960 	bl	8005b30 <vTaskSuspendAll>
                        pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 800a870:	6a3a      	ldr	r2, [r7, #32]
 800a872:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800a876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                    }

                    xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a886:	2100      	movs	r1, #0
 800a888:	f000 fdc7 	bl	800b41a <uxStreamBufferAdd>
 800a88c:	4603      	mov	r3, r0
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34

                    if( xCloseAfterSend != pdFALSE )
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <FreeRTOS_send+0xb4>
                    {
                        /* Now when the IP-task transmits the data, it will also
                         * see that bCloseRequested is true and include the FIN
                         * flag to start closure of the connection. */
                        ( void ) xTaskResumeAll();
 800a896:	f7fb f959 	bl	8005b4c <xTaskResumeAll>
                    }

                    /* Send a message to the IP-task so it can work on this
                    * socket.  Data is sent, let the IP-task work on it. */
                    pxSocket->u.xTCP.usTimeout = 1U;
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                    if( xIsCallingFromIPTask() == pdFALSE )
 800a8a2:	f7fd fce1 	bl	8008268 <xIsCallingFromIPTask>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <FreeRTOS_send+0xcc>
                    {
                        /* Only send a TCP timer event when not called from the
                         * IP-task. */
                        ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800a8ac:	2006      	movs	r0, #6
 800a8ae:	f7fd ff05 	bl	80086bc <xSendEventToIPTask>
                    }

                    xBytesLeft -= xByteCount;
 800a8b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	633b      	str	r3, [r7, #48]	; 0x30

                    if( xBytesLeft == 0 )
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d038      	beq.n	800a932 <FreeRTOS_send+0x14c>
                        break;
                    }

                    /* As there are still bytes left to be sent, increase the
                     * data pointer. */
                    pucSource = &( pucSource[ xByteCount ] );
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c4:	4413      	add	r3, r2
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Not all bytes have been sent. In case the socket is marked as
                 * blocking sleep for a while. */
                if( xTimed == pdFALSE )
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d112      	bne.n	800a8f4 <FreeRTOS_send+0x10e>
                {
                    /* Only in the first round, check for non-blocking. */
                    xRemainingTime = pxSocket->xSendBlockTime;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	61fb      	str	r3, [r7, #28]
                                xRemainingTime = ( TickType_t ) 0;
                            }
                        }
                    #endif /* ipconfigUSE_CALLBACKS */

                    if( xRemainingTime == ( TickType_t ) 0 )
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d02d      	beq.n	800a936 <FreeRTOS_send+0x150>
                    {
                        break;
                    }

                    if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d12a      	bne.n	800a93a <FreeRTOS_send+0x154>
                    {
                        break;
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Fetch the current time. */
                    vTaskSetTimeOutState( &xTimeOut );
 800a8e8:	f107 0314 	add.w	r3, r7, #20
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fb fc4b 	bl	8006188 <vTaskSetTimeOutState>
 800a8f2:	e00a      	b.n	800a90a <FreeRTOS_send+0x124>
                }
                else
                {
                    /* Has the timeout been reached? */
                    if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a8f4:	f107 021c 	add.w	r2, r7, #28
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fb fc7e 	bl	8006200 <xTaskCheckForTimeOut>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d119      	bne.n	800a93e <FreeRTOS_send+0x158>
                        break;
                    }
                }

                /* Go sleeping until down-stream events are received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	6858      	ldr	r0, [r3, #4]
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	2300      	movs	r3, #0
 800a914:	2201      	movs	r2, #1
 800a916:	2122      	movs	r1, #34	; 0x22
 800a918:	f7f9 fcc0 	bl	800429c <xEventGroupWaitBits>
                                              pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

                xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fc98 	bl	800b256 <uxStreamBufferGetSpace>
 800a926:	4603      	mov	r3, r0
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
            while( xBytesLeft > 0 )
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dc80      	bgt.n	800a832 <FreeRTOS_send+0x4c>
 800a930:	e006      	b.n	800a940 <FreeRTOS_send+0x15a>
                        break;
 800a932:	bf00      	nop
 800a934:	e004      	b.n	800a940 <FreeRTOS_send+0x15a>
                        break;
 800a936:	bf00      	nop
 800a938:	e002      	b.n	800a940 <FreeRTOS_send+0x15a>
                        break;
 800a93a:	bf00      	nop
 800a93c:	e000      	b.n	800a940 <FreeRTOS_send+0x15a>
                        break;
 800a93e:	bf00      	nop
            }

            /* How much was actually sent? */
            xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	637b      	str	r3, [r7, #52]	; 0x34

            if( xByteCount == 0 )
 800a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10b      	bne.n	800a966 <FreeRTOS_send+0x180>
            {
                if( pxSocket->u.xTCP.ucTCPState > ( uint8_t ) eESTABLISHED )
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a954:	2b05      	cmp	r3, #5
 800a956:	d903      	bls.n	800a960 <FreeRTOS_send+0x17a>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800a958:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a95c:	637b      	str	r3, [r7, #52]	; 0x34
 800a95e:	e002      	b.n	800a966 <FreeRTOS_send+0x180>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.ulRemoteIP,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800a960:	f06f 031b 	mvn.w	r3, #27
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }
        }

        return xByteCount;
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800a968:	4618      	mov	r0, r3
 800a96a:	3738      	adds	r7, #56	; 0x38
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <FreeRTOS_listen>:
 * @return 0 in case of success, or else a negative error code is
 *         returned.
 */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800a982:	2201      	movs	r2, #1
 800a984:	2106      	movs	r1, #6
 800a986:	68b8      	ldr	r0, [r7, #8]
 800a988:	f7fe fef1 	bl	800976e <prvValidSocket>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800a992:	f06f 035e 	mvn.w	r3, #94	; 0x5e
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	e051      	b.n	800aa3e <FreeRTOS_listen+0xce>
        }
        else if( ( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED ) && ( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSE_WAIT ) )
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <FreeRTOS_listen+0x46>
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9aa:	2b08      	cmp	r3, #8
 800a9ac:	d003      	beq.n	800a9b6 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800a9ae:	f06f 035e 	mvn.w	r3, #94	; 0x5e
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e043      	b.n	800aa3e <FreeRTOS_listen+0xce>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a9bc:	f7fe fd96 	bl	80094ec <FreeRTOS_min_int32>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02d      	beq.n	800aa36 <FreeRTOS_listen+0xc6>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <FreeRTOS_listen+0x7c>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fc85 	bl	800b2f6 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d004      	beq.n	800a9fe <FreeRTOS_listen+0x8e>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fc7c 	bl	800b2f6 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	3382      	adds	r3, #130	; 0x82
 800aa02:	2246      	movs	r2, #70	; 0x46
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f007 f895 	bl	8011b36 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	33d8      	adds	r3, #216	; 0xd8
 800aa10:	22c0      	movs	r2, #192	; 0xc0
 800aa12:	2100      	movs	r1, #0
 800aa14:	4618      	mov	r0, r3
 800aa16:	f007 f88e 	bl	8011b36 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	3340      	adds	r3, #64	; 0x40
 800aa1e:	2204      	movs	r2, #4
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f007 f887 	bl	8011b36 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800aa2e:	f043 0308 	orr.w	r3, r3, #8
 800aa32:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800aa36:	2101      	movs	r1, #1
 800aa38:	68b8      	ldr	r0, [r7, #8]
 800aa3a:	f001 fc5f 	bl	800c2fc <vTCPStateChange>
        }

        return xResult;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
    }
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800aa56:	2201      	movs	r2, #1
 800aa58:	2106      	movs	r1, #6
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f7fe fe87 	bl	800976e <prvValidSocket>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800aa66:	f06f 035e 	mvn.w	r3, #94	; 0x5e
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	e018      	b.n	800aaa0 <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eESTABLISHED )
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa74:	2b05      	cmp	r3, #5
 800aa76:	d003      	beq.n	800aa80 <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800aa78:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e00f      	b.n	800aaa0 <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800aa86:	f043 0320 	orr.w	r3, r3, #32
 800aa8a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800aa96:	2006      	movs	r0, #6
 800aa98:	f7fd fe10 	bl	80086bc <xSendEventToIPTask>
            xResult = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
    }
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800aab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 800aaba:	f7fb f8e5 	bl	8005c88 <xTaskGetTickCount>
 800aabe:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800aac0:	4b32      	ldr	r3, [pc, #200]	; (800ab8c <xTCPTimerCheck+0xe0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800aaca:	4b31      	ldr	r3, [pc, #196]	; (800ab90 <xTCPTimerCheck+0xe4>)
 800aacc:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800aace:	4b31      	ldr	r3, [pc, #196]	; (800ab94 <xTCPTimerCheck+0xe8>)
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800aad4:	4a2d      	ldr	r2, [pc, #180]	; (800ab8c <xTCPTimerCheck+0xe0>)
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d14c      	bne.n	800ab7a <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 800aae0:	2301      	movs	r3, #1
 800aae2:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800aae4:	e049      	b.n	800ab7a <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fdd8 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800aaf0:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d100      	bne.n	800ab04 <xTCPTimerCheck+0x58>
            {
                continue;
 800ab02:	e03a      	b.n	800ab7a <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d20a      	bcs.n	800ab28 <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab26:	e00b      	b.n	800ab40 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800ab30:	6938      	ldr	r0, [r7, #16]
 800ab32:	f000 fde9 	bl	800b708 <xTCPSocketCheck>
 800ab36:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da00      	bge.n	800ab40 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 800ab3e:	e01c      	b.n	800ab7a <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d008      	beq.n	800ab5a <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800ab4e:	6938      	ldr	r0, [r7, #16]
 800ab50:	f7ff fbfe 	bl	800a350 <vSocketWakeUpUser>
 800ab54:	e001      	b.n	800ab5a <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00a      	beq.n	800ab7a <xTCPTimerCheck+0xce>
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d903      	bls.n	800ab7a <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d1b1      	bne.n	800aae6 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800ab84:	4618      	mov	r0, r3
 800ab86:	3728      	adds	r7, #40	; 0x28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	24008910 	.word	0x24008910
 800ab90:	240094fc 	.word	0x240094fc
 800ab94:	240094f4 	.word	0x240094f4

0800ab98 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	623b      	str	r3, [r7, #32]
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800abae:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <pxTCPSocketLookup+0x88>)
 800abb0:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
 800abb8:	e024      	b.n	800ac04 <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fd6e 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800abc4:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	429a      	cmp	r2, r3
 800abd0:	d115      	bne.n	800abfe <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d102      	bne.n	800abe2 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	61fb      	str	r3, [r7, #28]
 800abe0:	e00d      	b.n	800abfe <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	429a      	cmp	r2, r3
 800abec:	d107      	bne.n	800abfe <pxTCPSocketLookup+0x66>
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d102      	bne.n	800abfe <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	623b      	str	r3, [r7, #32]
                    break;
 800abfc:	e006      	b.n	800ac0c <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 800ac04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d1d6      	bne.n	800abba <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800ac16:	6a3b      	ldr	r3, [r7, #32]
    }
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3728      	adds	r7, #40	; 0x28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	240094fc 	.word	0x240094fc

0800ac24 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d025      	beq.n	800ac80 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac38:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10c      	bne.n	800ac5c <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <prvTCPCreateStream+0xd4>)
 800ac52:	fba3 2302 	umull	r2, r3, r3, r2
 800ac56:	095a      	lsrs	r2, r3, #5
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d110      	bne.n	800ac86 <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	461a      	mov	r2, r3
 800ac72:	4b21      	ldr	r3, [pc, #132]	; (800acf8 <prvTCPCreateStream+0xd4>)
 800ac74:	fba3 2302 	umull	r2, r3, r3, r2
 800ac78:	095a      	lsrs	r2, r3, #5
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	669a      	str	r2, [r3, #104]	; 0x68
 800ac7e:	e002      	b.n	800ac86 <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac84:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	3304      	adds	r3, #4
 800ac8a:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f023 0303 	bic.w	r3, r3, #3
 800ac92:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	3314      	adds	r3, #20
 800ac98:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800ac9a:	6938      	ldr	r0, [r7, #16]
 800ac9c:	f7fc fc7c 	bl	8007598 <pvPortMalloc>
 800aca0:	4603      	mov	r3, r0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fd58 	bl	8009758 <vCastPointerTo_StreamBuffer_t>
 800aca8:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10b      	bne.n	800acc8 <prvTCPCreateStream+0xa4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800acb6:	f043 0308 	orr.w	r3, r3, #8
 800acba:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800acbe:	2108      	movs	r1, #8
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 fb1b 	bl	800c2fc <vTCPStateChange>
 800acc6:	e011      	b.n	800acec <prvTCPCreateStream+0xc8>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800acc8:	2214      	movs	r2, #20
 800acca:	2100      	movs	r1, #0
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f006 ff32 	bl	8011b36 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
            }

            if( xIsInputStream != 0 )
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <prvTCPCreateStream+0xc2>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	675a      	str	r2, [r3, #116]	; 0x74
 800ace4:	e002      	b.n	800acec <prvTCPCreateStream+0xc8>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 800acec:	68fb      	ldr	r3, [r7, #12]
    }
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	51eb851f 	.word	0x51eb851f

0800acfc <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad0e:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff ff81 	bl	800ac24 <prvTCPCreateStream>
 800ad22:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2e:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	db44      	blt.n	800adc0 <lTCPAddRxdata+0xc4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	69f8      	ldr	r0, [r7, #28]
 800ad3e:	f000 fb6c 	bl	800b41a <uxStreamBufferAdd>
 800ad42:	4603      	mov	r3, r0
 800ad44:	61bb      	str	r3, [r7, #24]
                                                 ( unsigned int ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d139      	bne.n	800adc0 <lTCPAddRxdata+0xc4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d11f      	bne.n	800ad9c <lTCPAddRxdata+0xa0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fa8c 	bl	800b27e <uxStreamBufferFrontSpace>
 800ad66:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d814      	bhi.n	800ad9c <lTCPAddRxdata+0xa0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800ad78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad7c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ad96:	2006      	movs	r0, #6
 800ad98:	f7fd fc90 	bl	80086bc <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f043 0201 	orr.w	r2, r3, #1
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d005      	beq.n	800adc0 <lTCPAddRxdata+0xc4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800adc0:	69bb      	ldr	r3, [r7, #24]
    }
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800addc:	2b06      	cmp	r3, #6
 800adde:	d003      	beq.n	800ade8 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ade0:	f06f 0315 	mvn.w	r3, #21
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	e00e      	b.n	800ae06 <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adec:	2b00      	cmp	r3, #0
 800adee:	d007      	beq.n	800ae00 <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fa2e 	bl	800b256 <uxStreamBufferGetSpace>
 800adfa:	4603      	mov	r3, r0
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e002      	b.n	800ae06 <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae04:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ae06:	68fb      	ldr	r3, [r7, #12]
    }
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae22:	2b06      	cmp	r3, #6
 800ae24:	d003      	beq.n	800ae2e <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ae26:	f06f 0315 	mvn.w	r3, #21
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	e00d      	b.n	800ae4a <FreeRTOS_tx_size+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <FreeRTOS_tx_size+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fa33 	bl	800b2a6 <uxStreamBufferGetSize>
 800ae40:	4603      	mov	r3, r0
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e001      	b.n	800ae4a <FreeRTOS_tx_size+0x3a>
            }
            else
            {
                xReturn = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
    }
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d003      	beq.n	800ae72 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ae6a:	f06f 0315 	mvn.w	r3, #21
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e00d      	b.n	800ae8e <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 fa11 	bl	800b2a6 <uxStreamBufferGetSize>
 800ae84:	4603      	mov	r3, r0
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e001      	b.n	800ae8e <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
    }
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b092      	sub	sp, #72	; 0x48
 800ae9c:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800aea2:	f004 f96d 	bl	800f180 <uxGetMinimumFreeNetworkBuffers>
 800aea6:	6378      	str	r0, [r7, #52]	; 0x34
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800aea8:	f004 f95e 	bl	800f168 <uxGetNumberOfFreeNetworkBuffers>
 800aeac:	6338      	str	r0, [r7, #48]	; 0x30

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800aeae:	4b37      	ldr	r3, [pc, #220]	; (800af8c <vTCPNetStat+0xf4>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d164      	bne.n	800af82 <vTCPNetStat+0xea>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
        }
        else
        {
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800aeb8:	4b35      	ldr	r3, [pc, #212]	; (800af90 <vTCPNetStat+0xf8>)
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800aebc:	4b35      	ldr	r3, [pc, #212]	; (800af94 <vTCPNetStat+0xfc>)
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800aec0:	4b32      	ldr	r3, [pc, #200]	; (800af8c <vTCPNetStat+0xf4>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec6:	e04a      	b.n	800af5e <vTCPNetStat+0xc6>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fbf2 	bl	80096b6 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24
                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800aed4:	f7fa fed8 	bl	8005c88 <xTaskGetTickCount>
 800aed8:	4602      	mov	r2, r0
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	623b      	str	r3, [r7, #32]
                #else
                    TickType_t age = 0U;
                #endif

                char ucChildText[ 16 ] = "";
 800aee2:	2300      	movs	r3, #0
 800aee4:	607b      	str	r3, [r7, #4]
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	605a      	str	r2, [r3, #4]
 800aef0:	609a      	str	r2, [r3, #8]

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d12a      	bne.n	800af52 <vTCPNetStat+0xba>
                {
                    /* Using function "snprintf". */
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                         pxSocket->u.xTCP.usChildCount,
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800af02:	461a      	mov	r2, r3
                                                         pxSocket->u.xTCP.usBacklog );
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800af0a:	1d38      	adds	r0, r7, #4
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	4613      	mov	r3, r2
 800af10:	4a21      	ldr	r2, [pc, #132]	; (800af98 <vTCPNetStat+0x100>)
 800af12:	2110      	movs	r1, #16
 800af14:	f006 ff2c 	bl	8011d70 <sniprintf>
 800af18:	61f8      	str	r0, [r7, #28]
                    ( void ) copied_len;
                    /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
                    configASSERT( copied_len >= 0 );
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da0a      	bge.n	800af36 <vTCPNetStat+0x9e>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	61bb      	str	r3, [r7, #24]
}
 800af32:	bf00      	nop
 800af34:	e7fe      	b.n	800af34 <vTCPNetStat+0x9c>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2b0f      	cmp	r3, #15
 800af3a:	dd0a      	ble.n	800af52 <vTCPNetStat+0xba>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	617b      	str	r3, [r7, #20]
}
 800af4e:	bf00      	nop
 800af50:	e7fe      	b.n	800af50 <vTCPNetStat+0xb8>
                                   ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                                   FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.ucTCPState ),
                                   ( age > 999999u ) ? 999999u : age, /* Format 'age' for printing */
                                   pxSocket->u.xTCP.usTimeout,
                                   ucChildText ) );
                count++;
 800af52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af54:	3301      	adds	r3, #1
 800af56:	63bb      	str	r3, [r7, #56]	; 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800af5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	429a      	cmp	r2, r3
 800af64:	d1b0      	bne.n	800aec8 <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <vTCPNetStat+0x104>)
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6c:	e005      	b.n	800af7a <vTCPNetStat+0xe2>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	3301      	adds	r3, #1
 800af72:	63bb      	str	r3, [r7, #56]	; 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800af74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800af7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	429a      	cmp	r2, r3
 800af80:	d1f5      	bne.n	800af6e <vTCPNetStat+0xd6>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800af82:	bf00      	nop
 800af84:	3740      	adds	r7, #64	; 0x40
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	240094f4 	.word	0x240094f4
 800af90:	240094fc 	.word	0x240094fc
 800af94:	24009510 	.word	0x24009510
 800af98:	08012eb8 	.word	0x08012eb8
 800af9c:	24009508 	.word	0x24009508

0800afa0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800afa8:	2301      	movs	r3, #1
 800afaa:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800afb0:	2300      	movs	r3, #0
 800afb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb4:	e0e4      	b.n	800b180 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800afbc:	4b85      	ldr	r3, [pc, #532]	; (800b1d4 <vSocketSelect+0x234>)
 800afbe:	61fb      	str	r3, [r7, #28]
 800afc0:	e001      	b.n	800afc6 <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800afc2:	4b85      	ldr	r3, [pc, #532]	; (800b1d8 <vSocketSelect+0x238>)
 800afc4:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	623b      	str	r3, [r7, #32]
 800afcc:	e0d0      	b.n	800b170 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe fb64 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800afd8:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	f040 80c1 	bne.w	800b168 <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800aff0:	2b06      	cmp	r3, #6
 800aff2:	f040 80a3 	bne.w	800b13c <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d109      	bne.n	800b01e <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d038      	beq.n	800b09c <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b030:	2b01      	cmp	r3, #1
 800b032:	d111      	bne.n	800b058 <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d02f      	beq.n	800b09c <vSocketSelect+0xfc>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d026      	beq.n	800b09c <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	f043 0301 	orr.w	r3, r3, #1
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
 800b056:	e021      	b.n	800b09c <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00c      	beq.n	800b082 <vSocketSelect+0xe2>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	f043 0301 	orr.w	r3, r3, #1
 800b07e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b080:	e00c      	b.n	800b09c <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <vSocketSelect+0xfc>
 800b088:	68b8      	ldr	r0, [r7, #8]
 800b08a:	f7ff fee3 	bl	800ae54 <FreeRTOS_rx_size>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	dd03      	ble.n	800b09c <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00d      	beq.n	800b0c4 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0ae:	2b08      	cmp	r3, #8
 800b0b0:	d004      	beq.n	800b0bc <vSocketSelect+0x11c>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d103      	bne.n	800b0c4 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	f043 0304 	orr.w	r3, r3, #4
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d043      	beq.n	800b158 <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800b0da:	68b8      	ldr	r0, [r7, #8]
 800b0dc:	f7ff fe75 	bl	800adca <FreeRTOS_tx_space>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	dd01      	ble.n	800b0ea <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d11d      	bne.n	800b12c <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d015      	beq.n	800b12c <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b106:	2b04      	cmp	r3, #4
 800b108:	d910      	bls.n	800b12c <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b116:	2b00      	cmp	r3, #0
 800b118:	d108      	bne.n	800b12c <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b120:	f043 0310 	orr.w	r3, r3, #16
 800b124:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d012      	beq.n	800b158 <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	f043 0302 	orr.w	r3, r3, #2
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
 800b13a:	e00d      	b.n	800b158 <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b15c:	635a      	str	r2, [r3, #52]	; 0x34

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800b15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	4313      	orrs	r3, r2
 800b164:	627b      	str	r3, [r7, #36]	; 0x24
 800b166:	e000      	b.n	800b16a <vSocketSelect+0x1ca>
                    continue;
 800b168:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800b170:	6a3a      	ldr	r2, [r7, #32]
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	429a      	cmp	r2, r3
 800b176:	f47f af2a 	bne.w	800afce <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	3301      	adds	r3, #1
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	f77f af16 	ble.w	800afb6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2100      	movs	r1, #0
 800b190:	4618      	mov	r0, r3
 800b192:	f7f9 f951 	bl	8004438 <xEventGroupClearBits>
 800b196:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	43da      	mvns	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4013      	ands	r3, r2
 800b1a0:	f003 030f 	and.w	r3, r3, #15
 800b1a4:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d005      	beq.n	800b1b8 <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68f9      	ldr	r1, [r7, #12]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f9 f940 	bl	8004438 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	f043 0310 	orr.w	r3, r3, #16
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f7f9 f96f 	bl	80044a8 <xEventGroupSetBits>
    }
 800b1ca:	bf00      	nop
 800b1cc:	3730      	adds	r7, #48	; 0x30
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	24009510 	.word	0x24009510
 800b1d8:	240094fc 	.word	0x240094fc

0800b1dc <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                            const size_t uxLower,
                            const size_t uxUpper )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
    size_t uxCount;

    uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	441a      	add	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]

    if( uxCount >= pxBuffer->LENGTH )
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d304      	bcc.n	800b20c <uxStreamBufferSpace+0x30>
    {
        uxCount -= pxBuffer->LENGTH;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800b20c:	697b      	ldr	r3, [r7, #20]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                               const size_t uxLower,
                               const size_t uxUpper )
{
 800b21a:	b480      	push	{r7}
 800b21c:	b087      	sub	sp, #28
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
    size_t uxCount;

    uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	691a      	ldr	r2, [r3, #16]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	441a      	add	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	617b      	str	r3, [r7, #20]

    if( uxCount >= pxBuffer->LENGTH )
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d304      	bcc.n	800b248 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= pxBuffer->LENGTH;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800b248:	697b      	ldr	r3, [r7, #20]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer: The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
    size_t uxHead = pxBuffer->uxHead;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	60fb      	str	r3, [r7, #12]
    size_t uxTail = pxBuffer->uxTail;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60bb      	str	r3, [r7, #8]

    return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	68f9      	ldr	r1, [r7, #12]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff ffb4 	bl	800b1dc <uxStreamBufferSpace>
 800b274:	4603      	mov	r3, r0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer: The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
    size_t uxFront = pxBuffer->uxFront;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	60fb      	str	r3, [r7, #12]
    size_t uxTail = pxBuffer->uxTail;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60bb      	str	r3, [r7, #8]

    return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff ffa0 	bl	800b1dc <uxStreamBufferSpace>
 800b29c:	4603      	mov	r3, r0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer: The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
    size_t uxHead = pxBuffer->uxHead;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60fb      	str	r3, [r7, #12]
    size_t uxTail = pxBuffer->uxTail;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60bb      	str	r3, [r7, #8]

    return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff ffab 	bl	800b21a <uxStreamBufferDistance>
 800b2c4:	4603      	mov	r3, r0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer: The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * pxBuffer )
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
    size_t uxHead = pxBuffer->uxHead;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	60fb      	str	r3, [r7, #12]
    size_t uxMid = pxBuffer->uxMid;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	60bb      	str	r3, [r7, #8]

    return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	68b9      	ldr	r1, [r7, #8]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff97 	bl	800b21a <uxStreamBufferDistance>
 800b2ec:	4603      	mov	r3, r0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <vStreamBufferClear>:
/**
 * @brief Move Clear the stream buffer.
 * @param[in] pxBuffer: The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * pxBuffer )
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	605a      	str	r2, [r3, #4]
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer: The circular stream buffer.
 * @param[in] uxCount: The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * pxBuffer,
                           size_t uxCount )
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b086      	sub	sp, #24
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff ffce 	bl	800b2ce <uxStreamBufferMidSpace>
 800b332:	60f8      	str	r0, [r7, #12]
    size_t uxMid = pxBuffer->uxMid;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	429a      	cmp	r2, r3
 800b344:	d901      	bls.n	800b34a <vStreamBufferMoveMid+0x28>
    {
        uxMoveCount = uxSize;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	617b      	str	r3, [r7, #20]

    if( uxMid >= pxBuffer->LENGTH )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d304      	bcc.n	800b366 <vStreamBufferMoveMid+0x44>
    {
        uxMid -= pxBuffer->LENGTH;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	605a      	str	r2, [r3, #4]
}
 800b36c:	bf00      	nop
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                       const size_t uxLeft,
                                       const size_t uxRight )
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    size_t uxTail = pxBuffer->uxTail;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	613b      	str	r3, [r7, #16]

    /* Returns true if ( uxLeft < uxRight ) */
    if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d201      	bcs.n	800b392 <xStreamBufferLessThenEqual+0x1e>
 800b38e:	2201      	movs	r2, #1
 800b390:	e000      	b.n	800b394 <xStreamBufferLessThenEqual+0x20>
 800b392:	2200      	movs	r2, #0
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	4299      	cmp	r1, r3
 800b39a:	d201      	bcs.n	800b3a0 <xStreamBufferLessThenEqual+0x2c>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e000      	b.n	800b3a2 <xStreamBufferLessThenEqual+0x2e>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d009      	beq.n	800b3ba <xStreamBufferLessThenEqual+0x46>
    {
        if( uxRight < uxTail )
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d202      	bcs.n	800b3b4 <xStreamBufferLessThenEqual+0x40>
        {
            xReturn = pdTRUE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]
 800b3b2:	e00b      	b.n	800b3cc <xStreamBufferLessThenEqual+0x58>
        }
        else
        {
            xReturn = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]
 800b3b8:	e008      	b.n	800b3cc <xStreamBufferLessThenEqual+0x58>
        }
    }
    else
    {
        if( uxLeft <= uxRight )
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d802      	bhi.n	800b3c8 <xStreamBufferLessThenEqual+0x54>
        {
            xReturn = pdTRUE;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	e001      	b.n	800b3cc <xStreamBufferLessThenEqual+0x58>
        }
        else
        {
            xReturn = pdFALSE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800b3cc:	697b      	ldr	r3, [r7, #20]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * pxBuffer,
                             uint8_t ** ppucData )
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
    size_t uxNextTail = pxBuffer->uxTail;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60fb      	str	r3, [r7, #12]
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ff5b 	bl	800b2a6 <uxStreamBufferGetSize>
 800b3f0:	60b8      	str	r0, [r7, #8]

    *ppucData = pxBuffer->ucArray + uxNextTail;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f103 0214 	add.w	r2, r3, #20
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	441a      	add	r2, r3
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691a      	ldr	r2, [r3, #16]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	4619      	mov	r1, r3
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f7fe f87e 	bl	800950c <FreeRTOS_min_uint32>
 800b410:	4603      	mov	r3, r0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b088      	sub	sp, #32
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607a      	str	r2, [r7, #4]
 800b426:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff ff12 	bl	800b256 <uxStreamBufferGetSpace>
 800b432:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800b434:	69fa      	ldr	r2, [r7, #28]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d904      	bls.n	800b446 <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800b43c:	69fa      	ldr	r2, [r7, #28]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	e001      	b.n	800b44a <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800b44a:	6979      	ldr	r1, [r7, #20]
 800b44c:	69f8      	ldr	r0, [r7, #28]
 800b44e:	f7fe f85d 	bl	800950c <FreeRTOS_min_uint32>
 800b452:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d05a      	beq.n	800b510 <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800b466:	69ba      	ldr	r2, [r7, #24]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4413      	add	r3, r2
 800b46c:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	429a      	cmp	r2, r3
 800b476:	d304      	bcc.n	800b482 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d022      	beq.n	800b4ce <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	6979      	ldr	r1, [r7, #20]
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe f83a 	bl	800950c <FreeRTOS_min_uint32>
 800b498:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	3310      	adds	r3, #16
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f006 fb1c 	bl	8011ae6 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d90b      	bls.n	800b4ce <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f103 0014 	add.w	r0, r3, #20
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	18d1      	adds	r1, r2, r3
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f006 fb0c 	bl	8011ae6 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d110      	bne.n	800b4f6 <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	4413      	add	r3, r2
 800b4da:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d304      	bcc.n	800b4f0 <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff ff38 	bl	800b374 <xStreamBufferLessThenEqual>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800b510:	697b      	ldr	r3, [r7, #20]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b088      	sub	sp, #32
 800b51e:	af00      	add	r7, sp, #0
 800b520:	60f8      	str	r0, [r7, #12]
 800b522:	60b9      	str	r1, [r7, #8]
 800b524:	607a      	str	r2, [r7, #4]
 800b526:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff febc 	bl	800b2a6 <uxStreamBufferGetSize>
 800b52e:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	429a      	cmp	r2, r3
 800b536:	d904      	bls.n	800b542 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	e001      	b.n	800b546 <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	69f8      	ldr	r0, [r7, #28]
 800b54a:	f7fd ffdf 	bl	800950c <FreeRTOS_min_uint32>
 800b54e:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d050      	beq.n	800b5f8 <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00d      	beq.n	800b57e <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4413      	add	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	429a      	cmp	r2, r3
 800b572:	d304      	bcc.n	800b57e <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d022      	beq.n	800b5ca <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	691a      	ldr	r2, [r3, #16]
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	6979      	ldr	r1, [r7, #20]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fd ffbc 	bl	800950c <FreeRTOS_min_uint32>
 800b594:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	3310      	adds	r3, #16
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	3304      	adds	r3, #4
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f006 fa9e 	bl	8011ae6 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d90b      	bls.n	800b5ca <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	18d0      	adds	r0, r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f103 0114 	add.w	r1, r3, #20
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f006 fa8e 	bl	8011ae6 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d113      	bne.n	800b5f8 <uxStreamBufferGet+0xde>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d110      	bne.n	800b5f8 <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	4413      	add	r3, r2
 800b5dc:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d304      	bcc.n	800b5f2 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800b5f8:	697b      	ldr	r3, [r7, #20]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	4603      	mov	r3, r0
 800b60a:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b0b      	cmp	r3, #11
 800b610:	bf8c      	ite	hi
 800b612:	2201      	movhi	r2, #1
 800b614:	2200      	movls	r2, #0
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	2a00      	cmp	r2, #0
 800b61a:	d10e      	bne.n	800b63a <prvTCPSocketIsActive+0x38>
 800b61c:	2201      	movs	r2, #1
 800b61e:	409a      	lsls	r2, r3
 800b620:	f640 3381 	movw	r3, #2945	; 0xb81
 800b624:	4013      	ands	r3, r2
 800b626:	2b00      	cmp	r3, #0
 800b628:	bf14      	ite	ne
 800b62a:	2301      	movne	r3, #1
 800b62c:	2300      	moveq	r3, #0
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <prvTCPSocketIsActive+0x38>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]
                break;
 800b638:	e002      	b.n	800b640 <prvTCPSocketIsActive+0x3e>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800b63a:	2301      	movs	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]
                break;
 800b63e:	bf00      	nop
        }

        return xResult;
 800b640:	68fb      	ldr	r3, [r7, #12]
    }
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <vSocketCloseNextTime>:
/** @brief Close the socket another time.
 *
 * @param[in] pxSocket: The socket to be checked.
 */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
        static FreeRTOS_Socket_t * xPreviousSocket = NULL;

        if( ( xPreviousSocket != NULL ) && ( xPreviousSocket != pxSocket ) )
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <vSocketCloseNextTime+0x34>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d009      	beq.n	800b674 <vSocketCloseNextTime+0x24>
 800b660:	4b08      	ldr	r3, [pc, #32]	; (800b684 <vSocketCloseNextTime+0x34>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d004      	beq.n	800b674 <vSocketCloseNextTime+0x24>
        {
            vSocketClose( xPreviousSocket );
 800b66a:	4b06      	ldr	r3, [pc, #24]	; (800b684 <vSocketCloseNextTime+0x34>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe fb07 	bl	8009c82 <vSocketClose>
        }

        xPreviousSocket = pxSocket;
 800b674:	4a03      	ldr	r2, [pc, #12]	; (800b684 <vSocketCloseNextTime+0x34>)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6013      	str	r3, [r2, #0]
    }
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	24008914 	.word	0x24008914

0800b688 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b696:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800b698:	7cfb      	ldrb	r3, [r7, #19]
 800b69a:	2b08      	cmp	r3, #8
 800b69c:	d00b      	beq.n	800b6b6 <prvTCPStatusAgeCheck+0x2e>
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	dc0c      	bgt.n	800b6bc <prvTCPStatusAgeCheck+0x34>
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	dc02      	bgt.n	800b6ac <prvTCPStatusAgeCheck+0x24>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	da05      	bge.n	800b6b6 <prvTCPStatusAgeCheck+0x2e>
 800b6aa:	e007      	b.n	800b6bc <prvTCPStatusAgeCheck+0x34>
 800b6ac:	2b05      	cmp	r3, #5
 800b6ae:	d105      	bne.n	800b6bc <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
                    break;
 800b6b4:	e005      	b.n	800b6c2 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	617b      	str	r3, [r7, #20]
                    break;
 800b6ba:	e002      	b.n	800b6c2 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	617b      	str	r3, [r7, #20]
                    break;
 800b6c0:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01a      	beq.n	800b6fe <prvTCPStatusAgeCheck+0x76>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800b6c8:	f7fa fade 	bl	8005c88 <xTaskGetTickCount>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f247 5230 	movw	r2, #30000	; 0x7530
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d90e      	bls.n	800b6fe <prvTCPStatusAgeCheck+0x76>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b6e0:	2108      	movs	r1, #8
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fe0a 	bl	800c2fc <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <prvTCPStatusAgeCheck+0x76>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800b6fe:	697b      	ldr	r3, [r7, #20]
        }
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b71e:	2b04      	cmp	r3, #4
 800b720:	d906      	bls.n	800b730 <xTCPSocketCheck+0x28>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 f92a 	bl	800c984 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d02a      	beq.n	800b78e <xTCPSocketCheck+0x86>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d116      	bne.n	800b776 <xTCPSocketCheck+0x6e>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d009      	beq.n	800b766 <xTCPSocketCheck+0x5e>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800b752:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <xTCPSocketCheck+0xc0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b01      	cmp	r3, #1
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800b75c:	2300      	movs	r3, #0
 800b75e:	2228      	movs	r2, #40	; 0x28
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f8c9 	bl	800b8f8 <prvTCPReturnPacket>
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 f88c 	bl	800c884 <prvTCPNextTimeout>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d901      	bls.n	800b776 <xTCPSocketCheck+0x6e>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800b772:	2301      	movs	r3, #1
 800b774:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d007      	beq.n	800b78e <xTCPSocketCheck+0x86>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b782:	4618      	mov	r0, r3
 800b784:	f003 fcba 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d113      	bne.n	800b7bc <xTCPSocketCheck+0xb4>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d804      	bhi.n	800b7a8 <xTCPSocketCheck+0xa0>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d102      	bne.n	800b7ae <xTCPSocketCheck+0xa6>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f80f 	bl	800b7cc <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f001 f868 	bl	800c884 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ff67 	bl	800b688 <prvTCPStatusAgeCheck>
 800b7ba:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
    }
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	24008930 	.word	0x24008930

0800b7cc <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d010      	beq.n	800b808 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f853 	bl	800b89c <prvTCPSendRepeated>
 800b7f6:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d049      	beq.n	800b892 <prvTCPSendPacket+0xc6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	4618      	mov	r0, r3
 800b802:	f003 fc7b 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
 800b806:	e044      	b.n	800b892 <prvTCPSendPacket+0xc6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d904      	bls.n	800b81c <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b812:	2108      	movs	r1, #8
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fd71 	bl	800c2fc <vTCPStateChange>
 800b81a:	e03a      	b.n	800b892 <prvTCPSendPacket+0xc6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b822:	f003 0308 	and.w	r3, r3, #8
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d105      	bne.n	800b838 <prvTCPSendPacket+0x6c>
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fa69 	bl	800bd04 <prvTCPPrepareConnect>
 800b832:	4603      	mov	r3, r0
 800b834:	2b01      	cmp	r3, #1
 800b836:	d12c      	bne.n	800b892 <prvTCPSendPacket+0xc6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800b838:	2314      	movs	r3, #20
 800b83a:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	330e      	adds	r3, #14
 800b840:	3380      	adds	r3, #128	; 0x80
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	4413      	add	r3, r2
 800b846:	3302      	adds	r3, #2
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fd ff13 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800b84e:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fcdc 	bl	800c212 <prvSetSynAckOptions>
 800b85a:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3328      	adds	r3, #40	; 0x28
 800b860:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	3314      	adds	r3, #20
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	b2da      	uxtb	r2, r3
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b87c:	3301      	adds	r3, #1
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800b886:	69fa      	ldr	r2, [r7, #28]
 800b888:	2300      	movs	r3, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f833 	bl	800b8f8 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800b892:	69fb      	ldr	r3, [r7, #28]
    }
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e016      	b.n	800b8e2 <prvTCPSendRepeated+0x46>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fe83 	bl	800c5c4 <prvTCPPrepareSend>
 800b8be:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dd11      	ble.n	800b8ea <prvTCPSendRepeated+0x4e>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	6819      	ldr	r1, [r3, #0]
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f812 	bl	800b8f8 <prvTCPReturnPacket>
                {
                    *ppxNetworkBuffer = NULL;
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	4413      	add	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b07      	cmp	r3, #7
 800b8e6:	d9e5      	bls.n	800b8b4 <prvTCPSendRepeated+0x18>
 800b8e8:	e000      	b.n	800b8ec <prvTCPSendRepeated+0x50>
                break;
 800b8ea:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800b8ec:	693b      	ldr	r3, [r7, #16]
    }
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b09e      	sub	sp, #120	; 0x78
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	677b      	str	r3, [r7, #116]	; 0x74
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	663b      	str	r3, [r7, #96]	; 0x60
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800b90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10c      	bne.n	800b92e <prvTCPReturnPacket+0x36>
        {
            pxNetworkBuffer = &xTempBuffer;
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	663b      	str	r3, [r7, #96]	; 0x60
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800b920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b922:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800b924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b926:	2246      	movs	r2, #70	; 0x46
 800b928:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	677b      	str	r3, [r7, #116]	; 0x74
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800b92e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 81b7 	beq.w	800bca4 <prvTCPReturnPacket+0x3ac>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800b936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fd fe6e 	bl	800961c <vCastPointerTo_TCPPacket_t>
 800b940:	65f8      	str	r0, [r7, #92]	; 0x5c
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800b942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b944:	330e      	adds	r3, #14
 800b946:	65bb      	str	r3, [r7, #88]	; 0x58
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800b948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b94a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 80ea 	beq.w	800bb28 <prvTCPReturnPacket+0x230>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	33d8      	adds	r3, #216	; 0xd8
 800b958:	64fb      	str	r3, [r7, #76]	; 0x4c

                if( pxSocket->u.xTCP.rxStream != NULL )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <prvTCPReturnPacket+0x78>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fc89 	bl	800b27e <uxStreamBufferFrontSpace>
 800b96c:	6738      	str	r0, [r7, #112]	; 0x70
 800b96e:	e002      	b.n	800b976 <prvTCPReturnPacket+0x7e>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b974:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800b976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fd fdc5 	bl	800950c <FreeRTOS_min_uint32>
 800b982:	66f8      	str	r0, [r7, #108]	; 0x6c

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b98a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	d107      	bne.n	800b9a4 <prvTCPReturnPacket+0xac>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <prvTCPReturnPacket+0xb0>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d20a      	bcs.n	800b9cc <prvTCPReturnPacket+0xd4>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9bc:	461a      	mov	r2, r3
 800b9be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d303      	bcc.n	800b9cc <prvTCPReturnPacket+0xd4>
                {
                    ulSpace = pxSocket->u.xTCP.usMSS;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9ca:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d6:	40d3      	lsrs	r3, r2
 800b9d8:	667b      	str	r3, [r7, #100]	; 0x64
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800b9da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9dc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d902      	bls.n	800b9ea <prvTCPReturnPacket+0xf2>
                {
                    ulWinSize = 0xfffcUL;
 800b9e4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800b9e8:	667b      	str	r3, [r7, #100]	; 0x64
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800b9ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	b21a      	sxth	r2, r3
 800b9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	0a1b      	lsrs	r3, r3, #8
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	b21b      	sxth	r3, r3
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	b21b      	sxth	r3, r3
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba04:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ba0c:	f36f 0300 	bfc	r3, #0, #1
 800ba10:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800ba14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba1a:	441a      	add	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d02f      	beq.n	800ba90 <prvTCPReturnPacket+0x198>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ba36:	f36f 0341 	bfc	r3, #1, #1
 800ba3a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ba44:	f043 0304 	orr.w	r3, r3, #4
 800ba48:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba52:	1e5a      	subs	r2, r3, #1
 800ba54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba56:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800ba5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba5c:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba60:	061a      	lsls	r2, r3, #24
 800ba62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba64:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba72:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba76:	0a1b      	lsrs	r3, r3, #8
 800ba78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba80:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba84:	0e1b      	lsrs	r3, r3, #24
 800ba86:	431a      	orrs	r2, r3
 800ba88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8a:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800ba8e:	e034      	b.n	800bafa <prvTCPReturnPacket+0x202>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba96:	061a      	lsls	r2, r3, #24
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800baa4:	431a      	orrs	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800baac:	0a1b      	lsrs	r3, r3, #8
 800baae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bab2:	431a      	orrs	r2, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800baba:	0e1b      	lsrs	r3, r3, #24
 800babc:	431a      	orrs	r2, r3
 800babe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac0:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800bac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d013      	beq.n	800bafa <prvTCPReturnPacket+0x202>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	3b28      	subs	r3, #40	; 0x28
 800bad6:	64bb      	str	r3, [r7, #72]	; 0x48

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800bad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800badc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bade:	441a      	add	r2, r3
 800bae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d008      	beq.n	800bafa <prvTCPReturnPacket+0x202>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800bae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baee:	f023 0301 	bic.w	r3, r3, #1
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800bafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	061a      	lsls	r2, r3, #24
 800bb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	0a1b      	lsrs	r3, r3, #8
 800bb12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb16:	431a      	orrs	r2, r3
 800bb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	0e1b      	lsrs	r3, r3, #24
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb22:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800bb26:	e00d      	b.n	800bb44 <prvTCPReturnPacket+0x24c>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800bb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb2a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800bb2e:	653b      	str	r3, [r7, #80]	; 0x50
 800bb30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb32:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800bb36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb38:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800bb3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb40:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800bb44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb46:	2280      	movs	r2, #128	; 0x80
 800bb48:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	0a1b      	lsrs	r3, r3, #8
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb5e:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <prvTCPReturnPacket+0x276>
 800bb66:	4b51      	ldr	r3, [pc, #324]	; (800bcac <prvTCPReturnPacket+0x3b4>)
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d103      	bne.n	800bb76 <prvTCPReturnPacket+0x27e>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800bb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb74:	e002      	b.n	800bb7c <prvTCPReturnPacket+0x284>
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800bb76:	4b4d      	ldr	r3, [pc, #308]	; (800bcac <prvTCPReturnPacket+0x3b4>)
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800bb7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb82:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800bb84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb88:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800bb8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb8c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bb90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bb94:	021b      	lsls	r3, r3, #8
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba4:	845a      	strh	r2, [r3, #34]	; 0x22
 800bba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800bbac:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800bbae:	4b40      	ldr	r3, [pc, #256]	; (800bcb0 <prvTCPReturnPacket+0x3b8>)
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	021b      	lsls	r3, r3, #8
 800bbb4:	b21a      	sxth	r2, r3
 800bbb6:	4b3e      	ldr	r3, [pc, #248]	; (800bcb0 <prvTCPReturnPacket+0x3b8>)
 800bbb8:	881b      	ldrh	r3, [r3, #0]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	b21b      	sxth	r3, r3
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	b21b      	sxth	r3, r3
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbc8:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800bbca:	4b39      	ldr	r3, [pc, #228]	; (800bcb0 <prvTCPReturnPacket+0x3b8>)
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	4b37      	ldr	r3, [pc, #220]	; (800bcb0 <prvTCPReturnPacket+0x3b8>)
 800bbd4:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 800bbd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd8:	2200      	movs	r2, #0
 800bbda:	719a      	strb	r2, [r3, #6]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	71da      	strb	r2, [r3, #7]
            #endif

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f103 020e 	add.w	r2, r3, #14
 800bbe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbe8:	61da      	str	r2, [r3, #28]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    /* calculate the IP header checksum, in case the driver won't do that. */
                    pxIPHeader->usHeaderChecksum = 0x00U;
 800bbea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbec:	2200      	movs	r2, #0
 800bbee:	729a      	strb	r2, [r3, #10]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	72da      	strb	r2, [r3, #11]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800bbf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbf6:	2214      	movs	r2, #20
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f7fd fb0c 	bl	8009218 <usGenerateChecksum>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc06:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800bc08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc0a:	895b      	ldrh	r3, [r3, #10]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	b21a      	sxth	r2, r3
 800bc12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc14:	895b      	ldrh	r3, [r3, #10]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	0a1b      	lsrs	r3, r3, #8
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	b21b      	sxth	r3, r3
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	b21b      	sxth	r3, r3
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	43db      	mvns	r3, r3
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc2a:	815a      	strh	r2, [r3, #10]

                    /* calculate the TCP checksum for an outgoing packet. */
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800bc2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	2201      	movs	r2, #1
 800bc32:	4619      	mov	r1, r3
 800bc34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bc36:	f7fd f987 	bl	8008f48 <usGenerateProtocolChecksum>
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800bc3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800bc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc3e:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800bc40:	2206      	movs	r2, #6
 800bc42:	4619      	mov	r1, r3
 800bc44:	f005 ff4f 	bl	8011ae6 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800bc48:	4b18      	ldr	r3, [pc, #96]	; (800bcac <prvTCPReturnPacket+0x3b4>)
 800bc4a:	643b      	str	r3, [r7, #64]	; 0x40
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800bc4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc4e:	3306      	adds	r3, #6
 800bc50:	63fb      	str	r3, [r7, #60]	; 0x3c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bc52:	2206      	movs	r2, #6
 800bc54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc58:	f005 ff45 	bl	8011ae6 <memcpy>
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800bc5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bc5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bc60:	f003 ff9e 	bl	800fba0 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800bc64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d11c      	bne.n	800bca4 <prvTCPReturnPacket+0x3ac>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800bc6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc6c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bc70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bc74:	021b      	lsls	r3, r3, #8
 800bc76:	4313      	orrs	r3, r2
 800bc78:	877b      	strh	r3, [r7, #58]	; 0x3a
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc82:	845a      	strh	r2, [r3, #34]	; 0x22
 800bc84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bc88:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800bc8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc8c:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800bc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc92:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc98:	3306      	adds	r3, #6
 800bc9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc9c:	2206      	movs	r2, #6
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f005 ff21 	bl	8011ae6 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800bca4:	bf00      	nop
 800bca6:	3778      	adds	r7, #120	; 0x78
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	24000020 	.word	0x24000020
 800bcb0:	24007b64 	.word	0x24007b64

0800bcb4 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800bcb4:	b5b0      	push	{r4, r5, r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800bcc8:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800bccc:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bcd6:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800bcda:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
        vTCPWindowCreate(
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	f002 fa28 	bl	800e14c <vTCPWindowCreate>
    }
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bdb0      	pop	{r4, r5, r7, pc}

0800bd04 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08c      	sub	sp, #48	; 0x30
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800bd14:	f107 030c 	add.w	r3, r7, #12
 800bd18:	2206      	movs	r2, #6
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f005 ff0a 	bl	8011b36 <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	061a      	lsls	r2, r3, #24
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	021b      	lsls	r3, r3, #8
 800bd2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd32:	431a      	orrs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	0a1b      	lsrs	r3, r3, #8
 800bd3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	0e1b      	lsrs	r3, r3, #24
 800bd46:	4313      	orrs	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800bd4a:	f107 020c 	add.w	r2, r7, #12
 800bd4e:	f107 0314 	add.w	r3, r7, #20
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fb ffb1 	bl	8007cbc <eARPGetCacheEntry>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800bd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d00e      	beq.n	800bd86 <prvTCPPrepareConnect+0x82>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd6e:	3301      	adds	r3, #1
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fc f8e4 	bl	8007f48 <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800bd84:	e000      	b.n	800bd88 <prvTCPPrepareConnect+0x84>
                break;            /* We can now prepare the SYN packet. */
 800bd86:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00f      	beq.n	800bdae <prvTCPPrepareConnect+0xaa>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800bd8e:	4b53      	ldr	r3, [pc, #332]	; (800bedc <prvTCPPrepareConnect+0x1d8>)
 800bd90:	6958      	ldr	r0, [r3, #20]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bd9e:	f7f4 fc4f 	bl	8000640 <ulApplicationGetNextSequenceNumber>
 800bda2:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <prvTCPPrepareConnect+0xaa>
            {
                xReturn = pdFALSE;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 808d 	beq.w	800bed0 <prvTCPPrepareConnect+0x1cc>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3382      	adds	r3, #130	; 0x82
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd fc2e 	bl	800961c <vCastPointerTo_TCPPacket_t>
 800bdc0:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	330e      	adds	r3, #14
 800bdc6:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bdd6:	f043 0308 	orr.w	r3, r3, #8
 800bdda:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3382      	adds	r3, #130	; 0x82
 800bde2:	2246      	movs	r2, #70	; 0x46
 800bde4:	2100      	movs	r1, #0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f005 fea5 	bl	8011b36 <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	3306      	adds	r3, #6
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f107 030c 	add.w	r3, r7, #12
 800bdf6:	6818      	ldr	r0, [r3, #0]
 800bdf8:	6010      	str	r0, [r2, #0]
 800bdfa:	889b      	ldrh	r3, [r3, #4]
 800bdfc:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	2200      	movs	r2, #0
 800be02:	f042 0208 	orr.w	r2, r2, #8
 800be06:	731a      	strb	r2, [r3, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2245      	movs	r2, #69	; 0x45
 800be10:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800be12:	2338      	movs	r3, #56	; 0x38
 800be14:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800be16:	8b7b      	ldrh	r3, [r7, #26]
 800be18:	021b      	lsls	r3, r3, #8
 800be1a:	b21a      	sxth	r2, r3
 800be1c:	8b7b      	ldrh	r3, [r7, #26]
 800be1e:	0a1b      	lsrs	r3, r3, #8
 800be20:	b29b      	uxth	r3, r3
 800be22:	b21b      	sxth	r3, r3
 800be24:	4313      	orrs	r3, r2
 800be26:	b21b      	sxth	r3, r3
 800be28:	b29a      	uxth	r2, r3
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2280      	movs	r2, #128	; 0x80
 800be32:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	2206      	movs	r2, #6
 800be38:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800be3a:	4b28      	ldr	r3, [pc, #160]	; (800bedc <prvTCPPrepareConnect+0x1d8>)
 800be3c:	695a      	ldr	r2, [r3, #20]
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	061a      	lsls	r2, r3, #24
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be52:	431a      	orrs	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be58:	0a1b      	lsrs	r3, r3, #8
 800be5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	0e1b      	lsrs	r3, r3, #24
 800be66:	431a      	orrs	r2, r3
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be70:	021b      	lsls	r3, r3, #8
 800be72:	b21a      	sxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be78:	0a1b      	lsrs	r3, r3, #8
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	b21b      	sxth	r3, r3
 800be7e:	4313      	orrs	r3, r2
 800be80:	b21b      	sxth	r3, r3
 800be82:	b29a      	uxth	r2, r3
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	b21a      	sxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be94:	0a1b      	lsrs	r3, r3, #8
 800be96:	b29b      	uxth	r3, r3
 800be98:	b21b      	sxth	r3, r3
 800be9a:	4313      	orrs	r3, r2
 800be9c:	b21b      	sxth	r3, r3
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	2250      	movs	r2, #80	; 0x50
 800beb8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the value of usMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 fb83 	bl	800d5d0 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fef2 	bl	800bcb4 <prvTCPCreateWindow>
        }

        return xReturn;
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800bed2:	4618      	mov	r0, r3
 800bed4:	3730      	adds	r7, #48	; 0x30
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	24000020 	.word	0x24000020

0800bee0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08c      	sub	sp, #48	; 0x30
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800beea:	2322      	movs	r3, #34	; 0x22
 800beec:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	699a      	ldr	r2, [r3, #24]
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	4413      	add	r3, r2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fbbc 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800befc:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	3314      	adds	r3, #20
 800bf02:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	3314      	adds	r3, #20
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	7b1b      	ldrb	r3, [r3, #12]
 800bf12:	2b50      	cmp	r3, #80	; 0x50
 800bf14:	d93e      	bls.n	800bf94 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	7b1b      	ldrb	r3, [r3, #12]
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	3b05      	subs	r3, #5
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800bf26:	7cfb      	ldrb	r3, [r7, #19]
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d22f      	bcs.n	800bf94 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d22a      	bcs.n	800bf94 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	69da      	ldr	r2, [r3, #28]
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800bf46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d823      	bhi.n	800bf94 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	7b5b      	ldrb	r3, [r3, #13]
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf5c:	e001      	b.n	800bf62 <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d012      	beq.n	800bf8e <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf70:	f000 f814 	bl	800bf9c <prvSingleStepTCPHeaderOptions>
 800bf74:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00a      	beq.n	800bf92 <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800bf7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800bf84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	4413      	add	r3, r2
 800bf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800bf8c:	e7e9      	b.n	800bf62 <prvCheckOptions+0x82>
                            break;
 800bf8e:	bf00      	nop
 800bf90:	e000      	b.n	800bf94 <prvCheckOptions+0xb4>
                            break;
 800bf92:	bf00      	nop
                    }
                }
            }
        }
    }
 800bf94:	bf00      	nop
 800bf96:	3730      	adds	r7, #48	; 0x30
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b08a      	sub	sp, #40	; 0x28
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	33d8      	adds	r3, #216	; 0xd8
 800bfb2:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	623b      	str	r3, [r7, #32]
 800bfc4:	e0bc      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d102      	bne.n	800bfd4 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	623b      	str	r3, [r7, #32]
 800bfd2:	e0b5      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d802      	bhi.n	800bfe0 <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	e0af      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d11c      	bne.n	800c022 <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d904      	bls.n	800bff8 <prvSingleStepTCPHeaderOptions+0x5c>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3301      	adds	r3, #1
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d002      	beq.n	800bffe <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	623b      	str	r3, [r7, #32]
 800bffc:	e0a0      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00b      	beq.n	800c01c <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	789a      	ldrb	r2, [r3, #2]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c014:	f043 0310 	orr.w	r3, r3, #16
 800c018:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800c01c:	2303      	movs	r3, #3
 800c01e:	623b      	str	r3, [r7, #32]
 800c020:	e08e      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d158      	bne.n	800c0dc <prvSingleStepTCPHeaderOptions+0x140>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d904      	bls.n	800c03a <prvSingleStepTCPHeaderOptions+0x9e>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3301      	adds	r3, #1
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b04      	cmp	r3, #4
 800c038:	d002      	beq.n	800c040 <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	623b      	str	r3, [r7, #32]
 800c03e:	e07f      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	3302      	adds	r3, #2
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fb67 	bl	8009718 <usChar2u16>
 800c04a:	4603      	mov	r3, r0
 800c04c:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c054:	461a      	mov	r2, r3
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	4293      	cmp	r3, r2
 800c05a:	d006      	beq.n	800c06a <prvSingleStepTCPHeaderOptions+0xce>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <prvSingleStepTCPHeaderOptions+0xce>
                    {
                        uxIndex = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800c066:	2301      	movs	r3, #1
 800c068:	61fb      	str	r3, [r7, #28]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usMSS, uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d167      	bne.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
                {
                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c076:	461a      	mov	r2, r3
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d22b      	bcs.n	800c0d6 <prvSingleStepTCPHeaderOptions+0x13a>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c084:	f043 0301 	orr.w	r3, r3, #1
 800c088:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c092:	461a      	mov	r2, r3
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	4293      	cmp	r3, r2
 800c098:	d204      	bcs.n	800c0a4 <prvSingleStepTCPHeaderOptions+0x108>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usMSS, uxNewMSS ) );
                            pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	fb02 f203 	mul.w	r2, r2, r3
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800c0d6:	2304      	movs	r3, #4
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	e031      	b.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800c0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d927      	bls.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d322      	bcc.n	800c140 <prvSingleStepTCPHeaderOptions+0x1a4>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	2b05      	cmp	r3, #5
 800c100:	d119      	bne.n	800c136 <prvSingleStepTCPHeaderOptions+0x19a>
                        {
                            ucLen -= 2U;
 800c102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c106:	3b02      	subs	r3, #2
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	3302      	adds	r3, #2
 800c110:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800c112:	e00c      	b.n	800c12e <prvSingleStepTCPHeaderOptions+0x192>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	6a39      	ldr	r1, [r7, #32]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f000 f816 	bl	800c14a <prvReadSackOption>
                                uxIndex += 8U;
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	3308      	adds	r3, #8
 800c122:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800c124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c128:	3b08      	subs	r3, #8
 800c12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800c12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c132:	2b07      	cmp	r3, #7
 800c134:	d8ee      	bhi.n	800c114 <prvSingleStepTCPHeaderOptions+0x178>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800c136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13a:	6a3a      	ldr	r2, [r7, #32]
 800c13c:	4413      	add	r3, r2
 800c13e:	623b      	str	r3, [r7, #32]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return uxIndex;
 800c140:	6a3b      	ldr	r3, [r7, #32]
    }
 800c142:	4618      	mov	r0, r3
 800c144:	3728      	adds	r7, #40	; 0x28
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b08a      	sub	sp, #40	; 0x28
 800c14e:	af02      	add	r7, sp, #8
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	4413      	add	r3, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fac0 	bl	80096e2 <ulChar2u32>
 800c162:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	3304      	adds	r3, #4
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd fab8 	bl	80096e2 <ulChar2u32>
 800c172:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	33d8      	adds	r3, #216	; 0xd8
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	69f9      	ldr	r1, [r7, #28]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f002 fd45 	bl	800ec0c <ulTCPWindowTxSack>
 800c182:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01d      	beq.n	800c1c8 <prvReadSackOption+0x7e>
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d01a      	beq.n	800c1c8 <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c196:	2300      	movs	r3, #0
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2200      	movs	r2, #0
 800c19e:	2100      	movs	r1, #0
 800c1a0:	f7ff f9bb 	bl	800b51a <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f043 0202 	orr.w	r2, r3, #2
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b4:	f003 0302 	and.w	r3, r3, #2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800c1c8:	bf00      	nop
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800c1e4:	fb02 f303 	mul.w	r3, r2, r3
 800c1e8:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800c1ee:	e005      	b.n	800c1fc <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800c1f6:	7afb      	ldrb	r3, [r7, #11]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c202:	d2f5      	bcs.n	800c1f0 <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 800c204:	7afb      	ldrb	r3, [r7, #11]
        }
 800c206:	4618      	mov	r0, r3
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c222:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2202      	movs	r2, #2
 800c228:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2204      	movs	r2, #4
 800c22e:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800c230:	89fb      	ldrh	r3, [r7, #14]
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	b29b      	uxth	r3, r3
 800c236:	b2da      	uxtb	r2, r3
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800c23c:	89fb      	ldrh	r3, [r7, #14]
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff ffc3 	bl	800c1d0 <prvWinScaleFactor>
 800c24a:	4603      	mov	r3, r0
 800c24c:	461a      	mov	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2201      	movs	r2, #1
 800c258:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2203      	movs	r2, #3
 800c25e:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2203      	movs	r2, #3
 800c264:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800c270:	2308      	movs	r3, #8
 800c272:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	4413      	add	r3, r2
 800c27a:	3314      	adds	r3, #20
 800c27c:	2201      	movs	r2, #1
 800c27e:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	3301      	adds	r3, #1
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	4413      	add	r3, r2
 800c288:	2201      	movs	r2, #1
 800c28a:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3302      	adds	r3, #2
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	4413      	add	r3, r2
 800c294:	2204      	movs	r2, #4
 800c296:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	3303      	adds	r3, #3
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	4413      	add	r3, r2
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800c2aa:	68bb      	ldr	r3, [r7, #8]
    }
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800c2bc:	f7f9 fce4 	bl	8005c88 <xTaskGetTickCount>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c2cc:	f36f 0382 	bfc	r3, #2, #1
 800c2d0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c2da:	f36f 0341 	bfc	r3, #1, #1
 800c2de:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800c2ea:	f7f9 fccd 	bl	8005c88 <xTaskGetTickCount>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	61fb      	str	r3, [r7, #28]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c312:	2b04      	cmp	r3, #4
 800c314:	d906      	bls.n	800c324 <vTCPStateChange+0x28>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d001      	beq.n	800c324 <vTCPStateChange+0x28>
 800c320:	2301      	movs	r3, #1
 800c322:	e000      	b.n	800c326 <vTCPStateChange+0x2a>
 800c324:	2300      	movs	r3, #0
 800c326:	61bb      	str	r3, [r7, #24]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d904      	bls.n	800c338 <vTCPStateChange+0x3c>
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	2b08      	cmp	r3, #8
 800c332:	d001      	beq.n	800c338 <vTCPStateChange+0x3c>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <vTCPStateChange+0x3e>
 800c338:	2300      	movs	r3, #0
 800c33a:	617b      	str	r3, [r7, #20]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	429a      	cmp	r2, r3
 800c342:	f000 8088 	beq.w	800c456 <vTCPStateChange+0x15a>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d064      	beq.n	800c416 <vTCPStateChange+0x11a>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d049      	beq.n	800c3f0 <vTCPStateChange+0xf4>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c362:	f003 0308 	and.w	r3, r3, #8
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <vTCPStateChange+0x76>
                    {
                        xParent = pxSocket;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	61fb      	str	r3, [r7, #28]
 800c370:	e010      	b.n	800c394 <vTCPStateChange+0x98>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c376:	61fb      	str	r3, [r7, #28]
                        configASSERT( xParent != NULL );
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <vTCPStateChange+0x98>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	613b      	str	r3, [r7, #16]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <vTCPStateChange+0x96>
                    }

                    if( xParent != NULL )
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d018      	beq.n	800c3cc <vTCPStateChange+0xd0>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <vTCPStateChange+0xac>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f043 0204 	orr.w	r2, r3, #4
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <vTCPStateChange+0xd0>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c3d8:	f36f 0382 	bfc	r3, #2, #1
 800c3dc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c3e6:	f043 0302 	orr.w	r3, r3, #2
 800c3ea:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800c3ee:	e024      	b.n	800c43a <vTCPStateChange+0x13e>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f043 0208 	orr.w	r2, r3, #8
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d018      	beq.n	800c43a <vTCPStateChange+0x13e>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	e011      	b.n	800c43a <vTCPStateChange+0x13e>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f043 0220 	orr.w	r2, r3, #32
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <vTCPStateChange+0x13e>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff f8de 	bl	800b602 <prvTCPSocketIsActive>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d135      	bne.n	800c4b8 <vTCPStateChange+0x1bc>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c454:	e030      	b.n	800c4b8 <vTCPStateChange+0x1bc>
            }
        }
        else
        {
            if( ( eTCPState == eCLOSED ) ||
 800c456:	78fb      	ldrb	r3, [r7, #3]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <vTCPStateChange+0x166>
 800c45c:	78fb      	ldrb	r3, [r7, #3]
 800c45e:	2b08      	cmp	r3, #8
 800c460:	d12a      	bne.n	800c4b8 <vTCPStateChange+0x1bc>
                ( eTCPState == eCLOSE_WAIT ) )
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d107      	bne.n	800c482 <vTCPStateChange+0x186>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01a      	beq.n	800c4b8 <vTCPStateChange+0x1bc>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c488:	f003 0308 	and.w	r3, r3, #8
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d112      	bne.n	800c4b8 <vTCPStateChange+0x1bc>
                    {
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 800c492:	f7fb fee9 	bl	8008268 <xIsCallingFromIPTask>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10a      	bne.n	800c4b2 <vTCPStateChange+0x1b6>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	60fb      	str	r3, [r7, #12]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <vTCPStateChange+0x1b4>
                        vSocketCloseNextTime( pxSocket );
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff f8cc 	bl	800b650 <vSocketCloseNextTime>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fef7 	bl	800c2b4 <prvTCPTouchSocket>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <vTCPStateChange+0x1d6>
        {
            vSocketWakeUpUser( xParent );
 800c4cc:	69f8      	ldr	r0, [r7, #28]
 800c4ce:	f7fd ff3f 	bl	800a350 <vSocketWakeUpUser>
        }
    }
 800c4d2:	bf00      	nop
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800c4ea:	4b35      	ldr	r3, [pc, #212]	; (800c5c0 <prvTCPBufferResize+0xe4>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800c4f2:	f240 43c6 	movw	r3, #1222	; 0x4c6
 800c4f6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800c4fe:	2301      	movs	r3, #1
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e019      	b.n	800c538 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e016      	b.n	800c538 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	4413      	add	r3, r2
 800c510:	3336      	adds	r3, #54	; 0x36
 800c512:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	2b45      	cmp	r3, #69	; 0x45
 800c518:	d801      	bhi.n	800c51e <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c51a:	2346      	movs	r3, #70	; 0x46
 800c51c:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d004      	beq.n	800c52e <prvTCPBufferResize+0x52>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d902      	bls.n	800c534 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800c52e:	2301      	movs	r3, #1
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e001      	b.n	800c538 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d023      	beq.n	800c586 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800c53e:	2100      	movs	r1, #0
 800c540:	69b8      	ldr	r0, [r7, #24]
 800c542:	f002 fd5d 	bl	800f000 <pxGetNetworkBufferWithDescriptor>
 800c546:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d032      	beq.n	800c5b4 <prvTCPBufferResize+0xd8>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00c      	beq.n	800c574 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	6998      	ldr	r0, [r3, #24]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6999      	ldr	r1, [r3, #24]
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	461a      	mov	r2, r3
 800c568:	f005 fabd 	bl	8011ae6 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c56c:	68b8      	ldr	r0, [r7, #8]
 800c56e:	f002 fdc5 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
 800c572:	e01f      	b.n	800c5b4 <prvTCPBufferResize+0xd8>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	6998      	ldr	r0, [r3, #24]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3382      	adds	r3, #130	; 0x82
 800c57c:	2246      	movs	r2, #70	; 0x46
 800c57e:	4619      	mov	r1, r3
 800c580:	f005 fab1 	bl	8011ae6 <memcpy>
 800c584:	e016      	b.n	800c5b4 <prvTCPBufferResize+0xd8>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <prvTCPBufferResize+0xc6>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	613b      	str	r3, [r7, #16]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <prvTCPBufferResize+0xc4>
            pxReturn = pxNetworkBuffer;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
    }
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3720      	adds	r7, #32
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	08012f58 	.word	0x08012f58

0800c5c4 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b094      	sub	sp, #80	; 0x50
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34

        if( ( *ppxNetworkBuffer ) != NULL )
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	643b      	str	r3, [r7, #64]	; 0x40
 800c5e4:	e002      	b.n	800c5ec <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3382      	adds	r3, #130	; 0x82
 800c5ea:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ee:	3322      	adds	r3, #34	; 0x22
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fd f83f 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800c5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	33d8      	adds	r3, #216	; 0xd8
 800c5fc:	633b      	str	r3, [r7, #48]	; 0x30
        lDataLen = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	647b      	str	r3, [r7, #68]	; 0x44
        lStreamPos = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800c606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c608:	7b5b      	ldrb	r3, [r3, #13]
 800c60a:	f043 0310 	orr.w	r3, r3, #16
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c612:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d071      	beq.n	800c700 <prvTCPPrepareSend+0x13c>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c622:	2b01      	cmp	r3, #1
 800c624:	d90a      	bls.n	800c63c <prvTCPPrepareSend+0x78>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c62c:	f107 0214 	add.w	r2, r7, #20
 800c630:	4619      	mov	r1, r3
 800c632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c634:	f002 f8d8 	bl	800e7e8 <ulTCPWindowTxGet>
 800c638:	4603      	mov	r3, r0
 800c63a:	647b      	str	r3, [r7, #68]	; 0x44
            }

            if( lDataLen > 0 )
 800c63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd5e      	ble.n	800c700 <prvTCPPrepareSend+0x13c>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6819      	ldr	r1, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff ff46 	bl	800c4dc <prvTCPBufferResize>
 800c650:	62f8      	str	r0, [r7, #44]	; 0x2c

                if( pxNewBuffer != NULL )
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	2b00      	cmp	r3, #0
 800c656:	d050      	beq.n	800c6fa <prvTCPPrepareSend+0x136>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65c:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800c664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c666:	3322      	adds	r3, #34	; 0x22
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fd f803 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800c66e:	63f8      	str	r0, [r7, #60]	; 0x3c

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	3336      	adds	r3, #54	; 0x36
 800c674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c676:	4413      	add	r3, r2
 800c678:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4619      	mov	r1, r3
 800c688:	f7fe fdc7 	bl	800b21a <uxStreamBufferDistance>
 800c68c:	6278      	str	r0, [r7, #36]	; 0x24

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c694:	2201      	movs	r2, #1
 800c696:	9200      	str	r2, [sp, #0]
 800c698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c69a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c69c:	f7fe ff3d 	bl	800b51a <uxStreamBufferGet>
 800c6a0:	6238      	str	r0, [r7, #32]
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d026      	beq.n	800c700 <prvTCPPrepareSend+0x13c>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	f7fe fdaa 	bl	800b21a <uxStreamBufferDistance>
 800c6c6:	61f8      	str	r0, [r7, #28]

                        if( ulDistance == ulDataGot )
 800c6c8:	69fa      	ldr	r2, [r7, #28]
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d117      	bne.n	800c700 <prvTCPPrepareSend+0x13c>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800c6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d2:	7b5b      	ldrb	r3, [r3, #13]
 800c6d4:	f043 0301 	orr.w	r3, r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6dc:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6e4:	441a      	add	r2, r3
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e8:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800c6f8:	e002      	b.n	800c700 <prvTCPPrepareSend+0x13c>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800c6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fe:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800c700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c702:	2b00      	cmp	r3, #0
 800c704:	db7c      	blt.n	800c800 <prvTCPPrepareSend+0x23c>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d177      	bne.n	800c800 <prvTCPPrepareSend+0x23c>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c716:	f003 0320 	and.w	r3, r3, #32
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d029      	beq.n	800c774 <prvTCPPrepareSend+0x1b0>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800c720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c722:	f001 ffa9 	bl	800e678 <xTCPWindowTxDone>
 800c726:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d023      	beq.n	800c774 <prvTCPPrepareSend+0x1b0>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c732:	f36f 1345 	bfc	r3, #5, #1
 800c736:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800c73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73c:	7b5b      	ldrb	r3, [r3, #13]
 800c73e:	f043 0301 	orr.w	r3, r3, #1
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c746:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c752:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	6a1a      	ldr	r2, [r3, #32]
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800c76c:	2106      	movs	r1, #6
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7ff fdc4 	bl	800c2fc <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d906      	bls.n	800c78c <prvTCPPrepareSend+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c77e:	2108      	movs	r1, #8
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7ff fdbb 	bl	800c2fc <vTCPStateChange>
                        lDataLen = -1;
 800c786:	f04f 33ff 	mov.w	r3, #4294967295
 800c78a:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800c78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d136      	bne.n	800c800 <prvTCPPrepareSend+0x23c>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d12e      	bne.n	800c800 <prvTCPPrepareSend+0x23c>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800c7a2:	f7f9 fa71 	bl	8005c88 <xTaskGetTickCount>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	61bb      	str	r3, [r7, #24]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800c7b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c7b4:	63bb      	str	r3, [r7, #56]	; 0x38

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <prvTCPPrepareSend+0x202>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800c7c0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c7c4:	63bb      	str	r3, [r7, #56]	; 0x38
                        }

                        if( xAge > xMax )
 800c7c6:	69ba      	ldr	r2, [r7, #24]
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d918      	bls.n	800c800 <prvTCPPrepareSend+0x23c>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800c7ce:	f7f9 fa5b 	bl	8005c88 <xTaskGetTickCount>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	65da      	str	r2, [r3, #92]	; 0x5c
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c7de:	f043 0302 	orr.w	r3, r3, #2
 800c7e2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c7ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    }
                }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 800c800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c802:	2b00      	cmp	r3, #0
 800c804:	db39      	blt.n	800c87a <prvTCPPrepareSend+0x2b6>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 800c806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c808:	2b00      	cmp	r3, #0
 800c80a:	dc0f      	bgt.n	800c82c <prvTCPPrepareSend+0x268>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d107      	bne.n	800c82c <prvTCPPrepareSend+0x268>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d026      	beq.n	800c87a <prvTCPPrepareSend+0x2b6>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800c82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82e:	7b5b      	ldrb	r3, [r3, #13]
 800c830:	f023 0308 	bic.w	r3, r3, #8
 800c834:	b2da      	uxtb	r2, r3
 800c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c838:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	3314      	adds	r3, #20
 800c840:	b2db      	uxtb	r3, r3
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	b2da      	uxtb	r2, r3
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	7b5b      	ldrb	r3, [r3, #13]
 800c84e:	f043 0310 	orr.w	r3, r3, #16
 800c852:	b2da      	uxtb	r2, r3
 800c854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c856:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 800c858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <prvTCPPrepareSend+0x2a8>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800c85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c860:	7b5b      	ldrb	r3, [r3, #13]
 800c862:	f043 0308 	orr.w	r3, r3, #8
 800c866:	b2da      	uxtb	r2, r3
 800c868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86a:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3328      	adds	r3, #40	; 0x28
 800c870:	637b      	str	r3, [r7, #52]	; 0x34
                lDataLen += ( int32_t ) uxIntermediateResult;
 800c872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c876:	4413      	add	r3, r2
 800c878:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

        return lDataLen;
 800c87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800c87c:	4618      	mov	r0, r3
 800c87e:	3748      	adds	r7, #72	; 0x48
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800c88c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c890:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d135      	bne.n	800c908 <prvTCPNextTimeout+0x84>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d012      	beq.n	800c8d2 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d809      	bhi.n	800c8ca <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c6:	60bb      	str	r3, [r7, #8]
 800c8c8:	e006      	b.n	800c8d8 <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800c8ca:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800c8ce:	60bb      	str	r3, [r7, #8]
 800c8d0:	e002      	b.n	800c8d8 <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800c8d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c8d6:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8e6:	d30a      	bcc.n	800c8fe <prvTCPNextTimeout+0x7a>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8ee:	fb02 f303 	mul.w	r3, r2, r3
 800c8f2:	4a23      	ldr	r2, [pc, #140]	; (800c980 <prvTCPNextTimeout+0xfc>)
 800c8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f8:	099b      	lsrs	r3, r3, #6
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	e000      	b.n	800c900 <prvTCPNextTimeout+0x7c>
 800c8fe:	2201      	movs	r2, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c906:	e033      	b.n	800c970 <prvTCPNextTimeout+0xec>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d12e      	bne.n	800c970 <prvTCPNextTimeout+0xec>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c91e:	f107 0208 	add.w	r2, r7, #8
 800c922:	4619      	mov	r1, r3
 800c924:	f001 ff00 	bl	800e728 <xTCPWindowTxHasData>
 800c928:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d108      	bne.n	800c942 <prvTCPNextTimeout+0xbe>
            {
                if( xResult != ( BaseType_t ) 0 )
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <prvTCPNextTimeout+0xb8>
                {
                    ulDelayMs = 1UL;
 800c936:	2301      	movs	r3, #1
 800c938:	60bb      	str	r3, [r7, #8]
 800c93a:	e002      	b.n	800c942 <prvTCPNextTimeout+0xbe>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800c93c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c940:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c948:	fb02 f303 	mul.w	r3, r2, r3
 800c94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c950:	d30a      	bcc.n	800c968 <prvTCPNextTimeout+0xe4>
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c958:	fb02 f303 	mul.w	r3, r2, r3
 800c95c:	4a08      	ldr	r2, [pc, #32]	; (800c980 <prvTCPNextTimeout+0xfc>)
 800c95e:	fba2 2303 	umull	r2, r3, r2, r3
 800c962:	099b      	lsrs	r3, r3, #6
 800c964:	b29a      	uxth	r2, r3
 800c966:	e000      	b.n	800c96a <prvTCPNextTimeout+0xe6>
 800c968:	2201      	movs	r2, #1
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	10624dd3 	.word	0x10624dd3

0800c984 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fc9c 	bl	800b2ce <uxStreamBufferMidSpace>
 800c996:	4603      	mov	r3, r0
 800c998:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dd17      	ble.n	800c9d0 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800c9a6:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9ac:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c9ae:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b4:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c9b6:	f001 fda9 	bl	800e50c <lTCPWindowTxAdd>
 800c9ba:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dd06      	ble.n	800c9d0 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fca9 	bl	800b322 <vStreamBufferMoveMid>
            }
        }
    }
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b088      	sub	sp, #32
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	3322      	adds	r3, #34	; 0x22
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fc fe43 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800c9ee:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	74fb      	strb	r3, [r7, #19]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	7b5b      	ldrb	r3, [r3, #13]
 800c9fc:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	33d8      	adds	r3, #216	; 0xd8
 800ca02:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	061a      	lsls	r2, r3, #24
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca18:	431a      	orrs	r2, r3
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca24:	431a      	orrs	r2, r3
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	0e1b      	lsrs	r3, r3, #24
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800ca30:	7cbb      	ldrb	r3, [r7, #18]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d004      	beq.n	800ca44 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10b      	bne.n	800ca6c <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6a1a      	ldr	r2, [r3, #32]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ca62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca66:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800ca6a:	e00c      	b.n	800ca86 <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	3301      	adds	r3, #1
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d106      	bne.n	800ca86 <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2211      	movs	r2, #17
 800caa2:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800caa4:	210a      	movs	r1, #10
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff fc28 	bl	800c2fc <vTCPStateChange>
 800caac:	e023      	b.n	800caf6 <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cabe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d103      	bne.n	800cad0 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2200      	movs	r2, #0
 800cacc:	735a      	strb	r2, [r3, #13]
 800cace:	e012      	b.n	800caf6 <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cad6:	f003 0302 	and.w	r3, r3, #2
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d103      	bne.n	800cae8 <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2210      	movs	r2, #16
 800cae4:	735a      	strb	r2, [r3, #13]
 800cae6:	e002      	b.n	800caee <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2200      	movs	r2, #0
 800caec:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800caee:	2108      	movs	r1, #8
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff fc03 	bl	800c2fc <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6a1a      	ldr	r2, [r3, #32]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	7b5b      	ldrb	r3, [r3, #13]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d006      	beq.n	800cb14 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb0c:	3328      	adds	r3, #40	; 0x28
 800cb0e:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800cb10:	7cfb      	ldrb	r3, [r7, #19]
 800cb12:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	731a      	strb	r2, [r3, #12]
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800cb26:	69fb      	ldr	r3, [r7, #28]
    }
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3720      	adds	r7, #32
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08c      	sub	sp, #48	; 0x30
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	3322      	adds	r3, #34	; 0x22
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fc fd97 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800cb46:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	330e      	adds	r3, #14
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fc fd15 	bl	8009582 <vCastConstPointerTo_IPHeader_t>
 800cb58:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800cb5a:	2314      	movs	r3, #20
 800cb5c:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	7b1b      	ldrb	r3, [r3, #12]
 800cb66:	089b      	lsrs	r3, r3, #2
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800cb6e:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800cb70:	7efb      	ldrb	r3, [r7, #27]
 800cb72:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	699a      	ldr	r2, [r3, #24]
 800cb78:	6979      	ldr	r1, [r7, #20]
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	440b      	add	r3, r1
 800cb7e:	330e      	adds	r3, #14
 800cb80:	441a      	add	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	3b0e      	subs	r3, #14
 800cb8c:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	885b      	ldrh	r3, [r3, #2]
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	b21a      	sxth	r2, r3
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	885b      	ldrh	r3, [r3, #2]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	b21b      	sxth	r3, r3
 800cba4:	4313      	orrs	r3, r2
 800cba6:	b21b      	sxth	r3, r3
 800cba8:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800cbaa:	8a7b      	ldrh	r3, [r7, #18]
 800cbac:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800cbae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	dd01      	ble.n	800cbba <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800cbba:	69fa      	ldr	r2, [r7, #28]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	dd06      	ble.n	800cbd4 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	4413      	add	r3, r2
 800cbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbd2:	e001      	b.n	800cbd8 <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	7b5b      	ldrb	r3, [r3, #13]
 800cbdc:	f003 0320 	and.w	r3, r3, #32
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d01c      	beq.n	800cc1e <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	8a5b      	ldrh	r3, [r3, #18]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	b21a      	sxth	r2, r3
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	8a5b      	ldrh	r3, [r3, #18]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	0a1b      	lsrs	r3, r3, #8
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	b21b      	sxth	r3, r3
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	b21b      	sxth	r3, r3
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	441a      	add	r2, r3
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc12:	f7fc fc6b 	bl	80094ec <FreeRTOS_min_int32>
 800cc16:	4602      	mov	r2, r0
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800cc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800cc20:	4618      	mov	r0, r3
 800cc22:	3730      	adds	r7, #48	; 0x30
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	3322      	adds	r3, #34	; 0x22
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fc fd24 	bl	800968a <vCastConstPointerTo_ProtocolHeaders_t>
 800cc42:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	33d8      	adds	r3, #216	; 0xd8
 800cc4c:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	061a      	lsls	r2, r3, #24
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc62:	431a      	orrs	r2, r3
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	0a1b      	lsrs	r3, r3, #8
 800cc6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	0e1b      	lsrs	r3, r3, #24
 800cc76:	4313      	orrs	r3, r2
 800cc78:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d03f      	beq.n	800cd00 <prvStoreRxData+0xd8>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d93a      	bls.n	800cd00 <prvStoreRxData+0xd8>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d006      	beq.n	800cca0 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fadd 	bl	800b256 <uxStreamBufferGetSpace>
 800cc9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc9e:	e002      	b.n	800cca6 <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca4:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	69b9      	ldr	r1, [r7, #24]
 800ccac:	69f8      	ldr	r0, [r7, #28]
 800ccae:	f001 fb2f 	bl	800e310 <lTCPWindowRxCheck>
 800ccb2:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	db10      	blt.n	800ccdc <prvStoreRxData+0xb4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800ccba:	6979      	ldr	r1, [r7, #20]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7fe f81b 	bl	800acfc <lTCPAddRxdata>
 800ccc6:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d005      	beq.n	800ccdc <prvStoreRxData+0xb4>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fc6f 	bl	800d5b4 <prvTCPSendReset>
                    xResult = -1;
 800ccd6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccda:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d113      	bne.n	800cd0a <prvStoreRxData+0xe2>
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00f      	beq.n	800cd0a <prvStoreRxData+0xe2>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7fe f802 	bl	800acfc <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800ccfe:	e004      	b.n	800cd0a <prvStoreRxData+0xe2>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd08:	e000      	b.n	800cd0c <prvStoreRxData+0xe4>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800cd0a:	bf00      	nop
        }

        return xResult;
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3730      	adds	r7, #48	; 0x30
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	3322      	adds	r3, #34	; 0x22
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fc fca4 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800cd2c:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	33d8      	adds	r3, #216	; 0xd8
 800cd36:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd3e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d013      	beq.n	800cd6e <prvSetOptions+0x58>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	3380      	adds	r3, #128	; 0x80
 800cd4a:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	3314      	adds	r3, #20
 800cd50:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800cd52:	69fa      	ldr	r2, [r7, #28]
 800cd54:	68f9      	ldr	r1, [r7, #12]
 800cd56:	68b8      	ldr	r0, [r7, #8]
 800cd58:	f004 fec5 	bl	8011ae6 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	3314      	adds	r3, #20
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	731a      	strb	r2, [r3, #12]
 800cd6c:	e031      	b.n	800cdd2 <prvSetOptions+0xbc>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d92c      	bls.n	800cdd2 <prvSetOptions+0xbc>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d024      	beq.n	800cdd2 <prvSetOptions+0xbc>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cd8e:	f36f 0300 	bfc	r3, #0, #1
 800cd92:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2202      	movs	r2, #2
 800cd9a:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2204      	movs	r2, #4
 800cda0:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cda8:	0a1b      	lsrs	r3, r3, #8
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800cdbe:	2304      	movs	r3, #4
 800cdc0:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	3314      	adds	r3, #20
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800cdd2:	69fb      	ldr	r3, [r7, #28]
    }
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3720      	adds	r7, #32
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08e      	sub	sp, #56	; 0x38
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	3322      	adds	r3, #34	; 0x22
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fc fc3f 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800cdf6:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	33d8      	adds	r3, #216	; 0xd8
 800ce00:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	7b5b      	ldrb	r3, [r3, #13]
 800ce06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	061a      	lsls	r2, r3, #24
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	0a1b      	lsrs	r3, r3, #8
 800ce22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce26:	431a      	orrs	r2, r3
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	0e1b      	lsrs	r3, r3, #24
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800ce3a:	2310      	movs	r3, #16
 800ce3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800ce40:	2317      	movs	r3, #23
 800ce42:	75fb      	strb	r3, [r7, #23]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d105      	bne.n	800ce5a <prvHandleSynReceived+0x7e>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800ce4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce52:	f043 0302 	orr.w	r3, r3, #2
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800ce5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	4013      	ands	r3, r2
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d030      	beq.n	800cece <prvHandleSynReceived+0xf2>
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ce6c:	2108      	movs	r1, #8
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff fa44 	bl	800c2fc <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	061a      	lsls	r2, r3, #24
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	021b      	lsls	r3, r3, #8
 800ce80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce84:	431a      	orrs	r2, r3
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	0a1b      	lsrs	r3, r3, #8
 800ce8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce90:	431a      	orrs	r2, r3
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	0e1b      	lsrs	r3, r3, #24
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	69fa      	ldr	r2, [r7, #28]
 800cea2:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	7b5b      	ldrb	r3, [r3, #13]
 800cea8:	f043 0304 	orr.w	r3, r3, #4
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	3328      	adds	r3, #40	; 0x28
 800ceb6:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	3314      	adds	r3, #20
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	731a      	strb	r2, [r3, #12]
 800cecc:	e070      	b.n	800cfb0 <prvHandleSynReceived+0x1d4>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d12a      	bne.n	800cf42 <prvHandleSynReceived+0x166>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	33a4      	adds	r3, #164	; 0xa4
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fc fbbf 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800cef6:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2210      	movs	r2, #16
 800cefc:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	2210      	movs	r2, #16
 800cf02:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800cf16:	69f9      	ldr	r1, [r7, #28]
 800cf18:	f001 f950 	bl	800e1bc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	1c5a      	adds	r2, r3, #1
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	6a1b      	ldr	r3, [r3, #32]
 800cf30:	1c5a      	adds	r2, r3, #1
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	635a      	str	r2, [r3, #52]	; 0x34
 800cf40:	e005      	b.n	800cf4e <prvHandleSynReceived+0x172>
            }
            else if( ulReceiveLength == 0U )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <prvHandleSynReceived+0x172>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	69fa      	ldr	r2, [r7, #28]
 800cf4c:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	69db      	ldr	r3, [r3, #28]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	62da      	str	r2, [r3, #44]	; 0x2c
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d002      	beq.n	800cf68 <prvHandleSynReceived+0x18c>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00f      	beq.n	800cf88 <prvHandleSynReceived+0x1ac>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	2210      	movs	r2, #16
 800cf6c:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	3328      	adds	r3, #40	; 0x28
 800cf72:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf8e:	f003 0310 	and.w	r3, r3, #16
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d107      	bne.n	800cfa8 <prvHandleSynReceived+0x1cc>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800cfa8:	2105      	movs	r1, #5
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7ff f9a6 	bl	800c2fc <vTCPStateChange>
        }

        return xSendLength;
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3738      	adds	r7, #56	; 0x38
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b096      	sub	sp, #88	; 0x58
 800cfbe:	af02      	add	r7, sp, #8
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	60b9      	str	r1, [r7, #8]
 800cfc4:	607a      	str	r2, [r7, #4]
 800cfc6:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	3322      	adds	r3, #34	; 0x22
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fc fb4f 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800cfd6:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfda:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	33d8      	adds	r3, #216	; 0xd8
 800cfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800cfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe4:	7b5b      	ldrb	r3, [r3, #13]
 800cfe6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800cfea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	061a      	lsls	r2, r3, #24
 800cff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	021b      	lsls	r3, r3, #8
 800cff6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cffa:	431a      	orrs	r2, r3
 800cffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	0a1b      	lsrs	r3, r3, #8
 800d002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d006:	431a      	orrs	r2, r3
 800d008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	0e1b      	lsrs	r3, r3, #24
 800d00e:	4313      	orrs	r3, r2
 800d010:	637b      	str	r3, [r7, #52]	; 0x34
 800d012:	2300      	movs	r3, #0
 800d014:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800d016:	2300      	movs	r3, #0
 800d018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d01a:	2300      	movs	r3, #0
 800d01c:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800d022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d024:	89db      	ldrh	r3, [r3, #14]
 800d026:	b29b      	uxth	r3, r3
 800d028:	021b      	lsls	r3, r3, #8
 800d02a:	b21a      	sxth	r2, r3
 800d02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02e:	89db      	ldrh	r3, [r3, #14]
 800d030:	b29b      	uxth	r3, r3
 800d032:	0a1b      	lsrs	r3, r3, #8
 800d034:	b29b      	uxth	r3, r3
 800d036:	b21b      	sxth	r3, r3
 800d038:	4313      	orrs	r3, r2
 800d03a:	b21b      	sxth	r3, r3
 800d03c:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800d03e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800d052:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800d05c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d060:	f003 0310 	and.w	r3, r3, #16
 800d064:	2b00      	cmp	r3, #0
 800d066:	d03c      	beq.n	800d0e2 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800d068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	061a      	lsls	r2, r3, #24
 800d06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	021b      	lsls	r3, r3, #8
 800d074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d078:	431a      	orrs	r2, r3
 800d07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	0a1b      	lsrs	r3, r3, #8
 800d080:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d084:	431a      	orrs	r2, r3
 800d086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	0e1b      	lsrs	r3, r3, #24
 800d08c:	4313      	orrs	r3, r2
 800d08e:	4619      	mov	r1, r3
 800d090:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d092:	f001 fd9d 	bl	800ebd0 <ulTCPWindowTxAck>
 800d096:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d020      	beq.n	800d0e2 <prvHandleEstablished+0x128>
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01d      	beq.n	800d0e2 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f7fe fa31 	bl	800b51a <uxStreamBufferGet>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d011      	beq.n	800d0e2 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f043 0202 	orr.w	r2, r3, #2
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ce:	f003 0302 	and.w	r3, r3, #2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d002      	beq.n	800d0f0 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f7ff fc4a 	bl	800c984 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d100:	f003 0320 	and.w	r3, r3, #32
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d105      	bne.n	800d116 <prvHandleEstablished+0x15c>
 800d10a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d10e:	f003 0301 	and.w	r3, r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	d039      	beq.n	800d18a <prvHandleEstablished+0x1d0>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800d116:	2301      	movs	r3, #1
 800d118:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d11e      	bne.n	800d168 <prvHandleEstablished+0x1ae>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800d12a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d12c:	f000 ff5c 	bl	800dfe8 <xTCPWindowRxEmpty>
 800d130:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800d132:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d134:	f001 faa0 	bl	800e678 <xTCPWindowTxDone>
 800d138:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <prvHandleEstablished+0x18c>
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d102      	bne.n	800d14c <prvHandleEstablished+0x192>
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800d146:	2300      	movs	r3, #0
 800d148:	64bb      	str	r3, [r7, #72]	; 0x48
 800d14a:	e00d      	b.n	800d168 <prvHandleEstablished+0x1ae>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800d14c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	441a      	add	r2, r3
 800d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b01      	cmp	r3, #1
 800d162:	dd01      	ble.n	800d168 <prvHandleEstablished+0x1ae>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	64bb      	str	r3, [r7, #72]	; 0x48
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800d168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00d      	beq.n	800d18a <prvHandleEstablished+0x1d0>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d174:	f043 0320 	orr.w	r3, r3, #32
 800d178:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4619      	mov	r1, r3
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f7ff fc28 	bl	800c9d8 <prvTCPHandleFin>
 800d188:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800d18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d12c      	bne.n	800d1ea <prvHandleEstablished+0x230>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800d190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d192:	2210      	movs	r2, #16
 800d194:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d018      	beq.n	800d1ce <prvHandleEstablished+0x214>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	3328      	adds	r3, #40	; 0x28
 800d1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b4:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <prvHandleEstablished+0x214>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1cc:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <prvHandleEstablished+0x230>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff f9f3 	bl	800c5c4 <prvTCPPrepareSend>
 800d1de:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dd01      	ble.n	800d1ea <prvHandleEstablished+0x230>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800d1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3750      	adds	r7, #80	; 0x50
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08c      	sub	sp, #48	; 0x30
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	3322      	adds	r3, #34	; 0x22
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fc fa32 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800d210:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	33d8      	adds	r3, #216	; 0xd8
 800d21a:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d236:	005b      	lsls	r3, r3, #1
 800d238:	617b      	str	r3, [r7, #20]

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d04b      	beq.n	800d2d8 <prvSendData+0xe4>
 800d240:	69ba      	ldr	r2, [r7, #24]
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	429a      	cmp	r2, r3
 800d246:	db47      	blt.n	800d2d8 <prvSendData+0xe4>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d252:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800d254:	2b00      	cmp	r3, #0
 800d256:	d13f      	bne.n	800d2d8 <prvSendData+0xe4>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	2b28      	cmp	r3, #40	; 0x28
 800d25c:	d13c      	bne.n	800d2d8 <prvSendData+0xe4>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800d264:	2b05      	cmp	r3, #5
 800d266:	d137      	bne.n	800d2d8 <prvSendData+0xe4>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800d26c:	2b10      	cmp	r3, #16
 800d26e:	d133      	bne.n	800d2d8 <prvSendData+0xe4>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d00c      	beq.n	800d296 <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d288:	4618      	mov	r0, r3
 800d28a:	f001 ff37 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usMSS ) ||            /* Received a small message. */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d29c:	461a      	mov	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d307      	bcc.n	800d2b4 <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usMSS ) ||            /* Received a small message. */
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	da04      	bge.n	800d2be <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d2bc:	e003      	b.n	800d2c6 <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2214      	movs	r2, #20
 800d2c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800d2c6:	4b16      	ldr	r3, [pc, #88]	; (800d320 <prvSendData+0x12c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b01      	cmp	r3, #1
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2d6:	e011      	b.n	800d2fc <prvSendData+0x108>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00d      	beq.n	800d2fc <prvSendData+0x108>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d004      	beq.n	800d2f6 <prvSendData+0x102>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f001 ff03 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d009      	beq.n	800d316 <prvSendData+0x122>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800d302:	4b07      	ldr	r3, [pc, #28]	; (800d320 <prvSendData+0x12c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b01      	cmp	r3, #1
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	6819      	ldr	r1, [r3, #0]
 800d30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d30e:	2300      	movs	r3, #0
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f7fe faf1 	bl	800b8f8 <prvTCPReturnPacket>
                    *ppxNetworkBuffer = NULL;
                }
            #endif
        }

        return xSendLength;
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d318:	4618      	mov	r0, r3
 800d31a:	3730      	adds	r7, #48	; 0x30
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	24008930 	.word	0x24008930

0800d324 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800d324:	b580      	push	{r7, lr}
 800d326:	b08c      	sub	sp, #48	; 0x30
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	3322      	adds	r3, #34	; 0x22
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc f99c 	bl	8009674 <vCastPointerTo_ProtocolHeaders_t>
 800d33c:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	061a      	lsls	r2, r3, #24
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	021b      	lsls	r3, r3, #8
 800d352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d356:	431a      	orrs	r2, r3
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	0a1b      	lsrs	r3, r3, #8
 800d35e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d362:	431a      	orrs	r2, r3
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	0e1b      	lsrs	r3, r3, #24
 800d36a:	4313      	orrs	r3, r2
 800d36c:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800d36e:	2300      	movs	r3, #0
 800d370:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	7b5b      	ldrb	r3, [r3, #13]
 800d376:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	33d8      	adds	r3, #216	; 0xd8
 800d37c:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f107 0208 	add.w	r2, r7, #8
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff fbcf 	bl	800cb30 <prvCheckRxData>
 800d392:	4603      	mov	r3, r0
 800d394:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d39c:	2b04      	cmp	r3, #4
 800d39e:	d90c      	bls.n	800d3ba <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	691a      	ldr	r2, [r3, #16]
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d106      	bne.n	800d3ba <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d3b2:	f043 0301 	orr.w	r3, r3, #1
 800d3b6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 800d3ba:	6a3a      	ldr	r2, [r7, #32]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	441a      	add	r2, r3
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	dd04      	ble.n	800d3d4 <prvTCPHandleState+0xb0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800d3ca:	6a3a      	ldr	r2, [r7, #32]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	441a      	add	r2, r3
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7ff fc23 	bl	800cc28 <prvStoreRxData>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da03      	bge.n	800d3f0 <prvTCPHandleState+0xcc>
        {
            xSendLength = -1;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3ee:	e0a3      	b.n	800d538 <prvTCPHandleState+0x214>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7ff fc8d 	bl	800cd16 <prvSetOptions>
 800d3fc:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d404:	2b04      	cmp	r3, #4
 800d406:	d108      	bne.n	800d41a <prvTCPHandleState+0xf6>
 800d408:	7efb      	ldrb	r3, [r7, #27]
 800d40a:	f003 031f 	and.w	r3, r3, #31
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d103      	bne.n	800d41a <prvTCPHandleState+0xf6>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800d412:	2103      	movs	r1, #3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7fe ff71 	bl	800c2fc <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800d41a:	7efb      	ldrb	r3, [r7, #27]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d022      	beq.n	800d46a <prvTCPHandleState+0x146>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d42a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d11a      	bne.n	800d46a <prvTCPHandleState+0x146>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800d434:	6a3a      	ldr	r2, [r7, #32]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	441a      	add	r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d448:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d106      	bne.n	800d46a <prvTCPHandleState+0x146>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d462:	f043 0302 	orr.w	r3, r3, #2
 800d466:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d470:	2b0b      	cmp	r3, #11
 800d472:	d860      	bhi.n	800d536 <prvTCPHandleState+0x212>
 800d474:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <prvTCPHandleState+0x158>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d537 	.word	0x0800d537
 800d480:	0800d537 	.word	0x0800d537
 800d484:	0800d505 	.word	0x0800d505
 800d488:	0800d4ad 	.word	0x0800d4ad
 800d48c:	0800d505 	.word	0x0800d505
 800d490:	0800d517 	.word	0x0800d517
 800d494:	0800d527 	.word	0x0800d527
 800d498:	0800d527 	.word	0x0800d527
 800d49c:	0800d537 	.word	0x0800d537
 800d4a0:	0800d537 	.word	0x0800d537
 800d4a4:	0800d527 	.word	0x0800d527
 800d4a8:	0800d537 	.word	0x0800d537
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800d4ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7fe feaf 	bl	800c212 <prvSetSynAckOptions>
 800d4b4:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	2212      	movs	r2, #18
 800d4ba:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	3328      	adds	r3, #40	; 0x28
 800d4c0:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	3314      	adds	r3, #20
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800d4d6:	2104      	movs	r1, #4
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7fe ff0f 	bl	800c2fc <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	1c5a      	adds	r2, r3, #1
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	1c5a      	adds	r2, r3, #1
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	621a      	str	r2, [r3, #32]
                    break;
 800d502:	e019      	b.n	800d538 <prvTCPHandleState+0x214>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	6819      	ldr	r1, [r3, #0]
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff fc65 	bl	800cddc <prvHandleSynReceived>
 800d512:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d514:	e010      	b.n	800d538 <prvTCPHandleState+0x214>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff fd4c 	bl	800cfba <prvHandleEstablished>
 800d522:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d524:	e008      	b.n	800d538 <prvTCPHandleState+0x214>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fa53 	bl	800c9d8 <prvTCPHandleFin>
 800d532:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d534:	e000      	b.n	800d538 <prvTCPHandleState+0x214>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800d536:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	dd06      	ble.n	800d54c <prvTCPHandleState+0x228>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff fe55 	bl	800d1f4 <prvSendData>
 800d54a:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d54e:	4618      	mov	r0, r3
 800d550:	3730      	adds	r7, #48	; 0x30
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop

0800d558 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	460b      	mov	r3, r1
 800d562:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fc f857 	bl	800961c <vCastPointerTo_TCPPacket_t>
 800d56e:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800d570:	2328      	movs	r3, #40	; 0x28
 800d572:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	78fa      	ldrb	r2, [r7, #3]
 800d578:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2250      	movs	r2, #80	; 0x50
 800d580:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800d584:	2300      	movs	r3, #0
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	2000      	movs	r0, #0
 800d58c:	f7fe f9b4 	bl	800b8f8 <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800d590:	2300      	movs	r3, #0
    }
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800d5a2:	2110      	movs	r1, #16
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7ff ffd7 	bl	800d558 <prvTCPSendSpecialPacketHelper>
 800d5aa:	4603      	mov	r3, r0
    }
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800d5bc:	2114      	movs	r1, #20
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff ffca 	bl	800d558 <prvTCPSendSpecialPacketHelper>
 800d5c4:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800d5d8:	f44f 6391 	mov.w	r3, #1160	; 0x488
 800d5dc:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e2:	061a      	lsls	r2, r3, #24
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e8:	021b      	lsls	r3, r3, #8
 800d5ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	0e1b      	lsrs	r3, r3, #24
 800d602:	431a      	orrs	r2, r3
 800d604:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <prvSocketSetMSS+0x64>)
 800d606:	695b      	ldr	r3, [r3, #20]
 800d608:	405a      	eors	r2, r3
 800d60a:	4b0b      	ldr	r3, [pc, #44]	; (800d638 <prvSocketSetMSS+0x68>)
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	4013      	ands	r3, r2
 800d610:	2b00      	cmp	r3, #0
 800d612:	d005      	beq.n	800d620 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800d614:	68f9      	ldr	r1, [r7, #12]
 800d616:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800d61a:	f7fb ff77 	bl	800950c <FreeRTOS_min_uint32>
 800d61e:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800d62a:	bf00      	nop
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	24000020 	.word	0x24000020
 800d638:	24007b68 	.word	0x24007b68

0800d63c <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b092      	sub	sp, #72	; 0x48
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	60bb      	str	r3, [r7, #8]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	3322      	adds	r3, #34	; 0x22
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fc f81b 	bl	800968a <vCastConstPointerTo_ProtocolHeaders_t>
 800d654:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800d656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d658:	7b5b      	ldrb	r3, [r3, #13]
 800d65a:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800d65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65e:	885b      	ldrh	r3, [r3, #2]
 800d660:	b29b      	uxth	r3, r3
 800d662:	021b      	lsls	r3, r3, #8
 800d664:	b21a      	sxth	r2, r3
 800d666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d668:	885b      	ldrh	r3, [r3, #2]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	0a1b      	lsrs	r3, r3, #8
 800d66e:	b29b      	uxth	r3, r3
 800d670:	b21b      	sxth	r3, r3
 800d672:	4313      	orrs	r3, r2
 800d674:	b21b      	sxth	r3, r3
 800d676:	873b      	strh	r3, [r7, #56]	; 0x38
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800d678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	021b      	lsls	r3, r3, #8
 800d680:	b21a      	sxth	r2, r3
 800d682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	b29b      	uxth	r3, r3
 800d688:	0a1b      	lsrs	r3, r3, #8
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	b21b      	sxth	r3, r3
 800d68e:	4313      	orrs	r3, r2
 800d690:	b21b      	sxth	r3, r3
 800d692:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800d694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	061a      	lsls	r2, r3, #24
 800d69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6a4:	431a      	orrs	r2, r3
 800d6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	0a1b      	lsrs	r3, r3, #8
 800d6ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6b0:	431a      	orrs	r2, r3
 800d6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	0e1b      	lsrs	r3, r3, #24
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	633b      	str	r3, [r7, #48]	; 0x30
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800d6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	061a      	lsls	r2, r3, #24
 800d6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	021b      	lsls	r3, r3, #8
 800d6c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6cc:	431a      	orrs	r2, r3
 800d6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	0a1b      	lsrs	r3, r3, #8
 800d6d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	0e1b      	lsrs	r3, r3, #24
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xResult = pdPASS;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	643b      	str	r3, [r7, #64]	; 0x40

        configASSERT( pxNetworkBuffer != NULL );
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10a      	bne.n	800d704 <xProcessReceivedTCPPacket+0xc8>
	__asm volatile
 800d6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	617b      	str	r3, [r7, #20]
}
 800d700:	bf00      	nop
 800d702:	e7fe      	b.n	800d702 <xProcessReceivedTCPPacket+0xc6>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <xProcessReceivedTCPPacket+0xe6>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	613b      	str	r3, [r7, #16]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <xProcessReceivedTCPPacket+0xe4>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	2b35      	cmp	r3, #53	; 0x35
 800d728:	d802      	bhi.n	800d730 <xProcessReceivedTCPPacket+0xf4>
        {
            xResult = pdFAIL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	643b      	str	r3, [r7, #64]	; 0x40
 800d72e:	e139      	b.n	800d9a4 <xProcessReceivedTCPPacket+0x368>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	330e      	adds	r3, #14
 800d736:	4618      	mov	r0, r3
 800d738:	f7fb ff23 	bl	8009582 <vCastConstPointerTo_IPHeader_t>
 800d73c:	62b8      	str	r0, [r7, #40]	; 0x28
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	061a      	lsls	r2, r3, #24
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	021b      	lsls	r3, r3, #8
 800d74a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d74e:	431a      	orrs	r2, r3
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	0a1b      	lsrs	r3, r3, #8
 800d756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d75a:	431a      	orrs	r2, r3
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	0e1b      	lsrs	r3, r3, #24
 800d762:	4313      	orrs	r3, r2
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	061a      	lsls	r2, r3, #24
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d776:	431a      	orrs	r2, r3
 800d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	0a1b      	lsrs	r3, r3, #8
 800d77e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d782:	431a      	orrs	r2, r3
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	0e1b      	lsrs	r3, r3, #24
 800d78a:	4313      	orrs	r3, r2
 800d78c:	623b      	str	r3, [r7, #32]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800d78e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800d790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d792:	6a3a      	ldr	r2, [r7, #32]
 800d794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d796:	f7fd f9ff 	bl	800ab98 <pxTCPSocketLookup>
 800d79a:	6478      	str	r0, [r7, #68]	; 0x44

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800d79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d008      	beq.n	800d7b4 <xProcessReceivedTCPPacket+0x178>
 800d7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fd ff2a 	bl	800b602 <prvTCPSocketIsActive>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d110      	bne.n	800d7d6 <xProcessReceivedTCPPacket+0x19a>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d7b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7b6:	f003 031f 	and.w	r3, r3, #31
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d008      	beq.n	800d7d0 <xProcessReceivedTCPPacket+0x194>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800d7be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7c0:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d103      	bne.n	800d7d0 <xProcessReceivedTCPPacket+0x194>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fef2 	bl	800d5b4 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	643b      	str	r3, [r7, #64]	; 0x40
 800d7d4:	e088      	b.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800d7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d11c      	bne.n	800d822 <xProcessReceivedTCPPacket+0x1e6>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800d7e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7ea:	f003 031f 	and.w	r3, r3, #31
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d00b      	beq.n	800d80a <xProcessReceivedTCPPacket+0x1ce>
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800d7f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7f4:	f003 0304 	and.w	r3, r3, #4
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d103      	bne.n	800d804 <xProcessReceivedTCPPacket+0x1c8>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fed8 	bl	800d5b4 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800d804:	2300      	movs	r3, #0
 800d806:	643b      	str	r3, [r7, #64]	; 0x40
 800d808:	e06e      	b.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	4619      	mov	r1, r3
 800d80e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d810:	f000 f8ce 	bl	800d9b0 <prvHandleListen>
 800d814:	6478      	str	r0, [r7, #68]	; 0x44

                        if( pxSocket == NULL )
 800d816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d165      	bne.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
                        {
                            xResult = pdFAIL;
 800d81c:	2300      	movs	r3, #0
 800d81e:	643b      	str	r3, [r7, #64]	; 0x40
 800d820:	e062      	b.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800d822:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d824:	f003 0304 	and.w	r3, r3, #4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d03a      	beq.n	800d8a2 <xProcessReceivedTCPPacket+0x266>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d82e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d832:	2b02      	cmp	r3, #2
 800d834:	d10b      	bne.n	800d84e <xProcessReceivedTCPPacket+0x212>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800d836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d838:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d83c:	3301      	adds	r3, #1
 800d83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d840:	429a      	cmp	r2, r3
 800d842:	d12b      	bne.n	800d89c <xProcessReceivedTCPPacket+0x260>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d844:	2100      	movs	r1, #0
 800d846:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d848:	f7fe fd58 	bl	800c2fc <vTCPStateChange>
 800d84c:	e026      	b.n	800d89c <xProcessReceivedTCPPacket+0x260>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800d84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d856:	429a      	cmp	r2, r3
 800d858:	d104      	bne.n	800d864 <xProcessReceivedTCPPacket+0x228>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d85a:	2100      	movs	r1, #0
 800d85c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d85e:	f7fe fd4d 	bl	800c2fc <vTCPStateChange>
 800d862:	e01b      	b.n	800d89c <xProcessReceivedTCPPacket+0x260>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) ) &&
 800d864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d86a:	4619      	mov	r1, r3
 800d86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d86e:	f000 fa5b 	bl	800dd28 <xSequenceGreaterThan>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d011      	beq.n	800d89c <xProcessReceivedTCPPacket+0x260>
                                     ( xSequenceLessThan( ulSequenceNumber, ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d87a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                                              pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) ) )
 800d87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d880:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( xSequenceLessThan( ulSequenceNumber, ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d884:	4413      	add	r3, r2
 800d886:	4619      	mov	r1, r3
 800d888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d88a:	f000 fa36 	bl	800dcfa <xSequenceLessThan>
 800d88e:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) ) &&
 800d890:	2b00      	cmp	r3, #0
 800d892:	d003      	beq.n	800d89c <xProcessReceivedTCPPacket+0x260>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fe7f 	bl	800d59a <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800d89c:	2300      	movs	r3, #0
 800d89e:	643b      	str	r3, [r7, #64]	; 0x40
 800d8a0:	e022      	b.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800d8a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d8a4:	f003 031f 	and.w	r3, r3, #31
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d107      	bne.n	800d8bc <xProcessReceivedTCPPacket+0x280>
 800d8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d8b2:	2b04      	cmp	r3, #4
 800d8b4:	d902      	bls.n	800d8bc <xProcessReceivedTCPPacket+0x280>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d8ba:	e015      	b.n	800d8e8 <xProcessReceivedTCPPacket+0x2ac>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800d8bc:	2322      	movs	r3, #34	; 0x22
 800d8be:	61fb      	str	r3, [r7, #28]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	3380      	adds	r3, #128	; 0x80
 800d8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8c6:	4413      	add	r3, r2
 800d8c8:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	699a      	ldr	r2, [r3, #24]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800d8d2:	2214      	movs	r2, #20
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f004 f906 	bl	8011ae6 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	330d      	adds	r3, #13
 800d8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8e0:	4413      	add	r3, r2
 800d8e2:	2210      	movs	r2, #16
 800d8e4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                    }
                }
            }

            if( xResult != pdFAIL )
 800d8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d05a      	beq.n	800d9a4 <xProcessReceivedTCPPacket+0x368>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800d8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10a      	bne.n	800d90a <xProcessReceivedTCPPacket+0x2ce>
	__asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	60fb      	str	r3, [r7, #12]
}
 800d906:	bf00      	nop
 800d908:	e7fe      	b.n	800d908 <xProcessReceivedTCPPacket+0x2cc>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800d90a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d90c:	f7fe fcd2 	bl	800c2b4 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800d910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d912:	7b1b      	ldrb	r3, [r3, #12]
 800d914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d918:	2b50      	cmp	r3, #80	; 0x50
 800d91a:	d904      	bls.n	800d926 <xProcessReceivedTCPPacket+0x2ea>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	4619      	mov	r1, r3
 800d920:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d922:	f7fe fadd 	bl	800bee0 <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800d926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d928:	89db      	ldrh	r3, [r3, #14]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	b21a      	sxth	r2, r3
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	89db      	ldrh	r3, [r3, #14]
 800d934:	b29b      	uxth	r3, r3
 800d936:	0a1b      	lsrs	r3, r3, #8
 800d938:	b29b      	uxth	r3, r3
 800d93a:	b21b      	sxth	r3, r3
 800d93c:	4313      	orrs	r3, r2
 800d93e:	b21b      	sxth	r3, r3
 800d940:	837b      	strh	r3, [r7, #26]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800d942:	8b7a      	ldrh	r2, [r7, #26]
 800d944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d946:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800d94a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d94c:	f003 0302 	and.w	r3, r3, #2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10a      	bne.n	800d96a <xProcessReceivedTCPPacket+0x32e>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800d954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d956:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d95c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800d960:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800d964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d966:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800d96a:	f107 0308 	add.w	r3, r7, #8
 800d96e:	4619      	mov	r1, r3
 800d970:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d972:	f7ff fcd7 	bl	800d324 <prvTCPHandleState>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dd05      	ble.n	800d988 <xProcessReceivedTCPPacket+0x34c>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800d97c:	f107 0308 	add.w	r3, r7, #8
 800d980:	4619      	mov	r1, r3
 800d982:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d984:	f7fd ff8a 	bl	800b89c <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d005      	beq.n	800d99a <xProcessReceivedTCPPacket+0x35e>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	4618      	mov	r0, r3
 800d992:	f001 fbb3 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800d99a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d99c:	f7fe ff72 	bl	800c884 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	643b      	str	r3, [r7, #64]	; 0x40
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800d9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    }
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3748      	adds	r7, #72	; 0x48
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b088      	sub	sp, #32
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fb fe37 	bl	8009632 <vCastConstPointerTo_TCPPacket_t>
 800d9c4:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800d9ca:	4b5a      	ldr	r3, [pc, #360]	; (800db34 <prvHandleListen+0x184>)
 800d9cc:	6958      	ldr	r0, [r3, #20]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	f7f2 fe2f 	bl	8000640 <ulApplicationGetNextSequenceNumber>
 800d9e2:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d03c      	beq.n	800da64 <prvHandleListen+0xb4>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9f0:	f003 0308 	and.w	r3, r3, #8
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00c      	beq.n	800da14 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800da04:	f043 0304 	orr.w	r3, r3, #4
 800da08:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	655a      	str	r2, [r3, #84]	; 0x54
 800da12:	e027      	b.n	800da64 <prvHandleListen+0xb4>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800da14:	2300      	movs	r3, #0
 800da16:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800da24:	429a      	cmp	r2, r3
 800da26:	d303      	bcc.n	800da30 <prvHandleListen+0x80>
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800da28:	6838      	ldr	r0, [r7, #0]
 800da2a:	f7ff fdc3 	bl	800d5b4 <prvTCPSendReset>
 800da2e:	e019      	b.n	800da64 <prvHandleListen+0xb4>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800da30:	2206      	movs	r2, #6
 800da32:	2101      	movs	r1, #1
 800da34:	2002      	movs	r0, #2
 800da36:	f7fb ff65 	bl	8009904 <FreeRTOS_socket>
 800da3a:	6138      	str	r0, [r7, #16]

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <prvHandleListen+0x9a>
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da48:	d103      	bne.n	800da52 <prvHandleListen+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800da4a:	6838      	ldr	r0, [r7, #0]
 800da4c:	f7ff fdb2 	bl	800d5b4 <prvTCPSendReset>
 800da50:	e008      	b.n	800da64 <prvHandleListen+0xb4>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800da52:	6879      	ldr	r1, [r7, #4]
 800da54:	6938      	ldr	r0, [r7, #16]
 800da56:	f000 f86f 	bl	800db38 <prvTCPSocketCopy>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <prvHandleListen+0xb4>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d05f      	beq.n	800db2a <prvHandleListen+0x17a>
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05c      	beq.n	800db2a <prvHandleListen+0x17a>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	3322      	adds	r3, #34	; 0x22
 800da76:	4618      	mov	r0, r3
 800da78:	f7fb fe07 	bl	800968a <vCastConstPointerTo_ProtocolHeaders_t>
 800da7c:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800da82:	b29b      	uxth	r3, r3
 800da84:	021b      	lsls	r3, r3, #8
 800da86:	b21a      	sxth	r2, r3
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	b29b      	uxth	r3, r3
 800da92:	b21b      	sxth	r3, r3
 800da94:	4313      	orrs	r3, r2
 800da96:	b21b      	sxth	r3, r3
 800da98:	b29a      	uxth	r2, r3
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800daa4:	061a      	lsls	r2, r3, #24
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800daac:	021b      	lsls	r3, r3, #8
 800daae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dab2:	431a      	orrs	r2, r3
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800daba:	0a1b      	lsrs	r3, r3, #8
 800dabc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dac0:	431a      	orrs	r2, r3
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800dac8:	0e1b      	lsrs	r3, r3, #24
 800daca:	431a      	orrs	r2, r3
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	061a      	lsls	r2, r3, #24
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	021b      	lsls	r3, r3, #8
 800dae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dae8:	431a      	orrs	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	0a1b      	lsrs	r3, r3, #8
 800daf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800daf4:	431a      	orrs	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	0e1b      	lsrs	r3, r3, #24
 800dafc:	431a      	orrs	r2, r3
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800db04:	69f8      	ldr	r0, [r7, #28]
 800db06:	f7ff fd63 	bl	800d5d0 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800db0a:	69f8      	ldr	r0, [r7, #28]
 800db0c:	f7fe f8d2 	bl	800bcb4 <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800db10:	2103      	movs	r1, #3
 800db12:	69f8      	ldr	r0, [r7, #28]
 800db14:	f7fe fbf2 	bl	800c2fc <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	f103 0082 	add.w	r0, r3, #130	; 0x82
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	699b      	ldr	r3, [r3, #24]
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800db22:	2246      	movs	r2, #70	; 0x46
 800db24:	4619      	mov	r1, r3
 800db26:	f003 ffde 	bl	8011ae6 <memcpy>
                             sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
        }

        return pxReturn;
 800db2a:	69fb      	ldr	r3, [r7, #28]
    }
 800db2c:	4618      	mov	r0, r3
 800db2e:	3720      	adds	r7, #32
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	24000020 	.word	0x24000020

0800db38 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	69da      	ldr	r2, [r3, #28]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	6a1a      	ldr	r2, [r3, #32]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d009      	beq.n	800dbb2 <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	62da      	str	r2, [r3, #44]	; 0x2c
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbaa:	f043 0205 	orr.w	r2, r3, #5
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	631a      	str	r2, [r3, #48]	; 0x30
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800dbb2:	4b1c      	ldr	r3, [pc, #112]	; (800dc24 <prvTCPSocketCopy+0xec>)
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	b21a      	sxth	r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dbc4:	0a1b      	lsrs	r3, r3, #8
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	b21b      	sxth	r3, r3
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dbd8:	f043 0304 	orr.w	r3, r3, #4
 800dbdc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800dbec:	3301      	adds	r3, #1
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800dbf6:	f107 010c 	add.w	r1, r7, #12
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	2208      	movs	r2, #8
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7fb ff82 	bl	8009b08 <vSocketBind>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <prvTCPSocketCopy+0xde>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            vSocketClose( pxNewSocket );
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7fc f839 	bl	8009c82 <vSocketClose>
            xResult = pdFALSE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	e001      	b.n	800dc1a <prvTCPSocketCopy+0xe2>
        }
        else
        {
            xResult = pdTRUE;
 800dc16:	2301      	movs	r3, #1
 800dc18:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800dc1a:	697b      	ldr	r3, [r7, #20]
    }
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	24000020 	.word	0x24000020

0800dc28 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc34:	021b      	lsls	r3, r3, #8
 800dc36:	b21a      	sxth	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc3c:	0a1b      	lsrs	r3, r3, #8
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	b21b      	sxth	r3, r3
 800dc42:	4313      	orrs	r3, r2
 800dc44:	b21b      	sxth	r3, r3
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800dc4e:	4b18      	ldr	r3, [pc, #96]	; (800dcb0 <xTCPCheckNewClient+0x88>)
 800dc50:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dc52:	4b18      	ldr	r3, [pc, #96]	; (800dcb4 <xTCPCheckNewClient+0x8c>)
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	61fb      	str	r3, [r7, #28]
 800dc58:	e020      	b.n	800dc9c <xTCPCheckNewClient+0x74>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	697a      	ldr	r2, [r7, #20]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d118      	bne.n	800dc96 <xTCPCheckNewClient+0x6e>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fb fd19 	bl	80096a0 <vCastPointerTo_FreeRTOS_Socket_t>
 800dc6e:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800dc76:	2b06      	cmp	r3, #6
 800dc78:	d10d      	bne.n	800dc96 <xTCPCheckNewClient+0x6e>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d005      	beq.n	800dc96 <xTCPCheckNewClient+0x6e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800dc90:	2301      	movs	r3, #1
 800dc92:	61bb      	str	r3, [r7, #24]
                    break;
 800dc94:	e006      	b.n	800dca4 <xTCPCheckNewClient+0x7c>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dc9c:	69fa      	ldr	r2, [r7, #28]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d1da      	bne.n	800dc5a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800dca4:	69bb      	ldr	r3, [r7, #24]
    }
 800dca6:	4618      	mov	r0, r3
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	240094fc 	.word	0x240094fc
 800dcb4:	240094f4 	.word	0x240094f4

0800dcb8 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800dcc0:	687b      	ldr	r3, [r7, #4]
    }
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800dcce:	b480      	push	{r7}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	db02      	blt.n	800dce8 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800dce2:	2301      	movs	r3, #1
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	e001      	b.n	800dcec <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800dcec:	68fb      	ldr	r3, [r7, #12]
        }
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 800dcfa:	b480      	push	{r7}
 800dcfc:	b085      	sub	sp, #20
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a < b */
        if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	db02      	blt.n	800dd16 <xSequenceLessThan+0x1c>
        {
            xResult = pdTRUE;
 800dd10:	2301      	movs	r3, #1
 800dd12:	60fb      	str	r3, [r7, #12]
 800dd14:	e001      	b.n	800dd1a <xSequenceLessThan+0x20>
        }
        else
        {
            xResult = pdFALSE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
    }
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a > b */
        if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db02      	blt.n	800dd44 <xSequenceGreaterThan+0x1c>
        {
            xResult = pdTRUE;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	e001      	b.n	800dd48 <xSequenceGreaterThan+0x20>
        }
        else
        {
            xResult = pdFALSE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800dd48:	68fb      	ldr	r3, [r7, #12]
    }
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	db02      	blt.n	800dd70 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	60fb      	str	r3, [r7, #12]
 800dd6e:	e001      	b.n	800dd74 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800dd70:	2300      	movs	r3, #0
 800dd72:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800dd74:	68fb      	ldr	r3, [r7, #12]
    }
 800dd76:	4618      	mov	r0, r3
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	461a      	mov	r2, r3
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f81f 	bl	800ddd8 <vListInsertGeneric>
        }
 800dd9a:	bf00      	nop
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800ddaa:	f7f7 ff6d 	bl	8005c88 <xTaskGetTickCount>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]
    }
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800ddc4:	f7f7 ff60 	bl	8005c88 <xTaskGetTickCount>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	1ad3      	subs	r3, r2, r3
    }
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689a      	ldr	r2, [r3, #8]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	601a      	str	r2, [r3, #0]
    }
 800de10:	bf00      	nop
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800de22:	4826      	ldr	r0, [pc, #152]	; (800debc <prvCreateSectors+0xa0>)
 800de24:	f7f6 fc22 	bl	800466c <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800de28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800de2c:	f7f9 fbb4 	bl	8007598 <pvPortMalloc>
 800de30:	4603      	mov	r3, r0
 800de32:	4618      	mov	r0, r3
 800de34:	f7ff ff40 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800de38:	4603      	mov	r3, r0
 800de3a:	4a21      	ldr	r2, [pc, #132]	; (800dec0 <prvCreateSectors+0xa4>)
 800de3c:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 800de3e:	4b20      	ldr	r3, [pc, #128]	; (800dec0 <prvCreateSectors+0xa4>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <prvCreateSectors+0x30>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800de46:	2300      	movs	r3, #0
 800de48:	603b      	str	r3, [r7, #0]
 800de4a:	e032      	b.n	800deb2 <prvCreateSectors+0x96>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800de4c:	4b1c      	ldr	r3, [pc, #112]	; (800dec0 <prvCreateSectors+0xa4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de54:	2100      	movs	r1, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f003 fe6d 	bl	8011b36 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800de5c:	2300      	movs	r3, #0
 800de5e:	607b      	str	r3, [r7, #4]
 800de60:	e022      	b.n	800dea8 <prvCreateSectors+0x8c>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800de62:	4b17      	ldr	r3, [pc, #92]	; (800dec0 <prvCreateSectors+0xa4>)
 800de64:	6819      	ldr	r1, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	019a      	lsls	r2, r3, #6
 800de6a:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <prvCreateSectors+0xa4>)
 800de6c:	6818      	ldr	r0, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	019b      	lsls	r3, r3, #6
 800de72:	4403      	add	r3, r0
 800de74:	440a      	add	r2, r1
 800de76:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800de78:	4b11      	ldr	r3, [pc, #68]	; (800dec0 <prvCreateSectors+0xa4>)
 800de7a:	6819      	ldr	r1, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	019a      	lsls	r2, r3, #6
 800de80:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <prvCreateSectors+0xa4>)
 800de82:	6818      	ldr	r0, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	019b      	lsls	r3, r3, #6
 800de88:	4403      	add	r3, r0
 800de8a:	440a      	add	r2, r1
 800de8c:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800de8e:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <prvCreateSectors+0xa4>)
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	019b      	lsls	r3, r3, #6
 800de96:	4413      	add	r3, r2
 800de98:	332c      	adds	r3, #44	; 0x2c
 800de9a:	4619      	mov	r1, r3
 800de9c:	4807      	ldr	r0, [pc, #28]	; (800debc <prvCreateSectors+0xa0>)
 800de9e:	f7ff ff70 	bl	800dd82 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	3301      	adds	r3, #1
 800dea6:	607b      	str	r3, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b3f      	cmp	r3, #63	; 0x3f
 800deac:	ddd9      	ble.n	800de62 <prvCreateSectors+0x46>
                }

                xReturn = pdPASS;
 800deae:	2301      	movs	r3, #1
 800deb0:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800deb2:	683b      	ldr	r3, [r7, #0]
        }
 800deb4:	4618      	mov	r0, r3
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	2400891c 	.word	0x2400891c
 800dec0:	24008918 	.word	0x24008918

0800dec4 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	33ac      	adds	r3, #172	; 0xac
 800ded6:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	e010      	b.n	800df02 <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fee7 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800deea:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	429a      	cmp	r2, r3
 800def4:	d102      	bne.n	800defc <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	613b      	str	r3, [r7, #16]
                    break;
 800defa:	e006      	b.n	800df0a <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	429a      	cmp	r2, r3
 800df08:	d1ea      	bne.n	800dee0 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800df0a:	693b      	ldr	r3, [r7, #16]
        }
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800df22:	4b30      	ldr	r3, [pc, #192]	; (800dfe4 <xTCPWindowNew+0xd0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d102      	bne.n	800df30 <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61fb      	str	r3, [r7, #28]
 800df2e:	e053      	b.n	800dfd8 <xTCPWindowNew+0xc4>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800df30:	4b2c      	ldr	r3, [pc, #176]	; (800dfe4 <xTCPWindowNew+0xd0>)
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff febc 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800df40:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xTCPWindowNew+0x4a>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	617b      	str	r3, [r7, #20]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xTCPWindowNew+0x48>
                configASSERT( pxSegment != NULL );
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xTCPWindowNew+0x66>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	613b      	str	r3, [r7, #16]
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xTCPWindowNew+0x64>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800df7a:	69b8      	ldr	r0, [r7, #24]
 800df7c:	f7f6 fc00 	bl	8004780 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <xTCPWindowNew+0x80>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	33a4      	adds	r3, #164	; 0xa4
 800df8a:	69b9      	ldr	r1, [r7, #24]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7ff fef8 	bl	800dd82 <vListInsertFifo>
 800df92:	e005      	b.n	800dfa0 <xTCPWindowNew+0x8c>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3390      	adds	r3, #144	; 0x90
 800df98:	69b9      	ldr	r1, [r7, #24]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff fef1 	bl	800dd82 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	3310      	adds	r3, #16
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff fefc 	bl	800dda2 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	2200      	movs	r2, #0
 800dfae:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <xTCPWindowNew+0xa6>
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	e000      	b.n	800dfbc <xTCPWindowNew+0xa8>
 800dfba:	2100      	movs	r1, #0
 800dfbc:	69fa      	ldr	r2, [r7, #28]
 800dfbe:	7d93      	ldrb	r3, [r2, #22]
 800dfc0:	f361 0382 	bfi	r3, r1, #2, #1
 800dfc4:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	601a      	str	r2, [r3, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
        }
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2400891c 	.word	0x2400891c

0800dfe8 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d002      	beq.n	800e000 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800dffa:	2300      	movs	r3, #0
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	e00f      	b.n	800e020 <xTCPWindowRxEmpty+0x38>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	691a      	ldr	r2, [r3, #16]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f7ff fea3 	bl	800dd56 <xSequenceGreaterThanOrEqual>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	e001      	b.n	800e020 <xTCPWindowRxEmpty+0x38>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800e020:	68fb      	ldr	r3, [r7, #12]
        }
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d102      	bne.n	800e040 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60fb      	str	r3, [r7, #12]
 800e03e:	e00b      	b.n	800e058 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff fe34 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800e050:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800e052:	68b8      	ldr	r0, [r7, #8]
 800e054:	f7f6 fb94 	bl	8004780 <uxListRemove>
            }

            return pxSegment;
 800e058:	68fb      	ldr	r3, [r7, #12]
        }
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800e062:	b580      	push	{r7, lr}
 800e064:	b084      	sub	sp, #16
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	60fb      	str	r3, [r7, #12]
 800e076:	e008      	b.n	800e08a <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fe18 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800e088:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800e08a:	68fb      	ldr	r3, [r7, #12]
        }
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d004      	beq.n	800e0ae <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3318      	adds	r3, #24
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f6 fb69 	bl	8004780 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	332c      	adds	r3, #44	; 0x2c
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f6 fb57 	bl	8004780 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	332c      	adds	r3, #44	; 0x2c
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4803      	ldr	r0, [pc, #12]	; (800e0e8 <vTCPWindowFree+0x54>)
 800e0da:	f7ff fe52 	bl	800dd82 <vListInsertFifo>
        }
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2400891c 	.word	0x2400891c

0800e0ec <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
 800e0f8:	e020      	b.n	800e13c <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	33a4      	adds	r3, #164	; 0xa4
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	e002      	b.n	800e10e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3390      	adds	r3, #144	; 0x90
 800e10c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e116:	d10e      	bne.n	800e136 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e118:	e009      	b.n	800e12e <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff fdc9 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800e126:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f7ff ffb3 	bl	800e094 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1f1      	bne.n	800e11a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	3301      	adds	r3, #1
 800e13a:	613b      	str	r3, [r7, #16]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	dddb      	ble.n	800e0fa <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800e142:	bf00      	nop
 800e144:	bf00      	nop
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800e15a:	4b17      	ldr	r3, [pc, #92]	; (800e1b8 <vTCPWindowCreate+0x6c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800e162:	f7ff fe5b 	bl	800de1c <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3390      	adds	r3, #144	; 0x90
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f6 fa7e 	bl	800466c <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	33a4      	adds	r3, #164	; 0xa4
 800e174:	4618      	mov	r0, r3
 800e176:	f7f6 fa79 	bl	800466c <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3340      	adds	r3, #64	; 0x40
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f6 fa74 	bl	800466c <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3354      	adds	r3, #84	; 0x54
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f6 fa6f 	bl	800466c <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3368      	adds	r3, #104	; 0x68
 800e192:	4618      	mov	r0, r3
 800e194:	f7f6 fa6a 	bl	800466c <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 f806 	bl	800e1bc <vTCPWindowInit>
    }
 800e1b0:	bf00      	nop
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	24008918 	.word	0x24008918

0800e1bc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800e1ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e1ce:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	7813      	ldrb	r3, [r2, #0]
 800e1da:	f043 0301 	orr.w	r3, r3, #1
 800e1de:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d024      	beq.n	800e230 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e200:	461a      	mov	r2, r3
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	4293      	cmp	r3, r2
 800e206:	d304      	bcc.n	800e212 <vTCPWindowInit+0x56>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10e      	bne.n	800e230 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	fbb2 f3f3 	udiv	r3, r2, r3
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	fb02 f203 	mul.w	r2, r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	68ba      	ldr	r2, [r7, #8]
 800e23a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800e266:	bf00      	nop
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800e272:	b580      	push	{r7, lr}
 800e274:	b08a      	sub	sp, #40	; 0x28
 800e276:	af00      	add	r7, sp, #0
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4413      	add	r3, r2
 800e288:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	33ac      	adds	r3, #172	; 0xac
 800e28e:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	623b      	str	r3, [r7, #32]
 800e296:	e02a      	b.n	800e2ee <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff fd0b 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800e2a2:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68b9      	ldr	r1, [r7, #8]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fd53 	bl	800dd56 <xSequenceGreaterThanOrEqual>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d018      	beq.n	800e2e8 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	69f9      	ldr	r1, [r7, #28]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7ff fd1c 	bl	800dcfa <xSequenceLessThan>
 800e2c2:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00f      	beq.n	800e2e8 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <xTCPWindowRxConfirm+0x72>
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	4610      	mov	r0, r2
 800e2da:	f7ff fd0e 	bl	800dcfa <xSequenceLessThan>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d001      	beq.n	800e2e8 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e2e8:	6a3b      	ldr	r3, [r7, #32]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800e2ee:	6a3a      	ldr	r2, [r7, #32]
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d1d0      	bne.n	800e298 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d003      	beq.n	800e304 <xTCPWindowRxConfirm+0x92>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	429a      	cmp	r2, r3
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800e306:	4618      	mov	r0, r3
 800e308:	3728      	adds	r7, #40	; 0x28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
	...

0800e310 <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800e310:	b580      	push	{r7, lr}
 800e312:	b08c      	sub	sp, #48	; 0x30
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800e336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d143      	bne.n	800e3c6 <lTCPWindowRxCheck+0xb6>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d903      	bls.n	800e34e <lTCPWindowRxCheck+0x3e>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
                    lReturn = -1;
 800e346:	f04f 33ff 	mov.w	r3, #4294967295
 800e34a:	627b      	str	r3, [r7, #36]	; 0x24
 800e34c:	e0bd      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800e34e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4413      	add	r3, r2
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d02c      	beq.n	800e3ba <lTCPWindowRxCheck+0xaa>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff ff82 	bl	800e272 <xTCPWindowRxConfirm>
 800e36e:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <lTCPWindowRxCheck+0x6c>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800e376:	69b8      	ldr	r0, [r7, #24]
 800e378:	f7ff fe8c 	bl	800e094 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1f0      	bne.n	800e364 <lTCPWindowRxCheck+0x54>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800e382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff fd9d 	bl	800dec4 <xTCPWindowRxFind>
 800e38a:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <lTCPWindowRxCheck+0x96>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	461a      	mov	r2, r3
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	4413      	add	r3, r2
 800e39c:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800e39e:	69b8      	ldr	r0, [r7, #24]
 800e3a0:	f7ff fe78 	bl	800e094 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800e3a4:	e7ed      	b.n	800e382 <lTCPWindowRxCheck+0x72>
                                break;
 800e3a6:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800e3a8:	697a      	ldr	r2, [r7, #20]
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d004      	beq.n	800e3ba <lTCPWindowRxCheck+0xaa>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800e3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	1ad2      	subs	r2, r2, r3
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	631a      	str	r2, [r3, #48]	; 0x30
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3be:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c4:	e081      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d103      	bne.n	800e3d8 <lTCPWindowRxCheck+0xc8>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800e3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d6:	e078      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4413      	add	r3, r2
 800e3de:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800e3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800e3e8:	6a3b      	ldr	r3, [r7, #32]
 800e3ea:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dc03      	bgt.n	800e3fa <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800e3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3f8:	e067      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	69fa      	ldr	r2, [r7, #28]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	dd03      	ble.n	800e40a <lTCPWindowRxCheck+0xfa>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
                    lReturn = -1;
 800e402:	f04f 33ff 	mov.w	r3, #4294967295
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
 800e408:	e05f      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800e40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7ff fd59 	bl	800dec4 <xTCPWindowRxFind>
 800e412:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d006      	beq.n	800e428 <lTCPWindowRxCheck+0x118>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	461a      	mov	r2, r3
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	4413      	add	r3, r2
 800e424:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800e426:	e7f0      	b.n	800e40a <lTCPWindowRxCheck+0xfa>
                            break;
 800e428:	bf00      	nop
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4a29      	ldr	r2, [pc, #164]	; (800e4d4 <lTCPWindowRxCheck+0x1c4>)
 800e42e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	061a      	lsls	r2, r3, #24
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	021b      	lsls	r3, r3, #8
 800e43a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e43e:	431a      	orrs	r2, r3
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	0a1b      	lsrs	r3, r3, #8
 800e444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e448:	431a      	orrs	r2, r3
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	0e1b      	lsrs	r3, r3, #24
 800e44e:	431a      	orrs	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	061a      	lsls	r2, r3, #24
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	021b      	lsls	r3, r3, #8
 800e45e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e462:	431a      	orrs	r2, r3
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	0a1b      	lsrs	r3, r3, #8
 800e468:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e46c:	431a      	orrs	r2, r3
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	0e1b      	lsrs	r3, r3, #24
 800e472:	431a      	orrs	r2, r3
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	220c      	movs	r2, #12
 800e47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800e482:	68b9      	ldr	r1, [r7, #8]
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff fd1d 	bl	800dec4 <xTCPWindowRxFind>
 800e48a:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <lTCPWindowRxCheck+0x18a>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
 800e498:	e017      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	2301      	movs	r3, #1
 800e49e:	68b9      	ldr	r1, [r7, #8]
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f7ff fd37 	bl	800df14 <xTCPWindowNew>
 800e4a6:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d107      	bne.n	800e4be <lTCPWindowRxCheck+0x1ae>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800e4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e4bc:	e005      	b.n	800e4ca <lTCPWindowRxCheck+0x1ba>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3730      	adds	r7, #48	; 0x30
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	0a050101 	.word	0x0a050101

0800e4d8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	db03      	blt.n	800e4fc <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800e4fc:	697b      	ldr	r3, [r7, #20]
        }
 800e4fe:	4618      	mov	r0, r3
 800e500:	371c      	adds	r7, #28
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
	...

0800e50c <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08a      	sub	sp, #40	; 0x28
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
 800e518:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e52a:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 8096 	beq.w	800e660 <lTCPWindowTxAdd+0x154>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	689a      	ldr	r2, [r3, #8]
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	f280 808f 	bge.w	800e660 <lTCPWindowTxAdd+0x154>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	7d9b      	ldrb	r3, [r3, #22]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f040 8087 	bne.w	800e660 <lTCPWindowTxAdd+0x154>
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	2b00      	cmp	r3, #0
 800e558:	f000 8082 	beq.w	800e660 <lTCPWindowTxAdd+0x154>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	685a      	ldr	r2, [r3, #4]
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	4619      	mov	r1, r3
 800e568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e56a:	f7fa ffbf 	bl	80094ec <FreeRTOS_min_int32>
 800e56e:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	441a      	add	r2, r3
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	689a      	ldr	r2, [r3, #8]
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	429a      	cmp	r2, r3
 800e586:	db02      	blt.n	800e58e <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800e58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	441a      	add	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800e5a2:	6a3a      	ldr	r2, [r7, #32]
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800e5aa:	4b32      	ldr	r3, [pc, #200]	; (800e674 <lTCPWindowTxAdd+0x168>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b01      	cmp	r3, #1
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	69f8      	ldr	r0, [r7, #28]
 800e5b6:	f7ff ff8f 	bl	800e4d8 <lTCPIncrementTxPosition>
 800e5ba:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800e5bc:	e050      	b.n	800e660 <lTCPWindowTxAdd+0x154>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f7ff fca1 	bl	800df14 <xTCPWindowNew>
 800e5d2:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d046      	beq.n	800e668 <lTCPWindowTxAdd+0x15c>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5e2:	f7fa ff83 	bl	80094ec <FreeRTOS_min_int32>
 800e5e6:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	69fa      	ldr	r2, [r7, #28]
 800e5f2:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800e5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	6839      	ldr	r1, [r7, #0]
 800e600:	69f8      	ldr	r0, [r7, #28]
 800e602:	f7ff ff69 	bl	800e4d8 <lTCPIncrementTxPosition>
 800e606:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	441a      	add	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800e614:	6a3a      	ldr	r2, [r7, #32]
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	4413      	add	r3, r2
 800e61a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	3318      	adds	r3, #24
 800e626:	4619      	mov	r1, r3
 800e628:	4610      	mov	r0, r2
 800e62a:	f7ff fbaa 	bl	800dd82 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	689a      	ldr	r2, [r3, #8]
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	429a      	cmp	r2, r3
 800e638:	da03      	bge.n	800e642 <lTCPWindowTxAdd+0x136>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	69ba      	ldr	r2, [r7, #24]
 800e63e:	67da      	str	r2, [r3, #124]	; 0x7c
 800e640:	e002      	b.n	800e648 <lTCPWindowTxAdd+0x13c>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e64e:	2b17      	cmp	r3, #23
 800e650:	d006      	beq.n	800e660 <lTCPWindowTxAdd+0x154>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <lTCPWindowTxAdd+0x168>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b02      	cmp	r3, #2
 800e658:	dc02      	bgt.n	800e660 <lTCPWindowTxAdd+0x154>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800e65a:	4b06      	ldr	r3, [pc, #24]	; (800e674 <lTCPWindowTxAdd+0x168>)
 800e65c:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800e65e:	2b01      	cmp	r3, #1
            while( lBytesLeft > 0 )
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	2b00      	cmp	r3, #0
 800e664:	dcab      	bgt.n	800e5be <lTCPWindowTxAdd+0xb2>
 800e666:	e000      	b.n	800e66a <lTCPWindowTxAdd+0x15e>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
                    }

                    break;
 800e668:	bf00      	nop
                }
            }

            return lDone;
 800e66a:	6a3b      	ldr	r3, [r7, #32]
        }
 800e66c:	4618      	mov	r0, r3
 800e66e:	3728      	adds	r7, #40	; 0x28
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	24008930 	.word	0x24008930

0800e678 <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <xTCPWindowTxDone+0x16>
 800e68a:	2301      	movs	r3, #1
 800e68c:	e000      	b.n	800e690 <xTCPWindowTxDone+0x18>
 800e68e:	2300      	movs	r3, #0
        }
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	3354      	adds	r3, #84	; 0x54
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fcd9 	bl	800e062 <xTCPWindowPeekHead>
 800e6b0:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	613b      	str	r3, [r7, #16]
 800e6bc:	e02f      	b.n	800e71e <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a1b      	ldr	r3, [r3, #32]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d306      	bcc.n	800e6d8 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a1b      	ldr	r3, [r3, #32]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	e001      	b.n	800e6dc <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800e6dc:	6979      	ldr	r1, [r7, #20]
 800e6de:	6838      	ldr	r0, [r7, #0]
 800e6e0:	f7fa ff14 	bl	800950c <FreeRTOS_min_uint32>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	1a9b      	subs	r3, r3, r2
 800e6ea:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d302      	bcc.n	800e6fe <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	613b      	str	r3, [r7, #16]
 800e6fc:	e001      	b.n	800e702 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800e6fe:	2300      	movs	r3, #0
 800e700:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <prvTCPWindowTxHasSpace+0x82>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	689a      	ldr	r2, [r3, #8]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	4619      	mov	r1, r3
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	440b      	add	r3, r1
 800e716:	429a      	cmp	r2, r3
 800e718:	d201      	bcs.n	800e71e <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800e71e:	693b      	ldr	r3, [r7, #16]
        }
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800e728:	b580      	push	{r7, lr}
 800e72a:	b088      	sub	sp, #32
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	61fb      	str	r3, [r7, #28]
 800e746:	e04a      	b.n	800e7de <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3368      	adds	r3, #104	; 0x68
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7ff fc88 	bl	800e062 <xTCPWindowPeekHead>
 800e752:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d019      	beq.n	800e78e <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	3310      	adds	r3, #16
 800e75e:	4618      	mov	r0, r3
 800e760:	f7ff fb2c 	bl	800ddbc <ulTimerGetAge>
 800e764:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76a:	461a      	mov	r2, r3
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	7d1b      	ldrb	r3, [r3, #20]
 800e770:	fa02 f303 	lsl.w	r3, r2, r3
 800e774:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d904      	bls.n	800e788 <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	1ad2      	subs	r2, r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800e788:	2301      	movs	r3, #1
 800e78a:	61fb      	str	r3, [r7, #28]
 800e78c:	e027      	b.n	800e7de <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3354      	adds	r3, #84	; 0x54
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fc65 	bl	800e062 <xTCPWindowPeekHead>
 800e798:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61fb      	str	r3, [r7, #28]
 800e7a4:	e01b      	b.n	800e7de <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800e7a6:	68b9      	ldr	r1, [r7, #8]
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff ff77 	bl	800e69c <prvTCPWindowTxHasSpace>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	e011      	b.n	800e7de <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d008      	beq.n	800e7da <xTCPWindowTxHasData+0xb2>
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	689a      	ldr	r2, [r3, #8]
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	da02      	bge.n	800e7da <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	61fb      	str	r3, [r7, #28]
 800e7d8:	e001      	b.n	800e7de <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800e7de:	69fb      	ldr	r3, [r7, #28]
        }
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3720      	adds	r7, #32
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08a      	sub	sp, #40	; 0x28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ( ( uint32_t ) ~0UL );
 800e7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f8:	623b      	str	r3, [r7, #32]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3340      	adds	r3, #64	; 0x40
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fc13 	bl	800e02a <xTCPWindowGetHead>
 800e804:	6278      	str	r0, [r7, #36]	; 0x24
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	d169      	bne.n	800e8e8 <ulTCPWindowTxGet+0x100>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3368      	adds	r3, #104	; 0x68
 800e818:	4618      	mov	r0, r3
 800e81a:	f7ff fc22 	bl	800e062 <xTCPWindowPeekHead>
 800e81e:	6278      	str	r0, [r7, #36]	; 0x24

                if( pxSegment != NULL )
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	2b00      	cmp	r3, #0
 800e824:	d01f      	beq.n	800e866 <ulTCPWindowTxGet+0x7e>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82a:	461a      	mov	r2, r3
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	7d1b      	ldrb	r3, [r3, #20]
 800e830:	fa02 f303 	lsl.w	r3, r2, r3
 800e834:	61fb      	str	r3, [r7, #28]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	3310      	adds	r3, #16
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7ff fabe 	bl	800ddbc <ulTimerGetAge>
 800e840:	4602      	mov	r2, r0
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	4293      	cmp	r3, r2
 800e846:	d20c      	bcs.n	800e862 <ulTCPWindowTxGet+0x7a>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	3368      	adds	r3, #104	; 0x68
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7ff fbec 	bl	800e02a <xTCPWindowGetHead>
 800e852:	6278      	str	r0, [r7, #36]	; 0x24
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	2200      	movs	r2, #0
 800e858:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800e85a:	4b51      	ldr	r3, [pc, #324]	; (800e9a0 <ulTCPWindowTxGet+0x1b8>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	e001      	b.n	800e866 <ulTCPWindowTxGet+0x7e>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                if( pxSegment == NULL )
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d13d      	bne.n	800e8e8 <ulTCPWindowTxGet+0x100>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	3354      	adds	r3, #84	; 0x54
 800e870:	4618      	mov	r0, r3
 800e872:	f7ff fbf6 	bl	800e062 <xTCPWindowPeekHead>
 800e876:	6278      	str	r0, [r7, #36]	; 0x24

                    if( pxSegment == NULL )
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d102      	bne.n	800e884 <ulTCPWindowTxGet+0x9c>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800e87e:	2300      	movs	r3, #0
 800e880:	623b      	str	r3, [r7, #32]
 800e882:	e031      	b.n	800e8e8 <ulTCPWindowTxGet+0x100>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f003 0302 	and.w	r3, r3, #2
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d008      	beq.n	800e8a4 <ulTCPWindowTxGet+0xbc>
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	689a      	ldr	r2, [r3, #8]
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	da02      	bge.n	800e8a4 <ulTCPWindowTxGet+0xbc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	623b      	str	r3, [r7, #32]
 800e8a2:	e021      	b.n	800e8e8 <ulTCPWindowTxGet+0x100>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800e8a4:	68b9      	ldr	r1, [r7, #8]
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f7ff fef8 	bl	800e69c <prvTCPWindowTxHasSpace>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d102      	bne.n	800e8b8 <ulTCPWindowTxGet+0xd0>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	623b      	str	r3, [r7, #32]
 800e8b6:	e017      	b.n	800e8e8 <ulTCPWindowTxGet+0x100>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3354      	adds	r3, #84	; 0x54
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fbb4 	bl	800e02a <xTCPWindowGetHead>
 800e8c2:	6278      	str	r0, [r7, #36]	; 0x24

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d102      	bne.n	800e8d4 <ulTCPWindowTxGet+0xec>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8da:	6892      	ldr	r2, [r2, #8]
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800e8e2:	4b2f      	ldr	r3, [pc, #188]	; (800e9a0 <ulTCPWindowTxGet+0x1b8>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b01      	cmp	r3, #1
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d052      	beq.n	800e994 <ulTCPWindowTxGet+0x1ac>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <ulTCPWindowTxGet+0x122>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	61bb      	str	r3, [r7, #24]
}
 800e906:	bf00      	nop
 800e908:	e7fe      	b.n	800e908 <ulTCPWindowTxGet+0x120>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00a      	beq.n	800e928 <ulTCPWindowTxGet+0x140>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	617b      	str	r3, [r7, #20]
}
 800e924:	bf00      	nop
 800e926:	e7fe      	b.n	800e926 <ulTCPWindowTxGet+0x13e>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	3318      	adds	r3, #24
 800e932:	4619      	mov	r1, r3
 800e934:	4610      	mov	r0, r2
 800e936:	f7ff fa24 	bl	800dd82 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800e93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93c:	7d93      	ldrb	r3, [r2, #22]
 800e93e:	f043 0301 	orr.w	r3, r3, #1
 800e942:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	7d1b      	ldrb	r3, [r3, #20]
 800e948:	3301      	adds	r3, #1
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	7d1b      	ldrb	r3, [r3, #20]
 800e954:	2b04      	cmp	r3, #4
 800e956:	d10d      	bne.n	800e974 <ulTCPWindowTxGet+0x18c>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	689a      	ldr	r2, [r3, #8]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	429a      	cmp	r2, r3
 800e966:	d905      	bls.n	800e974 <ulTCPWindowTxGet+0x18c>
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e96e:	005a      	lsls	r2, r3, #1
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	3310      	adds	r3, #16
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fa12 	bl	800dda2 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	623b      	str	r3, [r7, #32]
            }

            return ulReturn;
 800e994:	6a3b      	ldr	r3, [r7, #32]
        }
 800e996:	4618      	mov	r0, r3
 800e998:	3728      	adds	r7, #40	; 0x28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	24008930 	.word	0x24008930

0800e9a4 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08c      	sub	sp, #48	; 0x30
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	62bb      	str	r3, [r7, #40]	; 0x28
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3398      	adds	r3, #152	; 0x98
 800e9bc:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800e9c4:	e098      	b.n	800eaf8 <prvTCPWindowTxCheckAck+0x154>
            {
                xDoUnlink = pdFALSE;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	623b      	str	r3, [r7, #32]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7ff f972 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800e9d4:	61b8      	str	r0, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e4:	f7ff f9a0 	bl	800dd28 <xSequenceGreaterThan>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d000      	beq.n	800e9f0 <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800e9ee:	e083      	b.n	800eaf8 <prvTCPWindowTxCheckAck+0x154>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	f040 808b 	bne.w	800eb12 <prvTCPWindowTxCheckAck+0x16e>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	7d9b      	ldrb	r3, [r3, #22]
 800ea06:	f003 0302 	and.w	r3, r3, #2
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d14c      	bne.n	800eaaa <prvTCPWindowTxCheckAck+0x106>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	4413      	add	r3, r2
 800ea18:	6879      	ldr	r1, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff f984 	bl	800dd28 <xSequenceGreaterThan>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d177      	bne.n	800eb16 <prvTCPWindowTxCheckAck+0x172>
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	7d93      	ldrb	r3, [r2, #22]
 800ea2a:	f043 0302 	orr.w	r3, r3, #2
 800ea2e:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d136      	bne.n	800eaa6 <prvTCPWindowTxCheckAck+0x102>
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	4413      	add	r3, r2
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d12f      	bne.n	800eaa6 <prvTCPWindowTxCheckAck+0x102>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	3310      	adds	r3, #16
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff f9b6 	bl	800ddbc <ulTimerGetAge>
 800ea50:	4603      	mov	r3, r0
 800ea52:	613b      	str	r3, [r7, #16]

                        if( pxWindow->lSRTT >= mS )
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	dc0e      	bgt.n	800ea7c <prvTCPWindowTxCheckAck+0xd8>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea62:	4613      	mov	r3, r2
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	1a9a      	subs	r2, r3, r2
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da00      	bge.n	800ea72 <prvTCPWindowTxCheckAck+0xce>
 800ea70:	3307      	adds	r3, #7
 800ea72:	10db      	asrs	r3, r3, #3
 800ea74:	461a      	mov	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	639a      	str	r2, [r3, #56]	; 0x38
 800ea7a:	e00d      	b.n	800ea98 <prvTCPWindowTxCheckAck+0xf4>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	441a      	add	r2, r3
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	4413      	add	r3, r2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	da00      	bge.n	800ea90 <prvTCPWindowTxCheckAck+0xec>
 800ea8e:	3303      	adds	r3, #3
 800ea90:	109b      	asrs	r3, r3, #2
 800ea92:	461a      	mov	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9c:	2b31      	cmp	r3, #49	; 0x31
 800ea9e:	dc02      	bgt.n	800eaa6 <prvTCPWindowTxCheckAck+0x102>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2232      	movs	r2, #50	; 0x32
 800eaa4:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6a1b      	ldr	r3, [r3, #32]
 800eaae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d111      	bne.n	800ead8 <prvTCPWindowTxCheckAck+0x134>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800eab4:	4b1b      	ldr	r3, [pc, #108]	; (800eb24 <prvTCPWindowTxCheckAck+0x180>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b01      	cmp	r3, #1
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6a1a      	ldr	r2, [r3, #32]
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	441a      	add	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 800eac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	4413      	add	r3, r2
 800eacc:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 800eace:	69b8      	ldr	r0, [r7, #24]
 800ead0:	f7ff fae0 	bl	800e094 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 800ead4:	2300      	movs	r3, #0
 800ead6:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d008      	beq.n	800eaf0 <prvTCPWindowTxCheckAck+0x14c>
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <prvTCPWindowTxCheckAck+0x14c>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	3318      	adds	r3, #24
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f5 fe48 	bl	8004780 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 800eaf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	62bb      	str	r3, [r7, #40]	; 0x28
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800eaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d00b      	beq.n	800eb18 <prvTCPWindowTxCheckAck+0x174>
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb04:	f7ff f8f9 	bl	800dcfa <xSequenceLessThan>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f af5b 	bne.w	800e9c6 <prvTCPWindowTxCheckAck+0x22>
 800eb10:	e002      	b.n	800eb18 <prvTCPWindowTxCheckAck+0x174>
                    break;
 800eb12:	bf00      	nop
 800eb14:	e000      	b.n	800eb18 <prvTCPWindowTxCheckAck+0x174>
                        break;
 800eb16:	bf00      	nop
            }

            return ulBytesConfirmed;
 800eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        }
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3730      	adds	r7, #48	; 0x30
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	24008930 	.word	0x24008930

0800eb28 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 800eb32:	2300      	movs	r3, #0
 800eb34:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3370      	adds	r3, #112	; 0x70
 800eb3a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800eb42:	e039      	b.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7ff f8b5 	bl	800dcb8 <vCastPointerTo_TCPSegment_t>
 800eb4e:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	7d9b      	ldrb	r3, [r3, #22]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d129      	bne.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7ff f8c5 	bl	800dcfa <xSequenceLessThan>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d020      	beq.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	7d5b      	ldrb	r3, [r3, #21]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	7d5b      	ldrb	r3, [r3, #21]
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d116      	bne.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800eb90:	4b0e      	ldr	r3, [pc, #56]	; (800ebcc <prvTCPWindowFastRetransmit+0xa4>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3318      	adds	r3, #24
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f5 fdf0 	bl	8004780 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	3318      	adds	r3, #24
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f7ff f8e8 	bl	800dd82 <vListInsertFifo>
                            ulCount++;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d1c1      	bne.n	800eb44 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 800ebc0:	693b      	ldr	r3, [r7, #16]
        }
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3718      	adds	r7, #24
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	24008930 	.word	0x24008930

0800ebd0 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	6838      	ldr	r0, [r7, #0]
 800ebe4:	f7ff f873 	bl	800dcce <xSequenceLessThanOrEqual>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e005      	b.n	800ec00 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff fed3 	bl	800e9a4 <prvTCPWindowTxCheckAck>
 800ebfe:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 800ec00:	68fb      	ldr	r3, [r7, #12]
        }
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
	...

0800ec0c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f7ff febe 	bl	800e9a4 <prvTCPWindowTxCheckAck>
 800ec28:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f7ff ff7b 	bl	800eb28 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800ec32:	4b06      	ldr	r3, [pc, #24]	; (800ec4c <ulTCPWindowTxSack+0x40>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	dd03      	ble.n	800ec42 <ulTCPWindowTxSack+0x36>
 800ec3a:	6979      	ldr	r1, [r7, #20]
 800ec3c:	68b8      	ldr	r0, [r7, #8]
 800ec3e:	f7ff f873 	bl	800dd28 <xSequenceGreaterThan>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 800ec42:	693b      	ldr	r3, [r7, #16]
        }
 800ec44:	4618      	mov	r0, r3
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	24008930 	.word	0x24008930

0800ec50 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08c      	sub	sp, #48	; 0x30
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	699b      	ldr	r3, [r3, #24]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fa fcc4 	bl	80095f0 <vCastPointerTo_UDPPacket_t>
 800ec68:	62b8      	str	r0, [r7, #40]	; 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	69db      	ldr	r3, [r3, #28]
 800ec6e:	3b2a      	subs	r3, #42	; 0x2a
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800ec72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec74:	f107 030c 	add.w	r3, r7, #12
 800ec78:	4611      	mov	r1, r2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7f9 f81e 	bl	8007cbc <eARPGetCacheEntry>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 800ec86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	f000 80a5 	beq.w	800edda <vProcessGeneratedUDPPacket+0x18a>
    {
        if( eReturned == eARPCacheHit )
 800ec90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	f040 808d 	bne.w	800edb4 <vProcessGeneratedUDPPacket+0x164>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	330e      	adds	r3, #14
 800ec9e:	623b      	str	r3, [r7, #32]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	3322      	adds	r3, #34	; 0x22
 800eca4:	61fb      	str	r3, [r7, #28]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	8c1a      	ldrh	r2, [r3, #32]
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	3308      	adds	r3, #8
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	889b      	ldrh	r3, [r3, #4]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	021b      	lsls	r3, r3, #8
 800ecca:	b21a      	sxth	r2, r3
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	889b      	ldrh	r3, [r3, #4]
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	0a1b      	lsrs	r3, r3, #8
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	b21b      	sxth	r3, r3
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	b21b      	sxth	r3, r3
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	2200      	movs	r2, #0
 800ece6:	719a      	strb	r2, [r3, #6]
 800ece8:	2200      	movs	r2, #0
 800ecea:	71da      	strb	r2, [r3, #7]
             */

            /* Save options now, as they will be overwritten by memcpy */
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	799b      	ldrb	r3, [r3, #6]
 800ecf2:	76fb      	strb	r3, [r7, #27]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 800ecf4:	4b41      	ldr	r3, [pc, #260]	; (800edfc <vProcessGeneratedUDPPacket+0x1ac>)
 800ecf6:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	3306      	adds	r3, #6
 800ecfe:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800ed00:	2218      	movs	r2, #24
 800ed02:	6979      	ldr	r1, [r7, #20]
 800ed04:	6938      	ldr	r0, [r7, #16]
 800ed06:	f002 feee 	bl	8011ae6 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	331c      	adds	r3, #28
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	885b      	ldrh	r3, [r3, #2]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	021b      	lsls	r3, r3, #8
 800ed1e:	b21a      	sxth	r2, r3
 800ed20:	6a3b      	ldr	r3, [r7, #32]
 800ed22:	885b      	ldrh	r3, [r3, #2]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	0a1b      	lsrs	r3, r3, #8
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	b21b      	sxth	r3, r3
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	b21b      	sxth	r3, r3
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	6a3b      	ldr	r3, [r7, #32]
 800ed34:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	695a      	ldr	r2, [r3, #20]
 800ed3a:	6a3b      	ldr	r3, [r7, #32]
 800ed3c:	611a      	str	r2, [r3, #16]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
 800ed40:	2200      	movs	r2, #0
 800ed42:	719a      	strb	r2, [r3, #6]
 800ed44:	2200      	movs	r2, #0
 800ed46:	71da      	strb	r2, [r3, #7]
                }
            #endif

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    pxIPHeader->usHeaderChecksum = 0U;
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	729a      	strb	r2, [r3, #10]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	72da      	strb	r2, [r3, #11]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	2214      	movs	r2, #20
 800ed56:	4619      	mov	r1, r3
 800ed58:	2000      	movs	r0, #0
 800ed5a:	f7fa fa5d 	bl	8009218 <usGenerateChecksum>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461a      	mov	r2, r3
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800ed66:	6a3b      	ldr	r3, [r7, #32]
 800ed68:	895b      	ldrh	r3, [r3, #10]
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	021b      	lsls	r3, r3, #8
 800ed6e:	b21a      	sxth	r2, r3
 800ed70:	6a3b      	ldr	r3, [r7, #32]
 800ed72:	895b      	ldrh	r3, [r3, #10]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	0a1b      	lsrs	r3, r3, #8
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	b21b      	sxth	r3, r3
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	b21b      	sxth	r3, r3
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	43db      	mvns	r3, r3
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	815a      	strh	r2, [r3, #10]

                    if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0U )
 800ed8a:	7efb      	ldrb	r3, [r7, #27]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d007      	beq.n	800eda4 <vProcessGeneratedUDPPacket+0x154>
                    {
                        ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	69db      	ldr	r3, [r3, #28]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed9e:	f7fa f8d3 	bl	8008f48 <usGenerateProtocolChecksum>
 800eda2:	e01a      	b.n	800edda <vProcessGeneratedUDPPacket+0x18a>
                    }
                    else
                    {
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800edb2:	e012      	b.n	800edda <vProcessGeneratedUDPPacket+0x18a>
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 800edb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10b      	bne.n	800edd4 <vProcessGeneratedUDPPacket+0x184>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	4619      	mov	r1, r3
 800edc0:	2000      	movs	r0, #0
 800edc2:	f7f8 fe87 	bl	8007ad4 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7f9 f8ed 	bl	8007fac <vARPGenerateRequestPacket>
 800edd2:	e002      	b.n	800edda <vProcessGeneratedUDPPacket+0x18a>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 800edd4:	2302      	movs	r3, #2
 800edd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 800edda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d004      	beq.n	800edec <vProcessGeneratedUDPPacket+0x19c>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800ede2:	2101      	movs	r1, #1
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fedb 	bl	800fba0 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 800edea:	e002      	b.n	800edf2 <vProcessGeneratedUDPPacket+0x1a2>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f985 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
}
 800edf2:	bf00      	nop
 800edf4:	3730      	adds	r7, #48	; 0x30
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	24000020 	.word	0x24000020

0800ee00 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b088      	sub	sp, #32
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d10a      	bne.n	800ee2c <xProcessReceivedUDPPacket+0x2c>
	__asm volatile
 800ee16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	613b      	str	r3, [r7, #16]
}
 800ee28:	bf00      	nop
 800ee2a:	e7fe      	b.n	800ee2a <xProcessReceivedUDPPacket+0x2a>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10a      	bne.n	800ee4a <xProcessReceivedUDPPacket+0x4a>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	60fb      	str	r3, [r7, #12]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <xProcessReceivedUDPPacket+0x48>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fa fbd9 	bl	8009606 <vCastConstPointerTo_UDPPacket_t>
 800ee54:	61b8      	str	r0, [r7, #24]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 800ee56:	887b      	ldrh	r3, [r7, #2]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fb fa4f 	bl	800a2fc <pxUDPSocketLookup>
 800ee5e:	6178      	str	r0, [r7, #20]

    if( pxSocket != NULL )
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d033      	beq.n	800eece <xProcessReceivedUDPPacket+0xce>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	1d9a      	adds	r2, r3, #6
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee70:	4619      	mov	r1, r3
 800ee72:	4610      	mov	r0, r2
 800ee74:	f7f8 fe2e 	bl	8007ad4 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 800ee78:	f7f6 fe5a 	bl	8005b30 <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 800ee7c:	f7f8 fa6a 	bl	8007354 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	3338      	adds	r3, #56	; 0x38
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	4611      	mov	r1, r2
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7f5 fc1c 	bl	80046c6 <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 800ee8e:	f7f8 fa91 	bl	80073b4 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 800ee92:	f7f6 fe5b 	bl	8005b4c <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d005      	beq.n	800eeaa <xProcessReceivedUDPPacket+0xaa>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	2101      	movs	r1, #1
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f5 faff 	bl	80044a8 <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00f      	beq.n	800eed2 <xProcessReceivedUDPPacket+0xd2>
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb6:	f003 0301 	and.w	r3, r3, #1
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d009      	beq.n	800eed2 <xProcessReceivedUDPPacket+0xd2>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2101      	movs	r1, #1
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7f5 faee 	bl	80044a8 <xEventGroupSetBits>
 800eecc:	e001      	b.n	800eed2 <xProcessReceivedUDPPacket+0xd2>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 800eece:	2300      	movs	r3, #0
 800eed0:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800eed2:	69fb      	ldr	r3, [r7, #28]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3720      	adds	r7, #32
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 800eee2:	4b38      	ldr	r3, [pc, #224]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d15e      	bne.n	800efa8 <xNetworkBuffersInitialise+0xcc>
    {
        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                static StaticSemaphore_t xNetworkBufferSemaphoreBuffer;
                xNetworkBufferSemaphore = xSemaphoreCreateCountingStatic(
 800eeea:	4a37      	ldr	r2, [pc, #220]	; (800efc8 <xNetworkBuffersInitialise+0xec>)
 800eeec:	2140      	movs	r1, #64	; 0x40
 800eeee:	2040      	movs	r0, #64	; 0x40
 800eef0:	f7f5 fddf 	bl	8004ab2 <xQueueCreateCountingSemaphoreStatic>
 800eef4:	4603      	mov	r3, r0
 800eef6:	4a33      	ldr	r2, [pc, #204]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800eef8:	6013      	str	r3, [r2, #0]
            {
                xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
            }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 800eefa:	4b32      	ldr	r3, [pc, #200]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10a      	bne.n	800ef18 <xNetworkBuffersInitialise+0x3c>
	__asm volatile
 800ef02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef06:	f383 8811 	msr	BASEPRI, r3
 800ef0a:	f3bf 8f6f 	isb	sy
 800ef0e:	f3bf 8f4f 	dsb	sy
 800ef12:	607b      	str	r3, [r7, #4]
}
 800ef14:	bf00      	nop
 800ef16:	e7fe      	b.n	800ef16 <xNetworkBuffersInitialise+0x3a>

        if( xNetworkBufferSemaphore != NULL )
 800ef18:	4b2a      	ldr	r3, [pc, #168]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d043      	beq.n	800efa8 <xNetworkBuffersInitialise+0xcc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800ef20:	4b28      	ldr	r3, [pc, #160]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4929      	ldr	r1, [pc, #164]	; (800efcc <xNetworkBuffersInitialise+0xf0>)
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f6 fb1e 	bl	8005568 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 800ef2c:	4828      	ldr	r0, [pc, #160]	; (800efd0 <xNetworkBuffersInitialise+0xf4>)
 800ef2e:	f7f5 fb9d 	bl	800466c <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800ef32:	2300      	movs	r3, #0
 800ef34:	60bb      	str	r3, [r7, #8]
 800ef36:	e031      	b.n	800ef9c <xNetworkBuffersInitialise+0xc0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800ef38:	4926      	ldr	r1, [pc, #152]	; (800efd4 <xNetworkBuffersInitialise+0xf8>)
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	4413      	add	r3, r2
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	440b      	add	r3, r1
 800ef46:	3318      	adds	r3, #24
 800ef48:	2200      	movs	r2, #0
 800ef4a:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	4413      	add	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	4a1f      	ldr	r2, [pc, #124]	; (800efd4 <xNetworkBuffersInitialise+0xf8>)
 800ef58:	4413      	add	r3, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f5 fba6 	bl	80046ac <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800ef60:	68ba      	ldr	r2, [r7, #8]
 800ef62:	4613      	mov	r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	4413      	add	r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4a1a      	ldr	r2, [pc, #104]	; (800efd4 <xNetworkBuffersInitialise+0xf8>)
 800ef6c:	1899      	adds	r1, r3, r2
 800ef6e:	4819      	ldr	r0, [pc, #100]	; (800efd4 <xNetworkBuffersInitialise+0xf8>)
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	4613      	mov	r3, r2
 800ef74:	00db      	lsls	r3, r3, #3
 800ef76:	4413      	add	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4403      	add	r3, r0
 800ef7c:	330c      	adds	r3, #12
 800ef7e:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4a12      	ldr	r2, [pc, #72]	; (800efd4 <xNetworkBuffersInitialise+0xf8>)
 800ef8c:	4413      	add	r3, r2
 800ef8e:	4619      	mov	r1, r3
 800ef90:	480f      	ldr	r0, [pc, #60]	; (800efd0 <xNetworkBuffersInitialise+0xf4>)
 800ef92:	f7f5 fbbc 	bl	800470e <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	60bb      	str	r3, [r7, #8]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b3f      	cmp	r3, #63	; 0x3f
 800efa0:	d9ca      	bls.n	800ef38 <xNetworkBuffersInitialise+0x5c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800efa2:	4b0d      	ldr	r3, [pc, #52]	; (800efd8 <xNetworkBuffersInitialise+0xfc>)
 800efa4:	2240      	movs	r2, #64	; 0x40
 800efa6:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 800efa8:	4b06      	ldr	r3, [pc, #24]	; (800efc4 <xNetworkBuffersInitialise+0xe8>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d102      	bne.n	800efb6 <xNetworkBuffersInitialise+0xda>
    {
        xReturn = pdFAIL;
 800efb0:	2300      	movs	r3, #0
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e001      	b.n	800efba <xNetworkBuffersInitialise+0xde>
    }
    else
    {
        xReturn = pdPASS;
 800efb6:	2301      	movs	r3, #1
 800efb8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800efba:	68fb      	ldr	r3, [r7, #12]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	2400924c 	.word	0x2400924c
 800efc8:	24009250 	.word	0x24009250
 800efcc:	08012ec0 	.word	0x08012ec0
 800efd0:	24008934 	.word	0x24008934
 800efd4:	2400894c 	.word	0x2400894c
 800efd8:	24008948 	.word	0x24008948

0800efdc <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d005      	beq.n	800eff6 <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3b0a      	subs	r3, #10
 800efee:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7f8 fb9d 	bl	8007730 <vPortFree>
    }
}
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
	...

0800f000 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 800f00a:	2300      	movs	r3, #0
 800f00c:	617b      	str	r3, [r7, #20]
    size_t uxCount;

    if( ( xRequestedSizeBytes <= ( ipconfigNETWORK_MTU + ipSIZE_OF_ETH_HEADER ) ) && ( xNetworkBufferSemaphore != NULL ) )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f240 42be 	movw	r2, #1214	; 0x4be
 800f014:	4293      	cmp	r3, r2
 800f016:	d866      	bhi.n	800f0e6 <pxGetNetworkBufferWithDescriptor+0xe6>
 800f018:	4b35      	ldr	r3, [pc, #212]	; (800f0f0 <pxGetNetworkBufferWithDescriptor+0xf0>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d062      	beq.n	800f0e6 <pxGetNetworkBufferWithDescriptor+0xe6>
    {
        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800f020:	4b33      	ldr	r3, [pc, #204]	; (800f0f0 <pxGetNetworkBufferWithDescriptor+0xf0>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	4618      	mov	r0, r3
 800f028:	f7f6 f828 	bl	800507c <xQueueSemaphoreTake>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d159      	bne.n	800f0e6 <pxGetNetworkBufferWithDescriptor+0xe6>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 800f032:	f7f8 f98f 	bl	8007354 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800f036:	4b2f      	ldr	r3, [pc, #188]	; (800f0f4 <pxGetNetworkBufferWithDescriptor+0xf4>)
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	617b      	str	r3, [r7, #20]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	4618      	mov	r0, r3
 800f042:	f7f5 fb9d 	bl	8004780 <uxListRemove>
            }
            taskEXIT_CRITICAL();
 800f046:	f7f8 f9b5 	bl	80073b4 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800f04a:	4b2a      	ldr	r3, [pc, #168]	; (800f0f4 <pxGetNetworkBufferWithDescriptor+0xf4>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	613b      	str	r3, [r7, #16]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 800f050:	4b29      	ldr	r3, [pc, #164]	; (800f0f8 <pxGetNetworkBufferWithDescriptor+0xf8>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	429a      	cmp	r2, r3
 800f058:	d202      	bcs.n	800f060 <pxGetNetworkBufferWithDescriptor+0x60>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 800f05a:	4a27      	ldr	r2, [pc, #156]	; (800f0f8 <pxGetNetworkBufferWithDescriptor+0xf8>)
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	699b      	ldr	r3, [r3, #24]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00a      	beq.n	800f07e <pxGetNetworkBufferWithDescriptor+0x7e>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	60fb      	str	r3, [r7, #12]
}
 800f07a:	bf00      	nop
 800f07c:	e7fe      	b.n	800f07c <pxGetNetworkBufferWithDescriptor+0x7c>

            if( xRequestedSizeBytes > 0U )
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d030      	beq.n	800f0e6 <pxGetNetworkBufferWithDescriptor+0xe6>
            {
                if( ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b45      	cmp	r3, #69	; 0x45
 800f088:	d801      	bhi.n	800f08e <pxGetNetworkBufferWithDescriptor+0x8e>
                {
                    /* ARP packets can replace application packets, so the storage must be
                     * at least large enough to hold an ARP. */
                    xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800f08a:	2346      	movs	r3, #70	; 0x46
 800f08c:	607b      	str	r3, [r7, #4]
                }

                /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
                 * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
                xRequestedSizeBytes += 2U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3302      	adds	r3, #2
 800f092:	607b      	str	r3, [r7, #4]

                if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f003 0303 	and.w	r3, r3, #3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d004      	beq.n	800f0a8 <pxGetNetworkBufferWithDescriptor+0xa8>
                {
                    xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f043 0303 	orr.w	r3, r3, #3
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	607b      	str	r3, [r7, #4]
                }

                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	330a      	adds	r3, #10
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f8 fa73 	bl	8007598 <pvPortMalloc>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	699b      	ldr	r3, [r3, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d105      	bne.n	800f0cc <pxGetNetworkBufferWithDescriptor+0xcc>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 800f0c0:	6978      	ldr	r0, [r7, #20]
 800f0c2:	f000 f81b 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	617b      	str	r3, [r7, #20]
 800f0ca:	e00c      	b.n	800f0e6 <pxGetNetworkBufferWithDescriptor+0xe6>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	699b      	ldr	r3, [r3, #24]
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	f103 020a 	add.w	r2, r3, #10
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	61da      	str	r2, [r3, #28]
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 800f0e6:	697b      	ldr	r3, [r7, #20]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	2400924c 	.word	0x2400924c
 800f0f4:	24008934 	.word	0x24008934
 800f0f8:	24008948 	.word	0x24008948

0800f0fc <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ff67 	bl	800efdc <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	619a      	str	r2, [r3, #24]
    pxNetworkBuffer->xDataLength = 0U;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	61da      	str	r2, [r3, #28]

    taskENTER_CRITICAL();
 800f11a:	f7f8 f91b 	bl	8007354 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	4a0f      	ldr	r2, [pc, #60]	; (800f160 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d101      	bne.n	800f12c <vReleaseNetworkBufferAndDescriptor+0x30>
 800f128:	2301      	movs	r3, #1
 800f12a:	e000      	b.n	800f12e <vReleaseNetworkBufferAndDescriptor+0x32>
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d104      	bne.n	800f140 <vReleaseNetworkBufferAndDescriptor+0x44>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4619      	mov	r1, r3
 800f13a:	4809      	ldr	r0, [pc, #36]	; (800f160 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800f13c:	f7f5 fac3 	bl	80046c6 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 800f140:	f7f8 f938 	bl	80073b4 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <vReleaseNetworkBufferAndDescriptor+0x5c>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 800f14a:	4b06      	ldr	r3, [pc, #24]	; (800f164 <vReleaseNetworkBufferAndDescriptor+0x68>)
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	2300      	movs	r3, #0
 800f150:	2200      	movs	r2, #0
 800f152:	2100      	movs	r1, #0
 800f154:	f7f5 fd18 	bl	8004b88 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 800f158:	bf00      	nop
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	24008934 	.word	0x24008934
 800f164:	2400924c 	.word	0x2400924c

0800f168 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 800f168:	b480      	push	{r7}
 800f16a:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800f16c:	4b03      	ldr	r3, [pc, #12]	; (800f17c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 800f16e:	681b      	ldr	r3, [r3, #0]
}
 800f170:	4618      	mov	r0, r3
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	24008934 	.word	0x24008934

0800f180 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 800f180:	b480      	push	{r7}
 800f182:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 800f184:	4b03      	ldr	r3, [pc, #12]	; (800f194 <uxGetMinimumFreeNetworkBuffers+0x14>)
 800f186:	681b      	ldr	r3, [r3, #0]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	24008948 	.word	0x24008948

0800f198 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a08      	ldr	r2, [pc, #32]	; (800f1c4 <xHas_1F_PHYSPCS+0x2c>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d002      	beq.n	800f1ae <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	60fb      	str	r3, [r7, #12]
            break;
 800f1ac:	e002      	b.n	800f1b4 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60fb      	str	r3, [r7, #12]
            break;
 800f1b2:	bf00      	nop
    }

    return xResult;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20005c90 	.word	0x20005c90

0800f1c8 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a0a      	ldr	r2, [pc, #40]	; (800f1fc <xHas_19_PHYCR+0x34>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d003      	beq.n	800f1e0 <xHas_19_PHYCR+0x18>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a09      	ldr	r2, [pc, #36]	; (800f200 <xHas_19_PHYCR+0x38>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d102      	bne.n	800f1e6 <xHas_19_PHYCR+0x1e>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	60fb      	str	r3, [r7, #12]
            break;
 800f1e4:	e002      	b.n	800f1ec <xHas_19_PHYCR+0x24>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
            break;
 800f1ea:	bf00      	nop
    }

    return xResult;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	0007c130 	.word	0x0007c130
 800f200:	20005c90 	.word	0x20005c90

0800f204 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 800f210:	2240      	movs	r2, #64	; 0x40
 800f212:	2100      	movs	r1, #0
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f002 fc8e 	bl	8011b36 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	605a      	str	r2, [r3, #4]
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b086      	sub	sp, #24
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	629a      	str	r2, [r3, #40]	; 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 800f23c:	2300      	movs	r3, #0
 800f23e:	617b      	str	r3, [r7, #20]
 800f240:	e03a      	b.n	800f2b8 <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f107 020c 	add.w	r2, r7, #12
 800f24e:	2103      	movs	r1, #3
 800f250:	6978      	ldr	r0, [r7, #20]
 800f252:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d029      	beq.n	800f2b2 <xPhyDiscover+0x84>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d026      	beq.n	800f2b2 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f107 0208 	add.w	r2, r7, #8
 800f26c:	2102      	movs	r1, #2
 800f26e:	6978      	ldr	r0, [r7, #20]
 800f270:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	041a      	lsls	r2, r3, #16
 800f276:	68f9      	ldr	r1, [r7, #12]
 800f278:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f27c:	400b      	ands	r3, r1
 800f27e:	4313      	orrs	r3, r2
 800f280:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	b2d1      	uxtb	r1, r2
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	460a      	mov	r2, r1
 800f290:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3202      	adds	r2, #2
 800f29a:	6939      	ldr	r1, [r7, #16]
 800f29c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	629a      	str	r2, [r3, #40]	; 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	d005      	beq.n	800f2be <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	617b      	str	r3, [r7, #20]
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2b1f      	cmp	r3, #31
 800f2bc:	ddc1      	ble.n	800f242 <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3718      	adds	r7, #24
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b08c      	sub	sp, #48	; 0x30
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
 800f2d2:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f2d8:	2300      	movs	r3, #0
 800f2da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2dc:	e017      	b.n	800f30e <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	4413      	add	r3, r2
 800f2e4:	3318      	adds	r3, #24
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f107 0218 	add.w	r2, r7, #24
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	69f8      	ldr	r0, [r7, #28]
 800f2f6:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	69ba      	ldr	r2, [r7, #24]
 800f2fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f302:	2100      	movs	r1, #0
 800f304:	69f8      	ldr	r0, [r7, #28]
 800f306:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	3301      	adds	r3, #1
 800f30c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f314:	429a      	cmp	r2, r3
 800f316:	dbe2      	blt.n	800f2de <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 800f318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f31c:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 800f31e:	f107 030c 	add.w	r3, r7, #12
 800f322:	4618      	mov	r0, r3
 800f324:	f7f6 ff30 	bl	8006188 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f328:	2300      	movs	r3, #0
 800f32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f32c:	e01b      	b.n	800f366 <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f332:	4413      	add	r3, r2
 800f334:	3318      	adds	r3, #24
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f107 0218 	add.w	r2, r7, #24
 800f342:	2100      	movs	r1, #0
 800f344:	6a38      	ldr	r0, [r7, #32]
 800f346:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1UL << xPhyIndex );
 800f352:	2201      	movs	r2, #1
 800f354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f356:	fa02 f303 	lsl.w	r3, r2, r3
 800f35a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f35c:	4313      	orrs	r3, r2
 800f35e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	3301      	adds	r3, #1
 800f364:	62bb      	str	r3, [r7, #40]	; 0x28
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f36c:	429a      	cmp	r2, r3
 800f36e:	dbde      	blt.n	800f32e <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 800f370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	429a      	cmp	r2, r3
 800f376:	d00e      	beq.n	800f396 <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 800f378:	f107 0214 	add.w	r2, r7, #20
 800f37c:	f107 030c 	add.w	r3, r7, #12
 800f380:	4611      	mov	r1, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7f6 ff3c 	bl	8006200 <xTaskCheckForTimeOut>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d105      	bne.n	800f39a <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f38e:	2032      	movs	r0, #50	; 0x32
 800f390:	f7f6 fb2a 	bl	80059e8 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f394:	e7c8      	b.n	800f328 <xPhyReset+0x5e>
            break;
 800f396:	bf00      	nop
 800f398:	e000      	b.n	800f39c <xPhyReset+0xd2>
            break;
 800f39a:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f39c:	2300      	movs	r3, #0
 800f39e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3a0:	e01f      	b.n	800f3e2 <xPhyReset+0x118>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 800f3a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d114      	bne.n	800f3dc <xPhyReset+0x112>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	4413      	add	r3, r2
 800f3b8:	3318      	adds	r3, #24
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	627b      	str	r3, [r7, #36]	; 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f107 0218 	add.w	r2, r7, #24
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ca:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3da:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	3301      	adds	r3, #1
 800f3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	dbda      	blt.n	800f3a2 <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f3ec:	2032      	movs	r0, #50	; 0x32
 800f3ee:	f7f6 fafb 	bl	80059e8 <vTaskDelay>

    return ulDoneMask;
 800f3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3730      	adds	r7, #48	; 0x30
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b088      	sub	sp, #32
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	dc02      	bgt.n	800f414 <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 800f40e:	f04f 33ff 	mov.w	r3, #4294967295
 800f412:	e0e7      	b.n	800f5e4 <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b03      	cmp	r3, #3
 800f41a:	d107      	bne.n	800f42c <xPhyConfigure+0x30>
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	789b      	ldrb	r3, [r3, #2]
 800f420:	2b03      	cmp	r3, #3
 800f422:	d103      	bne.n	800f42c <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 800f424:	f240 13e1 	movw	r3, #481	; 0x1e1
 800f428:	61fb      	str	r3, [r7, #28]
 800f42a:	e044      	b.n	800f4b6 <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 800f42c:	2301      	movs	r3, #1
 800f42e:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b03      	cmp	r3, #3
 800f436:	d10d      	bne.n	800f454 <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	789b      	ldrb	r3, [r3, #2]
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	d104      	bne.n	800f44a <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	e035      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800f450:	61fb      	str	r3, [r7, #28]
 800f452:	e030      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	789b      	ldrb	r3, [r3, #2]
 800f458:	2b03      	cmp	r3, #3
 800f45a:	d10d      	bne.n	800f478 <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d104      	bne.n	800f46e <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f46a:	61fb      	str	r3, [r7, #28]
 800f46c:	e023      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f474:	61fb      	str	r3, [r7, #28]
 800f476:	e01e      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d10d      	bne.n	800f49c <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	789b      	ldrb	r3, [r3, #2]
 800f484:	2b02      	cmp	r3, #2
 800f486:	d104      	bne.n	800f492 <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f48e:	61fb      	str	r3, [r7, #28]
 800f490:	e011      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f498:	61fb      	str	r3, [r7, #28]
 800f49a:	e00c      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	789b      	ldrb	r3, [r3, #2]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d104      	bne.n	800f4ae <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4aa:	61fb      	str	r3, [r7, #28]
 800f4ac:	e003      	b.n	800f4b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	f043 0320 	orr.w	r3, r3, #32
 800f4b4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7ff ff00 	bl	800f2ca <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	61bb      	str	r3, [r7, #24]
 800f4ce:	e07a      	b.n	800f5c6 <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	3318      	adds	r3, #24
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	69ba      	ldr	r2, [r7, #24]
 800f4e0:	3202      	adds	r2, #2
 800f4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e6:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	69fa      	ldr	r2, [r7, #28]
 800f4ee:	2104      	movs	r1, #4
 800f4f0:	6978      	ldr	r0, [r7, #20]
 800f4f2:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f107 020c 	add.w	r2, r7, #12
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	6978      	ldr	r0, [r7, #20]
 800f500:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 800f508:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f510:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	2b02      	cmp	r3, #2
 800f518:	d003      	beq.n	800f522 <xPhyConfigure+0x126>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	2b03      	cmp	r3, #3
 800f520:	d104      	bne.n	800f52c <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f528:	60fb      	str	r3, [r7, #12]
 800f52a:	e007      	b.n	800f53c <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d103      	bne.n	800f53c <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f53a:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	789b      	ldrb	r3, [r3, #2]
 800f540:	2b02      	cmp	r3, #2
 800f542:	d003      	beq.n	800f54c <xPhyConfigure+0x150>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	789b      	ldrb	r3, [r3, #2]
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d104      	bne.n	800f556 <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f552:	60fb      	str	r3, [r7, #12]
 800f554:	e007      	b.n	800f566 <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	789b      	ldrb	r3, [r3, #2]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d103      	bne.n	800f566 <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f564:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 800f566:	6938      	ldr	r0, [r7, #16]
 800f568:	f7ff fe2e 	bl	800f1c8 <xHas_19_PHYCR>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d026      	beq.n	800f5c0 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f107 0208 	add.w	r2, r7, #8
 800f57a:	2119      	movs	r1, #25
 800f57c:	6978      	ldr	r0, [r7, #20]
 800f57e:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f586:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	785b      	ldrb	r3, [r3, #1]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d104      	bne.n	800f59a <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f596:	60bb      	str	r3, [r7, #8]
 800f598:	e00c      	b.n	800f5b4 <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	785b      	ldrb	r3, [r3, #1]
 800f59e:	2b02      	cmp	r3, #2
 800f5a0:	d104      	bne.n	800f5ac <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5a8:	60bb      	str	r3, [r7, #8]
 800f5aa:	e003      	b.n	800f5b4 <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f5b2:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	2119      	movs	r1, #25
 800f5bc:	6978      	ldr	r0, [r7, #20]
 800f5be:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	61bb      	str	r3, [r7, #24]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ca:	69ba      	ldr	r2, [r7, #24]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	f6ff af7f 	blt.w	800f4d0 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	62da      	str	r2, [r3, #44]	; 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	69fa      	ldr	r2, [r7, #28]
 800f5e0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800f5e2:	2300      	movs	r3, #0
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3720      	adds	r7, #32
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b090      	sub	sp, #64	; 0x40
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d101      	bne.n	800f600 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	e148      	b.n	800f892 <xPhyStartAutoNegotiation+0x2a6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f600:	2300      	movs	r3, #0
 800f602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f604:	e020      	b.n	800f648 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60a:	fa22 f303 	lsr.w	r3, r2, r3
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	2b00      	cmp	r3, #0
 800f614:	d015      	beq.n	800f642 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f61a:	4413      	add	r3, r2
 800f61c:	3318      	adds	r3, #24
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f62a:	2104      	movs	r1, #4
 800f62c:	6a38      	ldr	r0, [r7, #32]
 800f62e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f63c:	2100      	movs	r1, #0
 800f63e:	6a38      	ldr	r0, [r7, #32]
 800f640:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f644:	3301      	adds	r3, #1
 800f646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f64c:	461a      	mov	r2, r3
 800f64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f650:	4293      	cmp	r3, r2
 800f652:	d3d8      	bcc.n	800f606 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 800f654:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f658:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 800f65a:	f107 0310 	add.w	r3, r7, #16
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f6 fd92 	bl	8006188 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 800f668:	2301      	movs	r3, #1
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f66c:	2300      	movs	r3, #0
 800f66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f670:	e025      	b.n	800f6be <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f676:	4013      	ands	r3, r2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01a      	beq.n	800f6b2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 800f67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f680:	4013      	ands	r3, r2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d115      	bne.n	800f6b2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68a:	4413      	add	r3, r2
 800f68c:	3318      	adds	r3, #24
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f107 021c 	add.w	r2, r7, #28
 800f69a:	2101      	movs	r1, #1
 800f69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f69e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	f003 0320 	and.w	r3, r3, #32
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 800f6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ba:	005b      	lsls	r3, r3, #1
 800f6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d3d3      	bcc.n	800f672 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d00e      	beq.n	800f6f0 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 800f6d2:	f107 0218 	add.w	r2, r7, #24
 800f6d6:	f107 0310 	add.w	r3, r7, #16
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7f6 fd8f 	bl	8006200 <xTaskCheckForTimeOut>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d105      	bne.n	800f6f4 <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f6e8:	2032      	movs	r0, #50	; 0x32
 800f6ea:	f7f6 f97d 	bl	80059e8 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 800f6ee:	e7bb      	b.n	800f668 <xPhyStartAutoNegotiation+0x7c>
            break;
 800f6f0:	bf00      	nop
 800f6f2:	e000      	b.n	800f6f6 <xPhyStartAutoNegotiation+0x10a>
            break;
 800f6f4:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f000 80c9 	beq.w	800f890 <xPhyStartAutoNegotiation+0x2a4>
    {
        ulBitMask = ( uint32_t ) 1U;
 800f6fe:	2301      	movs	r3, #1
 800f700:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f708:	43db      	mvns	r3, r3
 800f70a:	401a      	ands	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f710:	2300      	movs	r3, #0
 800f712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f714:	e0b5      	b.n	800f882 <xPhyStartAutoNegotiation+0x296>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71a:	4413      	add	r3, r2
 800f71c:	3318      	adds	r3, #24
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f726:	3202      	adds	r2, #2
 800f728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f72c:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 800f72e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f732:	4013      	ands	r3, r2
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 809d 	beq.w	800f874 <xPhyStartAutoNegotiation+0x288>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f742:	2100      	movs	r1, #0
 800f744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f746:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f107 021c 	add.w	r2, r7, #28
 800f750:	2101      	movs	r1, #1
 800f752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f754:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	f003 0304 	and.w	r3, r3, #4
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00a      	beq.n	800f776 <xPhyStartAutoNegotiation+0x18a>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	f043 0304 	orr.w	r3, r3, #4
 800f766:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76e:	431a      	orrs	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	635a      	str	r2, [r3, #52]	; 0x34
 800f774:	e003      	b.n	800f77e <xPhyStartAutoNegotiation+0x192>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	f023 0304 	bic.w	r3, r3, #4
 800f77c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	4a46      	ldr	r2, [pc, #280]	; (800f89c <xPhyStartAutoNegotiation+0x2b0>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d130      	bne.n	800f7e8 <xPhyStartAutoNegotiation+0x1fc>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f107 020c 	add.w	r2, r7, #12
 800f78e:	211e      	movs	r1, #30
 800f790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f792:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	3b01      	subs	r3, #1
 800f79c:	2b05      	cmp	r3, #5
 800f79e:	d814      	bhi.n	800f7ca <xPhyStartAutoNegotiation+0x1de>
 800f7a0:	a201      	add	r2, pc, #4	; (adr r2, 800f7a8 <xPhyStartAutoNegotiation+0x1bc>)
 800f7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a6:	bf00      	nop
 800f7a8:	0800f7c1 	.word	0x0800f7c1
 800f7ac:	0800f7cb 	.word	0x0800f7cb
 800f7b0:	0800f7cb 	.word	0x0800f7cb
 800f7b4:	0800f7cb 	.word	0x0800f7cb
 800f7b8:	0800f7c1 	.word	0x0800f7c1
 800f7bc:	0800f7cb 	.word	0x0800f7cb
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	f043 0302 	orr.w	r3, r3, #2
 800f7c6:	61fb      	str	r3, [r7, #28]
                        break;
 800f7c8:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f003 0307 	and.w	r3, r3, #7
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d801      	bhi.n	800f7d8 <xPhyStartAutoNegotiation+0x1ec>
 800f7d4:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 800f7d6:	e030      	b.n	800f83a <xPhyStartAutoNegotiation+0x24e>
 800f7d8:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d82d      	bhi.n	800f83a <xPhyStartAutoNegotiation+0x24e>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	f043 0304 	orr.w	r3, r3, #4
 800f7e4:	61fb      	str	r3, [r7, #28]
                        break;
 800f7e6:	e028      	b.n	800f83a <xPhyStartAutoNegotiation+0x24e>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 800f7e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ea:	f7ff fcd5 	bl	800f198 <xHas_1F_PHYSPCS>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d01b      	beq.n	800f82c <xPhyStartAutoNegotiation+0x240>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f107 0208 	add.w	r2, r7, #8
 800f7fc:	211f      	movs	r1, #31
 800f7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f800:	4798      	blx	r3
                ulRegValue = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	f003 0310 	and.w	r3, r3, #16
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <xPhyStartAutoNegotiation+0x22c>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f043 0304 	orr.w	r3, r3, #4
 800f816:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	f003 030c 	and.w	r3, r3, #12
 800f81e:	2b04      	cmp	r3, #4
 800f820:	d10b      	bne.n	800f83a <xPhyStartAutoNegotiation+0x24e>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	f043 0302 	orr.w	r3, r3, #2
 800f828:	61fb      	str	r3, [r7, #28]
 800f82a:	e006      	b.n	800f83a <xPhyStartAutoNegotiation+0x24e>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f107 021c 	add.w	r2, r7, #28
 800f834:	2110      	movs	r1, #16
 800f836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f838:	4798      	blx	r3
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	f003 0304 	and.w	r3, r3, #4
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <xPhyStartAutoNegotiation+0x262>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2202      	movs	r2, #2
 800f848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f84c:	e003      	b.n	800f856 <xPhyStartAutoNegotiation+0x26a>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	f003 0302 	and.w	r3, r3, #2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d004      	beq.n	800f86a <xPhyStartAutoNegotiation+0x27e>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f868:	e005      	b.n	800f876 <xPhyStartAutoNegotiation+0x28a>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2202      	movs	r2, #2
 800f86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f872:	e000      	b.n	800f876 <xPhyStartAutoNegotiation+0x28a>
                continue;
 800f874:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f878:	3301      	adds	r3, #1
 800f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87e:	005b      	lsls	r3, r3, #1
 800f880:	637b      	str	r3, [r7, #52]	; 0x34
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f886:	461a      	mov	r2, r3
 800f888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88a:	4293      	cmp	r3, r2
 800f88c:	f4ff af43 	bcc.w	800f716 <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3740      	adds	r7, #64	; 0x40
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	00221560 	.word	0x00221560

0800f8a0 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b088      	sub	sp, #32
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	dd25      	ble.n	800f904 <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	331c      	adds	r3, #28
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f6 fc63 	bl	8006188 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f643 2298 	movw	r2, #15000	; 0x3a98
 800f8c8:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61bb      	str	r3, [r7, #24]
 800f8ce:	e013      	b.n	800f8f8 <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d107      	bne.n	800f8ec <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	431a      	orrs	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	61bb      	str	r3, [r7, #24]
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	61fb      	str	r3, [r7, #28]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fc:	69ba      	ldr	r2, [r7, #24]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	dbe6      	blt.n	800f8d0 <xPhyCheckLinkStatus+0x30>
 800f902:	e068      	b.n	800f9d6 <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f103 021c 	add.w	r2, r3, #28
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3324      	adds	r3, #36	; 0x24
 800f90e:	4619      	mov	r1, r3
 800f910:	4610      	mov	r0, r2
 800f912:	f7f6 fc75 	bl	8006200 <xTaskCheckForTimeOut>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d05c      	beq.n	800f9d6 <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f91c:	2300      	movs	r3, #0
 800f91e:	61bb      	str	r3, [r7, #24]
 800f920:	e03f      	b.n	800f9a2 <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	4413      	add	r3, r2
 800f928:	3318      	adds	r3, #24
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f107 020c 	add.w	r2, r7, #12
 800f936:	2101      	movs	r1, #1
 800f938:	6938      	ldr	r0, [r7, #16]
 800f93a:	4798      	blx	r3
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d129      	bne.n	800f996 <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	4013      	ands	r3, r2
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	bf14      	ite	ne
 800f94e:	2301      	movne	r3, #1
 800f950:	2300      	moveq	r3, #0
 800f952:	b2da      	uxtb	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	bf14      	ite	ne
 800f95e:	2301      	movne	r3, #1
 800f960:	2300      	moveq	r3, #0
 800f962:	b2db      	uxtb	r3, r3
 800f964:	4053      	eors	r3, r2
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d014      	beq.n	800f996 <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f003 0304 	and.w	r3, r3, #4
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	431a      	orrs	r2, r3
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	635a      	str	r2, [r3, #52]	; 0x34
 800f982:	e006      	b.n	800f992 <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	43db      	mvns	r3, r3
 800f98c:	401a      	ands	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	3301      	adds	r3, #1
 800f99a:	61bb      	str	r3, [r7, #24]
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	61fb      	str	r3, [r7, #28]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9a6:	69ba      	ldr	r2, [r7, #24]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	dbba      	blt.n	800f922 <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	331c      	adds	r3, #28
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f6 fbe9 	bl	8006188 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	085b      	lsrs	r3, r3, #1
 800f9be:	4013      	ands	r3, r2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d004      	beq.n	800f9ce <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f643 2298 	movw	r2, #15000	; 0x3a98
 800f9ca:	625a      	str	r2, [r3, #36]	; 0x24
 800f9cc:	e003      	b.n	800f9d6 <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f9d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 800f9d6:	697b      	ldr	r3, [r7, #20]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3720      	adds	r7, #32
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <xNetworkInterfaceInitialise>:
    return pucReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af02      	add	r7, sp, #8
    BaseType_t xResult;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	613b      	str	r3, [r7, #16]

    if( xMacInitStatus == eMACInit )
 800f9ea:	4b55      	ldr	r3, [pc, #340]	; (800fb40 <xNetworkInterfaceInitialise+0x160>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f040 8091 	bne.w	800fb16 <xNetworkInterfaceInitialise+0x136>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 800f9f4:	4b53      	ldr	r3, [pc, #332]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800f9f6:	4a54      	ldr	r2, [pc, #336]	; (800fb48 <xNetworkInterfaceInitialise+0x168>)
 800f9f8:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 800f9fa:	f7f9 fd51 	bl	80094a0 <FreeRTOS_GetMACAddress>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4a50      	ldr	r2, [pc, #320]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa02:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800fa04:	4b4f      	ldr	r3, [pc, #316]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa06:	2201      	movs	r2, #1
 800fa08:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 800fa0a:	4b4e      	ldr	r3, [pc, #312]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa0c:	4a4f      	ldr	r2, [pc, #316]	; (800fb4c <xNetworkInterfaceInitialise+0x16c>)
 800fa0e:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 800fa10:	4b4c      	ldr	r3, [pc, #304]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa12:	4a4f      	ldr	r2, [pc, #316]	; (800fb50 <xNetworkInterfaceInitialise+0x170>)
 800fa14:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 800fa16:	4b4b      	ldr	r3, [pc, #300]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa18:	f240 52ec 	movw	r2, #1516	; 0x5ec
 800fa1c:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 800fa1e:	2260      	movs	r2, #96	; 0x60
 800fa20:	2100      	movs	r1, #0
 800fa22:	484a      	ldr	r0, [pc, #296]	; (800fb4c <xNetworkInterfaceInitialise+0x16c>)
 800fa24:	f002 f887 	bl	8011b36 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 800fa28:	2260      	movs	r2, #96	; 0x60
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	4848      	ldr	r0, [pc, #288]	; (800fb50 <xNetworkInterfaceInitialise+0x170>)
 800fa2e:	f002 f882 	bl	8011b36 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 800fa32:	4844      	ldr	r0, [pc, #272]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fa34:	f000 fb6c 	bl	8010110 <HAL_ETH_Init>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73fb      	strb	r3, [r7, #15]

        /* Only for inspection by debugger. */
        ( void ) xHalEthInitStatus;

        /* Configuration for HAL_ETH_Transmit(_IT). */
        memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 800fa3c:	2234      	movs	r2, #52	; 0x34
 800fa3e:	2100      	movs	r1, #0
 800fa40:	4844      	ldr	r0, [pc, #272]	; (800fb54 <xNetworkInterfaceInitialise+0x174>)
 800fa42:	f002 f878 	bl	8011b36 <memset>
        xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 800fa46:	4b43      	ldr	r3, [pc, #268]	; (800fb54 <xNetworkInterfaceInitialise+0x174>)
 800fa48:	2220      	movs	r2, #32
 800fa4a:	601a      	str	r2, [r3, #0]
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
            }
        #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
 800fa4c:	4b41      	ldr	r3, [pc, #260]	; (800fb54 <xNetworkInterfaceInitialise+0x174>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	615a      	str	r2, [r3, #20]
            }
        #endif
        xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800fa52:	4b40      	ldr	r3, [pc, #256]	; (800fb54 <xNetworkInterfaceInitialise+0x174>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	611a      	str	r2, [r3, #16]

        /* This counting semaphore will count the number of free TX DMA descriptors. */
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 800fa58:	2104      	movs	r1, #4
 800fa5a:	2004      	movs	r0, #4
 800fa5c:	f7f5 f860 	bl	8004b20 <xQueueCreateCountingSemaphore>
 800fa60:	4603      	mov	r3, r0
 800fa62:	4a3d      	ldr	r2, [pc, #244]	; (800fb58 <xNetworkInterfaceInitialise+0x178>)
 800fa64:	6013      	str	r3, [r2, #0]
        configASSERT( xTXDescriptorSemaphore );
 800fa66:	4b3c      	ldr	r3, [pc, #240]	; (800fb58 <xNetworkInterfaceInitialise+0x178>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10a      	bne.n	800fa84 <xNetworkInterfaceInitialise+0xa4>
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	607b      	str	r3, [r7, #4]
}
 800fa80:	bf00      	nop
 800fa82:	e7fe      	b.n	800fa82 <xNetworkInterfaceInitialise+0xa2>

        xTransmissionMutex = xSemaphoreCreateMutex();
 800fa84:	2001      	movs	r0, #1
 800fa86:	f7f4 fffc 	bl	8004a82 <xQueueCreateMutex>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	4a33      	ldr	r2, [pc, #204]	; (800fb5c <xNetworkInterfaceInitialise+0x17c>)
 800fa8e:	6013      	str	r3, [r2, #0]
        configASSERT( xTransmissionMutex );
 800fa90:	4b32      	ldr	r3, [pc, #200]	; (800fb5c <xNetworkInterfaceInitialise+0x17c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d10a      	bne.n	800faae <xNetworkInterfaceInitialise+0xce>
	__asm volatile
 800fa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9c:	f383 8811 	msr	BASEPRI, r3
 800faa0:	f3bf 8f6f 	isb	sy
 800faa4:	f3bf 8f4f 	dsb	sy
 800faa8:	603b      	str	r3, [r7, #0]
}
 800faaa:	bf00      	nop
 800faac:	e7fe      	b.n	800faac <xNetworkInterfaceInitialise+0xcc>

        /* Assign Rx memory buffers to a DMA Rx descriptor */
        for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 800faae:	2300      	movs	r3, #0
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	e010      	b.n	800fad6 <xNetworkInterfaceInitialise+0xf6>
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
                    configASSERT( pucBuffer != NULL );
                }
            #else
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 800faba:	fb02 f303 	mul.w	r3, r2, r3
 800fabe:	4a28      	ldr	r2, [pc, #160]	; (800fb60 <xNetworkInterfaceInitialise+0x180>)
 800fac0:	4413      	add	r3, r2
 800fac2:	60bb      	str	r3, [r7, #8]
                }
            #endif

            HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 800fac4:	2300      	movs	r3, #0
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	6939      	ldr	r1, [r7, #16]
 800faca:	481e      	ldr	r0, [pc, #120]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800facc:	f000 fbfc 	bl	80102c8 <HAL_ETH_DescAssignMemory>
        for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	3301      	adds	r3, #1
 800fad4:	613b      	str	r3, [r7, #16]
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	2b03      	cmp	r3, #3
 800fada:	d9eb      	bls.n	800fab4 <xNetworkInterfaceInitialise+0xd4>
        }

        /* Configure the MDIO Clock */
        HAL_ETH_SetMDIOClockRange( &( xEthHandle ) );
 800fadc:	4819      	ldr	r0, [pc, #100]	; (800fb44 <xNetworkInterfaceInitialise+0x164>)
 800fade:	f001 fa77 	bl	8010fd0 <HAL_ETH_SetMDIOClockRange>

        /* Initialize the MACB and set all PHY properties */
        prvMACBProbePhy();
 800fae2:	f000 f8d9 	bl	800fc98 <prvMACBProbePhy>

        /* Force a negotiation with the Switch or Router and wait for LS. */
        prvEthernetUpdateConfig( pdTRUE );
 800fae6:	2001      	movs	r0, #1
 800fae8:	f000 f8ee 	bl	800fcc8 <prvEthernetUpdateConfig>

        /* The deferred interrupt handler task is created at the highest
         *  possible priority to ensure the interrupt handler can return directly
         *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
         *  notify the task when there is something to process. */
        if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 800faec:	4b1d      	ldr	r3, [pc, #116]	; (800fb64 <xNetworkInterfaceInitialise+0x184>)
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	2337      	movs	r3, #55	; 0x37
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	2300      	movs	r3, #0
 800faf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fafa:	491b      	ldr	r1, [pc, #108]	; (800fb68 <xNetworkInterfaceInitialise+0x188>)
 800fafc:	481b      	ldr	r0, [pc, #108]	; (800fb6c <xNetworkInterfaceInitialise+0x18c>)
 800fafe:	f7f5 fe18 	bl	8005732 <xTaskCreate>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d103      	bne.n	800fb10 <xNetworkInterfaceInitialise+0x130>
        {
            /* The task was created successfully. */
            xMacInitStatus = eMACPass;
 800fb08:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <xNetworkInterfaceInitialise+0x160>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	701a      	strb	r2, [r3, #0]
 800fb0e:	e002      	b.n	800fb16 <xNetworkInterfaceInitialise+0x136>
        }
        else
        {
            xMacInitStatus = eMACFailed;
 800fb10:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <xNetworkInterfaceInitialise+0x160>)
 800fb12:	2202      	movs	r2, #2
 800fb14:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus != eMACPass )
 800fb16:	4b0a      	ldr	r3, [pc, #40]	; (800fb40 <xNetworkInterfaceInitialise+0x160>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d002      	beq.n	800fb24 <xNetworkInterfaceInitialise+0x144>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	617b      	str	r3, [r7, #20]
 800fb22:	e008      	b.n	800fb36 <xNetworkInterfaceInitialise+0x156>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 800fb24:	4b12      	ldr	r3, [pc, #72]	; (800fb70 <xNetworkInterfaceInitialise+0x190>)
 800fb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <xNetworkInterfaceInitialise+0x152>
        {
            xResult = pdPASS;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	e001      	b.n	800fb36 <xNetworkInterfaceInitialise+0x156>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 800fb32:	2300      	movs	r3, #0
 800fb34:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800fb36:	697b      	ldr	r3, [r7, #20]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	240092a4 	.word	0x240092a4
 800fb44:	240092b0 	.word	0x240092b0
 800fb48:	40028000 	.word	0x40028000
 800fb4c:	240018e0 	.word	0x240018e0
 800fb50:	240000a0 	.word	0x240000a0
 800fb54:	24009324 	.word	0x24009324
 800fb58:	240092a8 	.word	0x240092a8
 800fb5c:	240092ac 	.word	0x240092ac
 800fb60:	24000100 	.word	0x24000100
 800fb64:	24009358 	.word	0x24009358
 800fb68:	08012ecc 	.word	0x08012ecc
 800fb6c:	0800ffcd 	.word	0x0800ffcd
 800fb70:	2400935c 	.word	0x2400935c

0800fb74 <xGetPhyLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xGetPhyLinkStatus( void )
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 800fb7a:	4b08      	ldr	r3, [pc, #32]	; (800fb9c <xGetPhyLinkStatus+0x28>)
 800fb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <xGetPhyLinkStatus+0x14>
    {
        xReturn = pdPASS;
 800fb82:	2301      	movs	r3, #1
 800fb84:	607b      	str	r3, [r7, #4]
 800fb86:	e001      	b.n	800fb8c <xGetPhyLinkStatus+0x18>
    }
    else
    {
        xReturn = pdFAIL;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 800fb8c:	687b      	ldr	r3, [r7, #4]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	370c      	adds	r7, #12
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	2400935c 	.word	0x2400935c

0800fba0 <xNetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t xReleaseAfterSend )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFAIL;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 800fbae:	2364      	movs	r3, #100	; 0x64
 800fbb0:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xGetPhyLinkStatus() == pdPASS )
 800fbb2:	f7ff ffdf 	bl	800fb74 <xGetPhyLinkStatus>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d157      	bne.n	800fc6c <xNetworkInterfaceOutput+0xcc>

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
        #else
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
 800fbbc:	4b31      	ldr	r3, [pc, #196]	; (800fc84 <xNetworkInterfaceOutput+0xe4>)
 800fbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc0:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 800fbc4:	fb02 f303 	mul.w	r3, r2, r3
 800fbc8:	4a2f      	ldr	r2, [pc, #188]	; (800fc88 <xNetworkInterfaceOutput+0xe8>)
 800fbca:	4413      	add	r3, r2
 800fbcc:	61fb      	str	r3, [r7, #28]
            /* The copy method, left here for educational purposes. */
            configASSERT( pxDescriptor->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	69db      	ldr	r3, [r3, #28]
 800fbd2:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800fbd6:	d90a      	bls.n	800fbee <xNetworkInterfaceOutput+0x4e>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	61bb      	str	r3, [r7, #24]
}
 800fbea:	bf00      	nop
 800fbec:	e7fe      	b.n	800fbec <xNetworkInterfaceOutput+0x4c>
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	60fb      	str	r3, [r7, #12]
        {
            .buffer = pucTXBuffer,
            .len    = pxDescriptor->xDataLength,
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	69db      	ldr	r3, [r3, #28]
        ETH_BufferTypeDef xTransmitBuffer =
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	617b      	str	r3, [r7, #20]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxDescriptor->xDataLength;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	4a22      	ldr	r2, [pc, #136]	; (800fc8c <xNetworkInterfaceOutput+0xec>)
 800fc02:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 800fc04:	4a21      	ldr	r2, [pc, #132]	; (800fc8c <xNetworkInterfaceOutput+0xec>)
 800fc06:	f107 030c 	add.w	r3, r7, #12
 800fc0a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 800fc0c:	4b20      	ldr	r3, [pc, #128]	; (800fc90 <xNetworkInterfaceOutput+0xf0>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6a39      	ldr	r1, [r7, #32]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f5 fa32 	bl	800507c <xQueueSemaphoreTake>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d126      	bne.n	800fc6c <xNetworkInterfaceOutput+0xcc>
  __ASM volatile ("dsb 0xF":::"memory");
 800fc1e:	f3bf 8f4f 	dsb	sy
}
 800fc22:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive accces to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 800fc24:	4b1b      	ldr	r3, [pc, #108]	; (800fc94 <xNetworkInterfaceOutput+0xf4>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	6a39      	ldr	r1, [r7, #32]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f5 fa26 	bl	800507c <xQueueSemaphoreTake>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d01a      	beq.n	800fc6c <xNetworkInterfaceOutput+0xcc>
                        /* Do not release the buffer. */
                        xReleaseAfterSend = pdFALSE;
                    }
                #else
                    {
                        memcpy( pucTXBuffer, pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength );
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6999      	ldr	r1, [r3, #24]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	461a      	mov	r2, r3
 800fc40:	69f8      	ldr	r0, [r7, #28]
 800fc42:	f001 ff50 	bl	8011ae6 <memcpy>
  __ASM volatile ("dsb 0xF":::"memory");
 800fc46:	f3bf 8f4f 	dsb	sy
}
 800fc4a:	bf00      	nop
                         * to the physical memory. */
                        __DSB();
                    }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 800fc4c:	490f      	ldr	r1, [pc, #60]	; (800fc8c <xNetworkInterfaceOutput+0xec>)
 800fc4e:	480d      	ldr	r0, [pc, #52]	; (800fc84 <xNetworkInterfaceOutput+0xe4>)
 800fc50:	f000 fc68 	bl	8010524 <HAL_ETH_Transmit_IT>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <xNetworkInterfaceOutput+0xbe>
                {
                    xResult = pdPASS;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 800fc5e:	4b0d      	ldr	r3, [pc, #52]	; (800fc94 <xNetworkInterfaceOutput+0xf4>)
 800fc60:	6818      	ldr	r0, [r3, #0]
 800fc62:	2300      	movs	r3, #0
 800fc64:	2200      	movs	r2, #0
 800fc66:	2100      	movs	r1, #0
 800fc68:	f7f4 ff8e 	bl	8004b88 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <xNetworkInterfaceOutput+0xd8>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7ff fa42 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3728      	adds	r7, #40	; 0x28
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	240092b0 	.word	0x240092b0
 800fc88:	24001940 	.word	0x24001940
 800fc8c:	24009324 	.word	0x24009324
 800fc90:	240092a8 	.word	0x240092a8
 800fc94:	240092ac 	.word	0x240092ac

0800fc98 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 800fc9c:	4a06      	ldr	r2, [pc, #24]	; (800fcb8 <prvMACBProbePhy+0x20>)
 800fc9e:	4907      	ldr	r1, [pc, #28]	; (800fcbc <prvMACBProbePhy+0x24>)
 800fca0:	4807      	ldr	r0, [pc, #28]	; (800fcc0 <prvMACBProbePhy+0x28>)
 800fca2:	f7ff faaf 	bl	800f204 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 800fca6:	4806      	ldr	r0, [pc, #24]	; (800fcc0 <prvMACBProbePhy+0x28>)
 800fca8:	f7ff fac1 	bl	800f22e <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 800fcac:	4905      	ldr	r1, [pc, #20]	; (800fcc4 <prvMACBProbePhy+0x2c>)
 800fcae:	4804      	ldr	r0, [pc, #16]	; (800fcc0 <prvMACBProbePhy+0x28>)
 800fcb0:	f7ff fba4 	bl	800f3fc <xPhyConfigure>
}
 800fcb4:	bf00      	nop
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	0800fe71 	.word	0x0800fe71
 800fcbc:	0800fe39 	.word	0x0800fe39
 800fcc0:	2400935c 	.word	0x2400935c
 800fcc4:	08012f5c 	.word	0x08012f5c

0800fcc8 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b09e      	sub	sp, #120	; 0x78
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	677b      	str	r3, [r7, #116]	; 0x74
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	673b      	str	r3, [r7, #112]	; 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d103      	bne.n	800fce6 <prvEthernetUpdateConfig+0x1e>
 800fcde:	4b21      	ldr	r3, [pc, #132]	; (800fd64 <prvEthernetUpdateConfig+0x9c>)
 800fce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d035      	beq.n	800fd52 <prvEthernetUpdateConfig+0x8a>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 800fce6:	4b1f      	ldr	r3, [pc, #124]	; (800fd64 <prvEthernetUpdateConfig+0x9c>)
 800fce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcea:	2201      	movs	r2, #1
 800fcec:	fa02 f303 	lsl.w	r3, r2, r3
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	481b      	ldr	r0, [pc, #108]	; (800fd64 <prvEthernetUpdateConfig+0x9c>)
 800fcf6:	f7ff fc79 	bl	800f5ec <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800fcfa:	4b1a      	ldr	r3, [pc, #104]	; (800fd64 <prvEthernetUpdateConfig+0x9c>)
 800fcfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd00:	2b02      	cmp	r3, #2
 800fd02:	d103      	bne.n	800fd0c <prvEthernetUpdateConfig+0x44>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 800fd04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd08:	673b      	str	r3, [r7, #112]	; 0x70
 800fd0a:	e001      	b.n	800fd10 <prvEthernetUpdateConfig+0x48>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	673b      	str	r3, [r7, #112]	; 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 800fd10:	4b14      	ldr	r3, [pc, #80]	; (800fd64 <prvEthernetUpdateConfig+0x9c>)
 800fd12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d102      	bne.n	800fd20 <prvEthernetUpdateConfig+0x58>
        {
            speed = ETH_SPEED_10M;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	677b      	str	r3, [r7, #116]	; 0x74
 800fd1e:	e002      	b.n	800fd26 <prvEthernetUpdateConfig+0x5e>
        }
        else
        {
            speed = ETH_SPEED_100M;
 800fd20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd24:	677b      	str	r3, [r7, #116]	; 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 800fd26:	f107 030c 	add.w	r3, r7, #12
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	480e      	ldr	r0, [pc, #56]	; (800fd68 <prvEthernetUpdateConfig+0xa0>)
 800fd2e:	f000 ff61 	bl	8010bf4 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 800fd32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd34:	627b      	str	r3, [r7, #36]	; 0x24
        MACConf.Speed = speed;
 800fd36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd38:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 800fd3a:	f107 030c 	add.w	r3, r7, #12
 800fd3e:	4619      	mov	r1, r3
 800fd40:	4809      	ldr	r0, [pc, #36]	; (800fd68 <prvEthernetUpdateConfig+0xa0>)
 800fd42:	f001 f92b 	bl	8010f9c <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
            {
                MACConf.ChecksumOffload = ENABLE;
 800fd46:	2301      	movs	r3, #1
 800fd48:	743b      	strb	r3, [r7, #16]
                MACConf.ChecksumOffload = DISABLE;
            }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 800fd4a:	4807      	ldr	r0, [pc, #28]	; (800fd68 <prvEthernetUpdateConfig+0xa0>)
 800fd4c:	f000 faef 	bl	801032e <HAL_ETH_Start_IT>
 800fd50:	e003      	b.n	800fd5a <prvEthernetUpdateConfig+0x92>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 800fd52:	4805      	ldr	r0, [pc, #20]	; (800fd68 <prvEthernetUpdateConfig+0xa0>)
 800fd54:	f000 fb6e 	bl	8010434 <HAL_ETH_Stop_IT>
    }
}
 800fd58:	bf00      	nop
 800fd5a:	bf00      	nop
 800fd5c:	3778      	adds	r7, #120	; 0x78
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	2400935c 	.word	0x2400935c
 800fd68:	240092b0 	.word	0x240092b0

0800fd6c <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08c      	sub	sp, #48	; 0x30
 800fd70:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 800fd76:	2300      	movs	r3, #0
 800fd78:	627b      	str	r3, [r7, #36]	; 0x24
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 800fd7a:	f107 0308 	add.w	r3, r7, #8
 800fd7e:	4619      	mov	r1, r3
 800fd80:	482c      	ldr	r0, [pc, #176]	; (800fe34 <prvNetworkInterfaceInput+0xc8>)
 800fd82:	f000 fcac 	bl	80106de <HAL_ETH_GetRxData>
 800fd86:	61b8      	str	r0, [r7, #24]

        if( uxDataLength == 0U )
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d101      	bne.n	800fd92 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 800fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd90:	e04b      	b.n	800fe2a <prvNetworkInterfaceInput+0xbe>
        xReturn++;
 800fd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd94:	3301      	adds	r3, #1
 800fd96:	62fb      	str	r3, [r7, #44]	; 0x2c
                uxLength = uxDataLength;
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	617b      	str	r3, [r7, #20]
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	6978      	ldr	r0, [r7, #20]
 800fda0:	f7ff f92e 	bl	800f000 <pxGetNetworkBufferWithDescriptor>
 800fda4:	62b8      	str	r0, [r7, #40]	; 0x28
                if( pxBufferDescriptor != NULL )
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00d      	beq.n	800fdc8 <prvNetworkInterfaceInput+0x5c>
                    pxReceivedBuffer = pxBufferDescriptor;
 800fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdae:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy( pxReceivedBuffer->pucEthernetBuffer, data_buffer.buffer, uxDataLength );
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb2:	699b      	ldr	r3, [r3, #24]
 800fdb4:	68b9      	ldr	r1, [r7, #8]
 800fdb6:	69ba      	ldr	r2, [r7, #24]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f001 fe94 	bl	8011ae6 <memcpy>
                    pxReceivedBuffer->xDataLength = uxDataLength;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	69ba      	ldr	r2, [r7, #24]
 800fdc2:	61da      	str	r2, [r3, #28]
                    pxBufferDescriptor = NULL;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	62bb      	str	r3, [r7, #40]	; 0x28
            uint8_t * pucBuffer = NULL;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	623b      	str	r3, [r7, #32]
            if( pxBufferDescriptor != NULL )
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d002      	beq.n	800fdd8 <prvNetworkInterfaceInput+0x6c>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 800fdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd4:	699b      	ldr	r3, [r3, #24]
 800fdd6:	623b      	str	r3, [r7, #32]
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 800fdd8:	6a39      	ldr	r1, [r7, #32]
 800fdda:	4816      	ldr	r0, [pc, #88]	; (800fe34 <prvNetworkInterfaceInput+0xc8>)
 800fddc:	f000 fcd6 	bl	801078c <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 800fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d0c7      	beq.n	800fd76 <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 800fde6:	2300      	movs	r3, #0
 800fde8:	61fb      	str	r3, [r7, #28]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	699b      	ldr	r3, [r3, #24]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7f8 fcc6 	bl	8008780 <eConsiderFrameForProcessing>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d002      	beq.n	800fe00 <prvNetworkInterfaceInput+0x94>
                xDoRelease = pdTRUE;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	61fb      	str	r3, [r7, #28]
 800fdfe:	e00d      	b.n	800fe1c <prvNetworkInterfaceInput+0xb0>
                IPStackEvent_t xRxEvent =
 800fe00:	2301      	movs	r3, #1
 800fe02:	703b      	strb	r3, [r7, #0]
 800fe04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe06:	607b      	str	r3, [r7, #4]
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 800fe08:	463b      	mov	r3, r7
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7f8 fc6b 	bl	80086e8 <xSendEventStructToIPTask>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d101      	bne.n	800fe1c <prvNetworkInterfaceInput+0xb0>
                    xDoRelease = pdTRUE;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	61fb      	str	r3, [r7, #28]
            if( xDoRelease != pdFALSE )
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0a9      	beq.n	800fd76 <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 800fe22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe24:	f7ff f96a 	bl	800f0fc <vReleaseNetworkBufferAndDescriptor>
    {
 800fe28:	e7a5      	b.n	800fd76 <prvNetworkInterfaceInput+0xa>
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3730      	adds	r7, #48	; 0x30
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	240092b0 	.word	0x240092b0

0800fe38 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 800fe44:	f04f 33ff 	mov.w	r3, #4294967295
 800fe48:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	68f9      	ldr	r1, [r7, #12]
 800fe50:	4806      	ldr	r0, [pc, #24]	; (800fe6c <ETH_PHY_IO_ReadReg+0x34>)
 800fe52:	f000 fe27 	bl	8010aa4 <HAL_ETH_ReadPHYRegister>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d101      	bne.n	800fe60 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 800fe60:	697b      	ldr	r3, [r7, #20]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	240092b0 	.word	0x240092b0

0800fe70 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 800fe7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe80:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	68f9      	ldr	r1, [r7, #12]
 800fe88:	4806      	ldr	r0, [pc, #24]	; (800fea4 <ETH_PHY_IO_WriteReg+0x34>)
 800fe8a:	f000 fe5f 	bl	8010b4c <HAL_ETH_WritePHYRegister>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 800fe98:	697b      	ldr	r3, [r7, #20]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3718      	adds	r7, #24
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	240092b0 	.word	0x240092b0

0800fea8 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 800feac:	4802      	ldr	r0, [pc, #8]	; (800feb8 <ETH_IRQHandler+0x10>)
 800feae:	f000 fce5 	bl	801087c <HAL_ETH_IRQHandler>
}
 800feb2:	bf00      	nop
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	240092b0 	.word	0x240092b0

0800febc <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800fec4:	2300      	movs	r3, #0
 800fec6:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 800fec8:	4b10      	ldr	r3, [pc, #64]	; (800ff0c <prvSetFlagsAndNotify+0x50>)
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4313      	orrs	r3, r2
 800fed0:	4a0e      	ldr	r2, [pc, #56]	; (800ff0c <prvSetFlagsAndNotify+0x50>)
 800fed2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800fed4:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <prvSetFlagsAndNotify+0x54>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d012      	beq.n	800ff02 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 800fedc:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <prvSetFlagsAndNotify+0x54>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f107 020c 	add.w	r2, r7, #12
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f6 fcd0 	bl	800688c <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d007      	beq.n	800ff02 <prvSetFlagsAndNotify+0x46>
 800fef2:	4b08      	ldr	r3, [pc, #32]	; (800ff14 <prvSetFlagsAndNotify+0x58>)
 800fef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	f3bf 8f6f 	isb	sy
    }
}
 800ff02:	bf00      	nop
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	240092a0 	.word	0x240092a0
 800ff10:	24009358 	.word	0x24009358
 800ff14:	e000ed04 	.word	0xe000ed04

0800ff18 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 800ff20:	2002      	movs	r0, #2
 800ff22:	f7ff ffcb 	bl	800febc <prvSetFlagsAndNotify>
}
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b082      	sub	sp, #8
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 800ff36:	2001      	movs	r0, #1
 800ff38:	f7ff ffc0 	bl	800febc <prvSetFlagsAndNotify>
}
 800ff3c:	bf00      	nop
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 800ff4c:	2004      	movs	r0, #4
 800ff4e:	f7ff ffb5 	bl	800febc <prvSetFlagsAndNotify>
}
 800ff52:	bf00      	nop
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <vClearOptionBit>:
}
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 800ff64:	f7f7 f9f6 	bl	8007354 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	43db      	mvns	r3, r3
 800ff70:	401a      	ands	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 800ff76:	f7f7 fa1d 	bl	80073b4 <vPortExitCritical>
}
 800ff7a:	bf00      	nop
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
{
 800ff82:	b480      	push	{r7}
 800ff84:	b087      	sub	sp, #28
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex;
    BaseType_t xCount = 0;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	613b      	str	r3, [r7, #16]
    ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	3330      	adds	r3, #48	; 0x30
 800ff92:	60fb      	str	r3, [r7, #12]

    /* Count the number of RX descriptors that are owned by DMA. */
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 800ff94:	2300      	movs	r3, #0
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	e00e      	b.n	800ffb8 <uxGetOwnCount+0x36>
    {
        __IO const ETH_DMADescTypeDef * dmarxdesc =
            ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        __IO const ETH_DMADescTypeDef * dmarxdesc =
 800ffa2:	60bb      	str	r3, [r7, #8]

        if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	da02      	bge.n	800ffb2 <uxGetOwnCount+0x30>
        {
            xCount++;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	613b      	str	r3, [r7, #16]
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	dded      	ble.n	800ff9a <uxGetOwnCount+0x18>
        }
    }

    return xCount;
 800ffbe:	693b      	ldr	r3, [r7, #16]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	371c      	adds	r7, #28
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <prvEMACHandlerTask>:
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b088      	sub	sp, #32
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 800ffd4:	2364      	movs	r3, #100	; 0x64
 800ffd6:	613b      	str	r3, [r7, #16]
    size_t uxTXDescriptorsUsed = 0U;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	61fb      	str	r3, [r7, #28]
    size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 800ffdc:	2304      	movs	r3, #4
 800ffde:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	617b      	str	r3, [r7, #20]
                size_t uxOwnCount;

                /* Call a function that monitors resources: the amount of free network
                 * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
                 * for more detailed comments. */
                vPrintResourceStats();
 800ffe4:	f7f9 fa28 	bl	8009438 <vPrintResourceStats>

                /* Some more statistics: number of free descriptors. */
                uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800ffe8:	4b3c      	ldr	r3, [pc, #240]	; (80100dc <prvEMACHandlerTask+0x110>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f5 f951 	bl	8005294 <uxQueueMessagesWaiting>
 800fff2:	4603      	mov	r3, r0
 800fff4:	f1c3 0304 	rsb	r3, r3, #4
 800fff8:	60fb      	str	r3, [r7, #12]

                if( uxTXDescriptorsUsed < uxUsed )
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d201      	bcs.n	8010006 <prvEMACHandlerTask+0x3a>
                {
                    uxTXDescriptorsUsed = uxUsed;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	61fb      	str	r3, [r7, #28]
                    FreeRTOS_printf( ( "TX descriptors %u/%u\n",
                                       uxTXDescriptorsUsed,
                                       ETH_TX_DESC_CNT ) );
                }

                uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8010006:	4836      	ldr	r0, [pc, #216]	; (80100e0 <prvEMACHandlerTask+0x114>)
 8010008:	f7ff ffbb 	bl	800ff82 <uxGetOwnCount>
 801000c:	60b8      	str	r0, [r7, #8]

                if( uxRXDescriptorsUsed > uxOwnCount )
 801000e:	69ba      	ldr	r2, [r7, #24]
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	429a      	cmp	r2, r3
 8010014:	d901      	bls.n	801001a <prvEMACHandlerTask+0x4e>
                {
                    uxRXDescriptorsUsed = uxOwnCount;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	61bb      	str	r3, [r7, #24]
                                       ETH_RX_DESC_CNT ) );
                }
            }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 801001a:	6939      	ldr	r1, [r7, #16]
 801001c:	2000      	movs	r0, #0
 801001e:	f7f6 fbe9 	bl	80067f4 <ulTaskNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8010022:	4b30      	ldr	r3, [pc, #192]	; (80100e4 <prvEMACHandlerTask+0x118>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d006      	beq.n	801003c <prvEMACHandlerTask+0x70>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 801002e:	2101      	movs	r1, #1
 8010030:	482c      	ldr	r0, [pc, #176]	; (80100e4 <prvEMACHandlerTask+0x118>)
 8010032:	f7ff ff92 	bl	800ff5a <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8010036:	f7ff fe99 	bl	800fd6c <prvNetworkInterfaceInput>
 801003a:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 801003c:	4b29      	ldr	r3, [pc, #164]	; (80100e4 <prvEMACHandlerTask+0x118>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 0302 	and.w	r3, r3, #2
 8010044:	2b00      	cmp	r3, #0
 8010046:	d017      	beq.n	8010078 <prvEMACHandlerTask+0xac>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8010048:	2102      	movs	r1, #2
 801004a:	4826      	ldr	r0, [pc, #152]	; (80100e4 <prvEMACHandlerTask+0x118>)
 801004c:	f7ff ff85 	bl	800ff5a <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8010050:	4b25      	ldr	r3, [pc, #148]	; (80100e8 <prvEMACHandlerTask+0x11c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f242 7110 	movw	r1, #10000	; 0x2710
 8010058:	4618      	mov	r0, r3
 801005a:	f7f5 f80f 	bl	800507c <xQueueSemaphoreTake>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <prvEMACHandlerTask+0xac>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8010064:	481e      	ldr	r0, [pc, #120]	; (80100e0 <prvEMACHandlerTask+0x114>)
 8010066:	f001 fb49 	bl	80116fc <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 801006a:	4b1f      	ldr	r3, [pc, #124]	; (80100e8 <prvEMACHandlerTask+0x11c>)
 801006c:	6818      	ldr	r0, [r3, #0]
 801006e:	2300      	movs	r3, #0
 8010070:	2200      	movs	r2, #0
 8010072:	2100      	movs	r1, #0
 8010074:	f7f4 fd88 	bl	8004b88 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8010078:	4b1a      	ldr	r3, [pc, #104]	; (80100e4 <prvEMACHandlerTask+0x118>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00f      	beq.n	80100a4 <prvEMACHandlerTask+0xd8>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8010084:	2104      	movs	r1, #4
 8010086:	4817      	ldr	r0, [pc, #92]	; (80100e4 <prvEMACHandlerTask+0x118>)
 8010088:	f7ff ff67 	bl	800ff5a <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 801008c:	4b14      	ldr	r3, [pc, #80]	; (80100e0 <prvEMACHandlerTask+0x114>)
 801008e:	2210      	movs	r2, #16
 8010090:	659a      	str	r2, [r3, #88]	; 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8010092:	4813      	ldr	r0, [pc, #76]	; (80100e0 <prvEMACHandlerTask+0x114>)
 8010094:	f000 f94b 	bl	801032e <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8010098:	f7ff fe68 	bl	800fd6c <prvNetworkInterfaceInput>
 801009c:	4602      	mov	r2, r0
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	4413      	add	r3, r2
 80100a2:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 80100a4:	6979      	ldr	r1, [r7, #20]
 80100a6:	4811      	ldr	r0, [pc, #68]	; (80100ec <prvEMACHandlerTask+0x120>)
 80100a8:	f7ff fbfa 	bl	800f8a0 <xPhyCheckLinkStatus>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d096      	beq.n	800ffe0 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xGetPhyLinkStatus() == pdFALSE )
 80100b2:	f7ff fd5f 	bl	800fb74 <xGetPhyLinkStatus>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10b      	bne.n	80100d4 <prvEMACHandlerTask+0x108>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 80100bc:	4808      	ldr	r0, [pc, #32]	; (80100e0 <prvEMACHandlerTask+0x114>)
 80100be:	f000 f9b9 	bl	8010434 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80100c2:	2260      	movs	r2, #96	; 0x60
 80100c4:	2100      	movs	r1, #0
 80100c6:	480a      	ldr	r0, [pc, #40]	; (80100f0 <prvEMACHandlerTask+0x124>)
 80100c8:	f001 fd35 	bl	8011b36 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80100cc:	4804      	ldr	r0, [pc, #16]	; (80100e0 <prvEMACHandlerTask+0x114>)
 80100ce:	f001 fb15 	bl	80116fc <ETH_Clear_Tx_Descriptors>
 80100d2:	e785      	b.n	800ffe0 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 80100d4:	2000      	movs	r0, #0
 80100d6:	f7ff fdf7 	bl	800fcc8 <prvEthernetUpdateConfig>
    {
 80100da:	e781      	b.n	800ffe0 <prvEMACHandlerTask+0x14>
 80100dc:	240092a8 	.word	0x240092a8
 80100e0:	240092b0 	.word	0x240092b0
 80100e4:	240092a0 	.word	0x240092a0
 80100e8:	240092ac 	.word	0x240092ac
 80100ec:	2400935c 	.word	0x2400935c
 80100f0:	240018e0 	.word	0x240018e0

080100f4 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	659a      	str	r2, [r3, #88]	; 0x58
    }
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801011e:	2301      	movs	r3, #1
 8010120:	e0c8      	b.n	80102b4 <HAL_ETH_Init+0x1a4>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010126:	2b00      	cmp	r3, #0
 8010128:	d102      	bne.n	8010130 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7f0 fc0e 	bl	800094c <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2223      	movs	r2, #35	; 0x23
 8010134:	659a      	str	r2, [r3, #88]	; 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010136:	4b61      	ldr	r3, [pc, #388]	; (80102bc <HAL_ETH_Init+0x1ac>)
 8010138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801013c:	4a5f      	ldr	r2, [pc, #380]	; (80102bc <HAL_ETH_Init+0x1ac>)
 801013e:	f043 0302 	orr.w	r3, r3, #2
 8010142:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010146:	4b5d      	ldr	r3, [pc, #372]	; (80102bc <HAL_ETH_Init+0x1ac>)
 8010148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801014c:	f003 0302 	and.w	r3, r3, #2
 8010150:	60bb      	str	r3, [r7, #8]
 8010152:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	7a1b      	ldrb	r3, [r3, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d103      	bne.n	8010164 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 801015c:	2000      	movs	r0, #0
 801015e:	f7f0 ff83 	bl	8001068 <HAL_SYSCFG_ETHInterfaceSelect>
 8010162:	e003      	b.n	801016c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8010164:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8010168:	f7f0 ff7e 	bl	8001068 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f042 0201 	orr.w	r2, r2, #1
 801017e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010182:	601a      	str	r2, [r3, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8010184:	f7f0 ff58 	bl	8001038 <HAL_GetTick>
 8010188:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801018a:	e010      	b.n	80101ae <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801018c:	f7f0 ff54 	bl	8001038 <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801019a:	d908      	bls.n	80101ae <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2204      	movs	r2, #4
 80101a0:	661a      	str	r2, [r3, #96]	; 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 80101a2:	21e0      	movs	r1, #224	; 0xe0
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff ffa5 	bl	80100f4 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 80101aa:	2301      	movs	r3, #1
 80101ac:	e082      	b.n	80102b4 <HAL_ETH_Init+0x1a4>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f003 0301 	and.w	r3, r3, #1
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e5      	bne.n	801018c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f001 f99d 	bl	8011500 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80101c6:	f7f2 fa03 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80101ca:	4603      	mov	r3, r0
 80101cc:	4a3c      	ldr	r2, [pc, #240]	; (80102c0 <HAL_ETH_Init+0x1b0>)
 80101ce:	fba2 2303 	umull	r2, r3, r2, r3
 80101d2:	0c9a      	lsrs	r2, r3, #18
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3a01      	subs	r2, #1
 80101da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f001 f8f0 	bl	80113c4 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80101fa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80101fe:	601a      	str	r2, [r3, #0]

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	f003 0303 	and.w	r3, r3, #3
 8010208:	2b00      	cmp	r3, #0
 801020a:	d008      	beq.n	801021e <HAL_ETH_Init+0x10e>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2201      	movs	r2, #1
 8010210:	661a      	str	r2, [r3, #96]	; 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8010212:	21e0      	movs	r1, #224	; 0xe0
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7ff ff6d 	bl	80100f4 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	e04a      	b.n	80102b4 <HAL_ETH_Init+0x1a4>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	f241 1308 	movw	r3, #4360	; 0x1108
 8010226:	4413      	add	r3, r2
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	4b26      	ldr	r3, [pc, #152]	; (80102c4 <HAL_ETH_Init+0x1b4>)
 801022c:	4013      	ands	r3, r2
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	6952      	ldr	r2, [r2, #20]
 8010232:	0052      	lsls	r2, r2, #1
 8010234:	6879      	ldr	r1, [r7, #4]
 8010236:	6809      	ldr	r1, [r1, #0]
 8010238:	431a      	orrs	r2, r3
 801023a:	f241 1308 	movw	r3, #4360	; 0x1108
 801023e:	440b      	add	r3, r1
 8010240:	601a      	str	r2, [r3, #0]
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f001 f9b4 	bl	80115b0 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f001 f9fb 	bl	8011644 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	3305      	adds	r3, #5
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	021a      	lsls	r2, r3, #8
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	3304      	adds	r3, #4
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	4619      	mov	r1, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	3303      	adds	r3, #3
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	061a      	lsls	r2, r3, #24
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	3302      	adds	r3, #2
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	041b      	lsls	r3, r3, #16
 8010280:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	3301      	adds	r3, #1
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801028c:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801029a:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801029c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	661a      	str	r2, [r3, #96]	; 0x60
            heth->gState = HAL_ETH_STATE_READY;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2210      	movs	r2, #16
 80102aa:	659a      	str	r2, [r3, #88]	; 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2210      	movs	r2, #16
 80102b0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_OK;
 80102b2:	2300      	movs	r3, #0
        }
 80102b4:	4618      	mov	r0, r3
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	58024400 	.word	0x58024400
 80102c0:	431bde83 	.word	0x431bde83
 80102c4:	ffff8001 	.word	0xffff8001

080102c8 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 80102c8:	b480      	push	{r7}
 80102ca:	b087      	sub	sp, #28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
 80102d4:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	320c      	adds	r2, #12
 80102dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e0:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d002      	beq.n	80102ee <HAL_ETH_DescAssignMemory+0x26>
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	2b03      	cmp	r3, #3
 80102ec:	d904      	bls.n	80102f8 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2201      	movs	r2, #1
 80102f2:	661a      	str	r2, [r3, #96]	; 0x60
                /* Return Error */
                return HAL_ERROR;
 80102f4:	2301      	movs	r3, #1
 80102f6:	e014      	b.n	8010322 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8010320:	2300      	movs	r3, #0
        }
 8010322:	4618      	mov	r0, r3
 8010324:	371c      	adds	r7, #28
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr

0801032e <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 801032e:	b480      	push	{r7}
 8010330:	b085      	sub	sp, #20
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801033a:	2b10      	cmp	r3, #16
 801033c:	d173      	bne.n	8010426 <HAL_ETH_Start_IT+0xf8>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2223      	movs	r2, #35	; 0x23
 8010342:	659a      	str	r2, [r3, #88]	; 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]
 8010348:	e00e      	b.n	8010368 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	320c      	adds	r2, #12
 8010350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010354:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	3301      	adds	r3, #1
 8010366:	60fb      	str	r3, [r7, #12]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2b03      	cmp	r3, #3
 801036c:	d9ed      	bls.n	801034a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2201      	movs	r2, #1
 8010372:	651a      	str	r2, [r3, #80]	; 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f042 0202 	orr.w	r2, r2, #2
 8010382:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f042 0201 	orr.w	r2, r2, #1
 8010392:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f042 0201 	orr.w	r2, r2, #1
 80103a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	f241 1304 	movw	r3, #4356	; 0x1104
 80103b0:	4413      	add	r3, r2
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	6811      	ldr	r1, [r2, #0]
 80103b8:	f043 0201 	orr.w	r2, r3, #1
 80103bc:	f241 1304 	movw	r3, #4356	; 0x1104
 80103c0:	440b      	add	r3, r1
 80103c2:	601a      	str	r2, [r3, #0]

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80103cc:	4413      	add	r3, r2
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	6811      	ldr	r1, [r2, #0]
 80103d4:	f043 0201 	orr.w	r2, r3, #1
 80103d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80103dc:	440b      	add	r3, r1
 80103de:	601a      	str	r2, [r3, #0]

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80103f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80103f6:	601a      	str	r2, [r3, #0]
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	f241 1334 	movw	r3, #4404	; 0x1134
 8010400:	4413      	add	r3, r2
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	6811      	ldr	r1, [r2, #0]
 8010408:	f24d 0241 	movw	r2, #53313	; 0xd041
 801040c:	431a      	orrs	r2, r3
 801040e:	f241 1334 	movw	r3, #4404	; 0x1134
 8010412:	440b      	add	r3, r1
 8010414:	601a      	str	r2, [r3, #0]
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2210      	movs	r2, #16
 801041a:	659a      	str	r2, [r3, #88]	; 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2222      	movs	r2, #34	; 0x22
 8010420:	65da      	str	r2, [r3, #92]	; 0x5c

                return HAL_OK;
 8010422:	2300      	movs	r3, #0
 8010424:	e000      	b.n	8010428 <HAL_ETH_Start_IT+0xfa>
            }
            else
            {
                return HAL_ERROR;
 8010426:	2301      	movs	r3, #1
            }
        }
 8010428:	4618      	mov	r0, r3
 801042a:	3714      	adds	r7, #20
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr

08010434 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010440:	2b00      	cmp	r3, #0
 8010442:	d066      	beq.n	8010512 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2223      	movs	r2, #35	; 0x23
 8010448:	659a      	str	r2, [r3, #88]	; 0x58
                /* Disable intrrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	f241 1334 	movw	r3, #4404	; 0x1134
 8010452:	4413      	add	r3, r2
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	6811      	ldr	r1, [r2, #0]
 801045a:	4a31      	ldr	r2, [pc, #196]	; (8010520 <HAL_ETH_Stop_IT+0xec>)
 801045c:	401a      	ands	r2, r3
 801045e:	f241 1334 	movw	r3, #4404	; 0x1134
 8010462:	440b      	add	r3, r1
 8010464:	601a      	str	r2, [r3, #0]
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	f241 1304 	movw	r3, #4356	; 0x1104
 801046e:	4413      	add	r3, r2
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	6811      	ldr	r1, [r2, #0]
 8010476:	f023 0201 	bic.w	r2, r3, #1
 801047a:	f241 1304 	movw	r3, #4356	; 0x1104
 801047e:	440b      	add	r3, r1
 8010480:	601a      	str	r2, [r3, #0]

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	f241 1308 	movw	r3, #4360	; 0x1108
 801048a:	4413      	add	r3, r2
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	6811      	ldr	r1, [r2, #0]
 8010492:	f023 0201 	bic.w	r2, r3, #1
 8010496:	f241 1308 	movw	r3, #4360	; 0x1108
 801049a:	440b      	add	r3, r1
 801049c:	601a      	str	r2, [r3, #0]

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f022 0201 	bic.w	r2, r2, #1
 80104ac:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f042 0201 	orr.w	r2, r2, #1
 80104be:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f022 0202 	bic.w	r2, r2, #2
 80104d0:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80104d2:	2300      	movs	r3, #0
 80104d4:	60fb      	str	r3, [r7, #12]
 80104d6:	e00e      	b.n	80104f6 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	320c      	adds	r2, #12
 80104de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104e2:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	3301      	adds	r3, #1
 80104f4:	60fb      	str	r3, [r7, #12]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b03      	cmp	r3, #3
 80104fa:	d9ed      	bls.n	80104d8 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	651a      	str	r2, [r3, #80]	; 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2210      	movs	r2, #16
 8010506:	659a      	str	r2, [r3, #88]	; 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2210      	movs	r2, #16
 801050c:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Return function status */
                return HAL_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	e000      	b.n	8010514 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8010512:	2301      	movs	r3, #1
            }
        }
 8010514:	4618      	mov	r0, r3
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	ffff2fbe 	.word	0xffff2fbe

08010524 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d107      	bne.n	8010544 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010538:	f043 0201 	orr.w	r2, r3, #1
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	661a      	str	r2, [r3, #96]	; 0x60
                return HAL_ERROR;
 8010540:	2301      	movs	r3, #1
 8010542:	e037      	b.n	80105b4 <HAL_ETH_Transmit_IT+0x90>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010548:	2b10      	cmp	r3, #16
 801054a:	d132      	bne.n	80105b2 <HAL_ETH_Transmit_IT+0x8e>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 801054c:	2201      	movs	r2, #1
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f001 f90f 	bl	8011774 <ETH_Prepare_Tx_Descriptors>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d007      	beq.n	801056c <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010560:	f043 0202 	orr.w	r2, r3, #2
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	661a      	str	r2, [r3, #96]	; 0x60
                    return HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e023      	b.n	80105b4 <HAL_ETH_Transmit_IT+0x90>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	629a      	str	r2, [r3, #40]	; 0x28
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057a:	2b03      	cmp	r3, #3
 801057c:	d904      	bls.n	8010588 <HAL_ETH_Transmit_IT+0x64>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010582:	1f1a      	subs	r2, r3, #4
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	629a      	str	r2, [r3, #40]	; 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	3106      	adds	r1, #6
 8010594:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010598:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 801059c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801059e:	f3bf 8f4f 	dsb	sy
}
 80105a2:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80105ac:	681b      	ldr	r3, [r3, #0]

                return HAL_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	e000      	b.n	80105b4 <HAL_ETH_Transmit_IT+0x90>
            }
            else
            {
                return HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
            }
        }
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 80105bc:	b480      	push	{r7}
 80105be:	b08d      	sub	sp, #52	; 0x34
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3330      	adds	r3, #48	; 0x30
 80105c8:	623b      	str	r3, [r7, #32]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 80105ca:	6a3b      	ldr	r3, [r7, #32]
 80105cc:	691b      	ldr	r3, [r3, #16]
 80105ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d8:	61fb      	str	r3, [r7, #28]
            uint32_t desc_scan_count = 0;
 80105da:	2300      	movs	r3, #0
 80105dc:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 80105de:	2300      	movs	r3, #0
 80105e0:	61bb      	str	r3, [r7, #24]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 80105e2:	2300      	movs	r3, #0
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80105e6:	e05b      	b.n	80106a0 <HAL_ETH_IsRxDataAvailable+0xe4>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	617b      	str	r3, [r7, #20]
                desc_scan_count++;
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	3301      	adds	r3, #1
 80105f2:	62bb      	str	r3, [r7, #40]	; 0x28

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d006      	beq.n	801060c <HAL_ETH_IsRxDataAvailable+0x50>
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <HAL_ETH_IsRxDataAvailable+0x50>
 8010608:	2301      	movs	r3, #1
 801060a:	e000      	b.n	801060e <HAL_ETH_IsRxDataAvailable+0x52>
 801060c:	2300      	movs	r3, #0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10a      	bne.n	8010628 <HAL_ETH_IsRxDataAvailable+0x6c>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	613b      	str	r3, [r7, #16]
}
 8010624:	bf00      	nop
 8010626:	e7fe      	b.n	8010626 <HAL_ETH_IsRxDataAvailable+0x6a>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801062e:	2b00      	cmp	r3, #0
 8010630:	d036      	beq.n	80106a0 <HAL_ETH_IsRxDataAvailable+0xe4>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	3301      	adds	r3, #1
 8010636:	61bb      	str	r3, [r7, #24]

                    if( app_desc_count == 1U )
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	2b01      	cmp	r3, #1
 801063c:	d101      	bne.n	8010642 <HAL_ETH_IsRxDataAvailable+0x86>
                    {
                        first_app_desc_index = desc_index;
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	627b      	str	r3, [r7, #36]	; 0x24
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8010642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010644:	3301      	adds	r3, #1
 8010646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	2b03      	cmp	r3, #3
 801064c:	d902      	bls.n	8010654 <HAL_ETH_IsRxDataAvailable+0x98>
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	3b04      	subs	r3, #4
 8010652:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801065c:	61fb      	str	r3, [r7, #28]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	db11      	blt.n	801068a <HAL_ETH_IsRxDataAvailable+0xce>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00b      	beq.n	801068a <HAL_ETH_IsRxDataAvailable+0xce>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	2201      	movs	r2, #1
 8010676:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	3301      	adds	r3, #1
 801067c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010680:	2b03      	cmp	r3, #3
 8010682:	d902      	bls.n	801068a <HAL_ETH_IsRxDataAvailable+0xce>
 8010684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010686:	3b04      	subs	r3, #4
 8010688:	62fb      	str	r3, [r7, #44]	; 0x2c
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801068e:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010694:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 801069c:	2301      	movs	r3, #1
 801069e:	e018      	b.n	80106d2 <HAL_ETH_IsRxDataAvailable+0x116>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	db02      	blt.n	80106ae <HAL_ETH_IsRxDataAvailable+0xf2>
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	2b03      	cmp	r3, #3
 80106ac:	d99c      	bls.n	80105e8 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00a      	beq.n	80106ca <HAL_ETH_IsRxDataAvailable+0x10e>
	__asm volatile
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	f383 8811 	msr	BASEPRI, r3
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	f3bf 8f4f 	dsb	sy
 80106c4:	60fb      	str	r3, [r7, #12]
}
 80106c6:	bf00      	nop
 80106c8:	e7fe      	b.n	80106c8 <HAL_ETH_IsRxDataAvailable+0x10c>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	2200      	movs	r2, #0
 80106ce:	619a      	str	r2, [r3, #24]

            return 0;
 80106d0:	2300      	movs	r3, #0
        }
 80106d2:	4618      	mov	r0, r3
 80106d4:	3734      	adds	r7, #52	; 0x34
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 80106de:	b580      	push	{r7, lr}
 80106e0:	b08a      	sub	sp, #40	; 0x28
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3330      	adds	r3, #48	; 0x30
 80106ec:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <HAL_ETH_GetRxData+0x2c>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	617b      	str	r3, [r7, #20]
}
 8010706:	bf00      	nop
 8010708:	e7fe      	b.n	8010708 <HAL_ETH_GetRxData+0x2a>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff ff56 	bl	80105bc <HAL_ETH_IsRxDataAvailable>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <HAL_ETH_GetRxData+0x3c>
            {
                /* No data to be transferred to the application */
                return 0U;
 8010716:	2300      	movs	r3, #0
 8010718:	e034      	b.n	8010784 <HAL_ETH_GetRxData+0xa6>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	623b      	str	r3, [r7, #32]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	6a3a      	ldr	r2, [r7, #32]
 8010724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010728:	61fb      	str	r3, [r7, #28]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	699b      	ldr	r3, [r3, #24]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d00a      	beq.n	8010748 <HAL_ETH_GetRxData+0x6a>
	__asm volatile
 8010732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	613b      	str	r3, [r7, #16]
}
 8010744:	bf00      	nop
 8010746:	e7fe      	b.n	8010746 <HAL_ETH_GetRxData+0x68>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010750:	61bb      	str	r3, [r7, #24]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	461a      	mov	r2, r3
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	69ba      	ldr	r2, [r7, #24]
 8010760:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	695b      	ldr	r3, [r3, #20]
 8010766:	69ba      	ldr	r2, [r7, #24]
 8010768:	429a      	cmp	r2, r3
 801076a:	d90a      	bls.n	8010782 <HAL_ETH_GetRxData+0xa4>
	__asm volatile
 801076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010770:	f383 8811 	msr	BASEPRI, r3
 8010774:	f3bf 8f6f 	isb	sy
 8010778:	f3bf 8f4f 	dsb	sy
 801077c:	60fb      	str	r3, [r7, #12]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <HAL_ETH_GetRxData+0xa2>

            return packet_length;
 8010782:	69bb      	ldr	r3, [r7, #24]
        }
 8010784:	4618      	mov	r0, r3
 8010786:	3728      	adds	r7, #40	; 0x28
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 801078c:	b480      	push	{r7}
 801078e:	b08b      	sub	sp, #44	; 0x2c
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	3330      	adds	r3, #48	; 0x30
 801079a:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	695b      	ldr	r3, [r3, #20]
 80107a0:	627b      	str	r3, [r7, #36]	; 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107aa:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	699b      	ldr	r3, [r3, #24]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d101      	bne.n	80107be <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e057      	b.n	801086e <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	69db      	ldr	r3, [r3, #28]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d002      	beq.n	80107cc <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 80107c6:	69fb      	ldr	r3, [r7, #28]
 80107c8:	3301      	adds	r3, #1
 80107ca:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80107cc:	2300      	movs	r3, #0
 80107ce:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d005      	beq.n	80107e2 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	6a3b      	ldr	r3, [r7, #32]
 80107de:	611a      	str	r2, [r3, #16]
 80107e0:	e002      	b.n	80107e8 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 80107e8:	693a      	ldr	r2, [r7, #16]
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 80107f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80107f8:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d003      	beq.n	801080a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010808:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010810:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010818:	f3bf 8f4f 	dsb	sy
}
 801081c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	3b01      	subs	r3, #1
 8010826:	69ba      	ldr	r2, [r7, #24]
 8010828:	429a      	cmp	r2, r3
 801082a:	d211      	bcs.n	8010850 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	3301      	adds	r3, #1
 8010830:	627b      	str	r3, [r7, #36]	; 0x24
 8010832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010834:	2b03      	cmp	r3, #3
 8010836:	d902      	bls.n	801083e <HAL_ETH_BuildRxDescriptors+0xb2>
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	3b04      	subs	r3, #4
 801083c:	627b      	str	r3, [r7, #36]	; 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010846:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	3301      	adds	r3, #1
 801084c:	61bb      	str	r3, [r7, #24]
            {
 801084e:	e7bf      	b.n	80107d0 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8010850:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6819      	ldr	r1, [r3, #0]
 8010856:	6a3a      	ldr	r2, [r7, #32]
 8010858:	f241 1328 	movw	r3, #4392	; 0x1128
 801085c:	440b      	add	r3, r1
 801085e:	601a      	str	r2, [r3, #0]

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2200      	movs	r2, #0
 8010864:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	64da      	str	r2, [r3, #76]	; 0x4c

            return HAL_OK;
 801086c:	2300      	movs	r3, #0
        }
 801086e:	4618      	mov	r0, r3
 8010870:	372c      	adds	r7, #44	; 0x2c
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
	...

0801087c <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010892:	2b40      	cmp	r3, #64	; 0x40
 8010894:	d113      	bne.n	80108be <HAL_ETH_IRQHandler+0x42>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	f241 1334 	movw	r3, #4404	; 0x1134
 801089e:	4413      	add	r3, r2
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a6:	2b40      	cmp	r3, #64	; 0x40
 80108a8:	d109      	bne.n	80108be <HAL_ETH_IRQHandler+0x42>
                            heth->RxCpltCallback( heth );
                        }
                    #else
                        {
                            /* Receive complete callback */
                            HAL_ETH_RxCpltCallback( heth );
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff fb3f 	bl	800ff2e <HAL_ETH_RxCpltCallback>
                        }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80108b8:	f248 0240 	movw	r2, #32832	; 0x8040
 80108bc:	601a      	str	r2, [r3, #0]
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 0301 	and.w	r3, r3, #1
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d113      	bne.n	80108f8 <HAL_ETH_IRQHandler+0x7c>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	f241 1334 	movw	r3, #4404	; 0x1134
 80108d8:	4413      	add	r3, r2
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d109      	bne.n	80108f8 <HAL_ETH_IRQHandler+0x7c>
                            heth->TxCpltCallback( heth );
                        }
                    #else
                        {
                            /* Transfer complete callback */
                            HAL_ETH_TxCpltCallback( heth );
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fb17 	bl	800ff18 <HAL_ETH_TxCpltCallback>
                        }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80108f2:	f248 0201 	movw	r2, #32769	; 0x8001
 80108f6:	601a      	str	r2, [r3, #0]
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801090a:	d14a      	bne.n	80109a2 <HAL_ETH_IRQHandler+0x126>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	f241 1334 	movw	r3, #4404	; 0x1134
 8010914:	4413      	add	r3, r2
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801091c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010920:	d13f      	bne.n	80109a2 <HAL_ETH_IRQHandler+0x126>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010926:	f043 0208 	orr.w	r2, r3, #8
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	661a      	str	r2, [r3, #96]	; 0x60

                    /* if fatal bus error occured */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801093c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010940:	d11c      	bne.n	801097c <HAL_ETH_IRQHandler+0x100>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	f241 1302 	movw	r3, #4354	; 0x1102
 8010950:	4013      	ands	r3, r2
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	6653      	str	r3, [r2, #100]	; 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	f241 1334 	movw	r3, #4404	; 0x1134
 801095e:	4413      	add	r3, r2
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	6811      	ldr	r1, [r2, #0]
 8010966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801096a:	f241 1334 	movw	r3, #4404	; 0x1134
 801096e:	440b      	add	r3, r1
 8010970:	601a      	str	r2, [r3, #0]

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8010972:	21e0      	movs	r1, #224	; 0xe0
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f7ff fbbd 	bl	80100f4 <set_error_state>
 801097a:	e00f      	b.n	801099c <HAL_ETH_IRQHandler+0x120>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	665a      	str	r2, [r3, #100]	; 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8010996:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 801099a:	601a      	str	r2, [r3, #0]
                            heth->DMAErrorCallback( heth );
                        }
                    #else
                        {
                            /* Ethernet DMA Error callback */
                            HAL_ETH_DMAErrorCallback( heth );
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff fad1 	bl	800ff44 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80109aa:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80109ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80109b2:	d10f      	bne.n	80109d4 <HAL_ETH_IRQHandler+0x158>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	669a      	str	r2, [r3, #104]	; 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80109c0:	21e0      	movs	r1, #224	; 0xe0
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7ff fb96 	bl	80100f4 <set_error_state>
                        heth->DMAErrorCallback( heth );
                    }
                #else
                    {
                        /* Ethernet MAC Error callback */
                        HAL_ETH_MACErrorCallback( heth );
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 f843 	bl	8010a54 <HAL_ETH_MACErrorCallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	669a      	str	r2, [r3, #104]	; 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80109dc:	f003 0310 	and.w	r3, r3, #16
 80109e0:	2b10      	cmp	r3, #16
 80109e2:	d10d      	bne.n	8010a00 <HAL_ETH_IRQHandler+0x184>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80109ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	66da      	str	r2, [r3, #108]	; 0x6c
                        heth->PMTCallback( heth );
                    }
                #else
                    {
                        /* Ethernet PMT callback */
                        HAL_ETH_PMTCallback( heth );
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f837 	bl	8010a68 <HAL_ETH_PMTCallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010a08:	f003 0320 	and.w	r3, r3, #32
 8010a0c:	2b20      	cmp	r3, #32
 8010a0e:	d10d      	bne.n	8010a2c <HAL_ETH_IRQHandler+0x1b0>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010a18:	f003 020f 	and.w	r2, r3, #15
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	671a      	str	r2, [r3, #112]	; 0x70
                        heth->EEECallback( heth );
                    }
                #else
                    {
                        /* Ethernet EEE callback */
                        HAL_ETH_EEECallback( heth );
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 f82b 	bl	8010a7c <HAL_ETH_EEECallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	671a      	str	r2, [r3, #112]	; 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8010a2c:	4b08      	ldr	r3, [pc, #32]	; (8010a50 <HAL_ETH_IRQHandler+0x1d4>)
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d006      	beq.n	8010a46 <HAL_ETH_IRQHandler+0x1ca>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8010a38:	4b05      	ldr	r3, [pc, #20]	; (8010a50 <HAL_ETH_IRQHandler+0x1d4>)
 8010a3a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8010a3e:	629a      	str	r2, [r3, #40]	; 0x28
                            heth->WakeUpCallback( heth );
                        }
                    #else
                        {
                            /* ETH WAKEUP callback */
                            HAL_ETH_WakeUpCallback( heth );
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f825 	bl	8010a90 <HAL_ETH_WakeUpCallback>
                        }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	58000080 	.word	0x58000080

08010a54 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8010a84:	bf00      	nop
 8010a86:	370c      	adds	r7, #12
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr

08010a90 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e03e      	b.n	8010b44 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ace:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	055b      	lsls	r3, r3, #21
 8010ada:	4313      	orrs	r3, r2
 8010adc:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	041b      	lsls	r3, r3, #16
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	f043 030c 	orr.w	r3, r3, #12
 8010af2:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	f043 0301 	orr.w	r3, r3, #1
 8010afa:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	697a      	ldr	r2, [r7, #20]
 8010b02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

            tickstart = HAL_GetTick();
 8010b06:	f7f0 fa97 	bl	8001038 <HAL_GetTick>
 8010b0a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8010b0c:	e009      	b.n	8010b22 <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8010b0e:	f7f0 fa93 	bl	8001038 <HAL_GetTick>
 8010b12:	4602      	mov	r2, r0
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010b1c:	d901      	bls.n	8010b22 <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e010      	b.n	8010b44 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b2a:	f003 0301 	and.w	r3, r3, #1
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1ed      	bne.n	8010b0e <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8010b42:	2300      	movs	r3, #0
        }
 8010b44:	4618      	mov	r0, r3
 8010b46:	3718      	adds	r7, #24
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
 8010b58:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b62:	f003 0301 	and.w	r3, r3, #1
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e03c      	b.n	8010be8 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b76:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	055b      	lsls	r3, r3, #21
 8010b82:	4313      	orrs	r3, r2
 8010b84:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	041b      	lsls	r3, r3, #16
 8010b90:	4313      	orrs	r3, r2
 8010b92:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	f023 030c 	bic.w	r3, r3, #12
 8010b9a:	f043 0304 	orr.w	r3, r3, #4
 8010b9e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	f043 0301 	orr.w	r3, r3, #1
 8010ba6:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	4b10      	ldr	r3, [pc, #64]	; (8010bf0 <HAL_ETH_WritePHYRegister+0xa4>)
 8010bae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8010bb2:	4a0f      	ldr	r2, [pc, #60]	; (8010bf0 <HAL_ETH_WritePHYRegister+0xa4>)
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

            tickstart = HAL_GetTick();
 8010bba:	f7f0 fa3d 	bl	8001038 <HAL_GetTick>
 8010bbe:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8010bc0:	e009      	b.n	8010bd6 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8010bc2:	f7f0 fa39 	bl	8001038 <HAL_GetTick>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010bd0:	d901      	bls.n	8010bd6 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e008      	b.n	8010be8 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010bde:	f003 0301 	and.w	r3, r3, #1
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1ed      	bne.n	8010bc2 <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8010be6:	2300      	movs	r3, #0
        }
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	40028000 	.word	0x40028000

08010bf4 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	e1c3      	b.n	8010f90 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f003 020c 	and.w	r2, r3, #12
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	62da      	str	r2, [r3, #44]	; 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f003 0310 	and.w	r3, r3, #16
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bf14      	ite	ne
 8010c24:	2301      	movne	r3, #1
 8010c26:	2300      	moveq	r3, #0
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	625a      	str	r2, [r3, #36]	; 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	bf0c      	ite	eq
 8010c4e:	2301      	moveq	r3, #1
 8010c50:	2300      	movne	r3, #0
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	461a      	mov	r2, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	bf14      	ite	ne
 8010c6a:	2301      	movne	r3, #1
 8010c6c:	2300      	moveq	r3, #0
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	461a      	mov	r2, r3
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bf0c      	ite	eq
 8010c84:	2301      	moveq	r3, #1
 8010c86:	2300      	movne	r3, #0
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	bf14      	ite	ne
 8010c9e:	2301      	movne	r3, #1
 8010ca0:	2300      	moveq	r3, #0
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	bf14      	ite	ne
 8010cb8:	2301      	movne	r3, #1
 8010cba:	2300      	moveq	r3, #0
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	bf14      	ite	ne
 8010cee:	2301      	movne	r3, #1
 8010cf0:	2300      	moveq	r3, #0
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	bf0c      	ite	eq
 8010d08:	2301      	moveq	r3, #1
 8010d0a:	2300      	movne	r3, #0
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	461a      	mov	r2, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	bf0c      	ite	eq
 8010d22:	2301      	moveq	r3, #1
 8010d24:	2300      	movne	r3, #0
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	461a      	mov	r2, r3
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf14      	ite	ne
 8010d3c:	2301      	movne	r3, #1
 8010d3e:	2300      	moveq	r3, #0
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	461a      	mov	r2, r3
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	bf14      	ite	ne
 8010d56:	2301      	movne	r3, #1
 8010d58:	2300      	moveq	r3, #0
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	bf14      	ite	ne
 8010d70:	2301      	movne	r3, #1
 8010d72:	2300      	moveq	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	461a      	mov	r2, r3
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	bf14      	ite	ne
 8010d8a:	2301      	movne	r3, #1
 8010d8c:	2300      	moveq	r3, #0
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	461a      	mov	r2, r3
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	bf14      	ite	ne
 8010db2:	2301      	movne	r3, #1
 8010db4:	2300      	moveq	r3, #0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	461a      	mov	r2, r3
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	635a      	str	r2, [r3, #52]	; 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bf0c      	ite	eq
 8010de8:	2301      	moveq	r3, #1
 8010dea:	2300      	movne	r3, #0
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	461a      	mov	r2, r3
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bf14      	ite	ne
 8010e04:	2301      	movne	r3, #1
 8010e06:	2300      	moveq	r3, #0
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bf14      	ite	ne
 8010e20:	2301      	movne	r3, #1
 8010e22:	2300      	moveq	r3, #0
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	461a      	mov	r2, r3
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	bf14      	ite	ne
 8010e3c:	2301      	movne	r3, #1
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	461a      	mov	r2, r3
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	0e5b      	lsrs	r3, r3, #25
 8010e52:	f003 021f 	and.w	r2, r3, #31
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	63da      	str	r2, [r3, #60]	; 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	bf14      	ite	ne
 8010e68:	2301      	movne	r3, #1
 8010e6a:	2300      	moveq	r3, #0
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	461a      	mov	r2, r3
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f003 020f 	and.w	r2, r3, #15
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	645a      	str	r2, [r3, #68]	; 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8a:	f003 0302 	and.w	r3, r3, #2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	bf14      	ite	ne
 8010e92:	2301      	movne	r3, #1
 8010e94:	2300      	moveq	r3, #0
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	461a      	mov	r2, r3
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bf0c      	ite	eq
 8010eae:	2301      	moveq	r3, #1
 8010eb0:	2300      	movne	r3, #0
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ec2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	651a      	str	r2, [r3, #80]	; 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ed0:	0c1b      	lsrs	r3, r3, #16
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	649a      	str	r2, [r3, #72]	; 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ee0:	f003 0301 	and.w	r3, r3, #1
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	bf14      	ite	ne
 8010ee8:	2301      	movne	r3, #1
 8010eea:	2300      	moveq	r3, #0
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	461a      	mov	r2, r3
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010efe:	f003 0302 	and.w	r3, r3, #2
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	bf14      	ite	ne
 8010f06:	2301      	movne	r3, #1
 8010f08:	2300      	moveq	r3, #0
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8010f1c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	659a      	str	r2, [r3, #88]	; 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8010f2c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	65da      	str	r2, [r3, #92]	; 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8010f3c:	f003 0308 	and.w	r3, r3, #8
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bf14      	ite	ne
 8010f44:	2301      	movne	r3, #1
 8010f46:	2300      	moveq	r3, #0
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8010f5a:	f003 0310 	and.w	r3, r3, #16
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	bf14      	ite	ne
 8010f62:	2301      	movne	r3, #1
 8010f64:	2300      	moveq	r3, #0
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	461a      	mov	r2, r3
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8010f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	bf0c      	ite	eq
 8010f80:	2301      	moveq	r3, #1
 8010f82:	2300      	movne	r3, #0
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	461a      	mov	r2, r3
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

            return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
        }
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d101      	bne.n	8010fb0 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	e00a      	b.n	8010fc6 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fb4:	2b10      	cmp	r3, #16
 8010fb6:	d105      	bne.n	8010fc4 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8010fb8:	6839      	ldr	r1, [r7, #0]
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 f860 	bl	8011080 <ETH_SetMACConfig>

                return HAL_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e000      	b.n	8010fc6 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8010fc4:	2301      	movs	r3, #1
            }
        }
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
	...

08010fd0 <HAL_ETH_SetMDIOClockRange>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        void HAL_ETH_SetMDIOClockRange( ETH_HandleTypeDef * heth )
        {
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010fe0:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010fe8:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8010fea:	f7f1 faf1 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8010fee:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	4a1e      	ldr	r2, [pc, #120]	; (801106c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d908      	bls.n	801100a <HAL_ETH_SetMDIOClockRange+0x3a>
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	4a1d      	ldr	r2, [pc, #116]	; (8011070 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d804      	bhi.n	801100a <HAL_ETH_SetMDIOClockRange+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011006:	60fb      	str	r3, [r7, #12]
 8011008:	e027      	b.n	801105a <HAL_ETH_SetMDIOClockRange+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	4a18      	ldr	r2, [pc, #96]	; (8011070 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d908      	bls.n	8011024 <HAL_ETH_SetMDIOClockRange+0x54>
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	4a17      	ldr	r2, [pc, #92]	; (8011074 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d204      	bcs.n	8011024 <HAL_ETH_SetMDIOClockRange+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e01a      	b.n	801105a <HAL_ETH_SetMDIOClockRange+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	4a13      	ldr	r2, [pc, #76]	; (8011074 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d303      	bcc.n	8011034 <HAL_ETH_SetMDIOClockRange+0x64>
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	4a12      	ldr	r2, [pc, #72]	; (8011078 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d911      	bls.n	8011058 <HAL_ETH_SetMDIOClockRange+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	4a10      	ldr	r2, [pc, #64]	; (8011078 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d908      	bls.n	801104e <HAL_ETH_SetMDIOClockRange+0x7e>
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	4a0f      	ldr	r2, [pc, #60]	; (801107c <HAL_ETH_SetMDIOClockRange+0xac>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d804      	bhi.n	801104e <HAL_ETH_SetMDIOClockRange+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801104a:	60fb      	str	r3, [r7, #12]
 801104c:	e005      	b.n	801105a <HAL_ETH_SetMDIOClockRange+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e000      	b.n	801105a <HAL_ETH_SetMDIOClockRange+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8011058:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        }
 8011064:	bf00      	nop
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	01312cff 	.word	0x01312cff
 8011070:	02160ebf 	.word	0x02160ebf
 8011074:	03938700 	.word	0x03938700
 8011078:	05f5e0ff 	.word	0x05f5e0ff
 801107c:	08f0d17f 	.word	0x08f0d17f

08011080 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8011092:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	791b      	ldrb	r3, [r3, #4]
 8011098:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 801109a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	7b1b      	ldrb	r3, [r3, #12]
 80110a0:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80110a2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	7b5b      	ldrb	r3, [r3, #13]
 80110a8:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80110aa:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	7b9b      	ldrb	r3, [r3, #14]
 80110b0:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80110b2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	7bdb      	ldrb	r3, [r3, #15]
 80110b8:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80110ba:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	7c12      	ldrb	r2, [r2, #16]
 80110c0:	2a00      	cmp	r2, #0
 80110c2:	d102      	bne.n	80110ca <ETH_SetMACConfig+0x4a>
 80110c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80110c8:	e000      	b.n	80110cc <ETH_SetMACConfig+0x4c>
 80110ca:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80110cc:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80110ce:	683a      	ldr	r2, [r7, #0]
 80110d0:	7c52      	ldrb	r2, [r2, #17]
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	d102      	bne.n	80110dc <ETH_SetMACConfig+0x5c>
 80110d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80110da:	e000      	b.n	80110de <ETH_SetMACConfig+0x5e>
 80110dc:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80110de:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	7c9b      	ldrb	r3, [r3, #18]
 80110e4:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80110e6:	431a      	orrs	r2, r3
                          macconf->Speed |
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80110ec:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 80110f2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	7f1b      	ldrb	r3, [r3, #28]
 80110f8:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 80110fa:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	7f5b      	ldrb	r3, [r3, #29]
 8011100:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8011102:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8011104:	683a      	ldr	r2, [r7, #0]
 8011106:	7f92      	ldrb	r2, [r2, #30]
 8011108:	2a00      	cmp	r2, #0
 801110a:	d102      	bne.n	8011112 <ETH_SetMACConfig+0x92>
 801110c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011110:	e000      	b.n	8011114 <ETH_SetMACConfig+0x94>
 8011112:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8011114:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	7fdb      	ldrb	r3, [r3, #31]
 801111a:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 801111c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011124:	2a00      	cmp	r2, #0
 8011126:	d102      	bne.n	801112e <ETH_SetMACConfig+0xae>
 8011128:	f44f 7280 	mov.w	r2, #256	; 0x100
 801112c:	e000      	b.n	8011130 <ETH_SetMACConfig+0xb0>
 801112e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8011130:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8011136:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801113e:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8011140:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8011146:	4313      	orrs	r3, r2
 8011148:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	4b56      	ldr	r3, [pc, #344]	; (80112ac <ETH_SetMACConfig+0x22c>)
 8011152:	4013      	ands	r3, r2
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	6812      	ldr	r2, [r2, #0]
 8011158:	68f9      	ldr	r1, [r7, #12]
 801115a:	430b      	orrs	r3, r1
 801115c:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011162:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801116a:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801116c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011174:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8011176:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801117e:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8011180:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8011182:	683a      	ldr	r2, [r7, #0]
 8011184:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8011188:	2a00      	cmp	r2, #0
 801118a:	d102      	bne.n	8011192 <ETH_SetMACConfig+0x112>
 801118c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011190:	e000      	b.n	8011194 <ETH_SetMACConfig+0x114>
 8011192:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8011194:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801119a:	4313      	orrs	r3, r2
 801119c:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	685a      	ldr	r2, [r3, #4]
 80111a4:	4b42      	ldr	r3, [pc, #264]	; (80112b0 <ETH_SetMACConfig+0x230>)
 80111a6:	4013      	ands	r3, r2
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	6812      	ldr	r2, [r2, #0]
 80111ac:	68f9      	ldr	r1, [r7, #12]
 80111ae:	430b      	orrs	r3, r1
 80111b0:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111b8:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80111be:	4313      	orrs	r3, r2
 80111c0:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68da      	ldr	r2, [r3, #12]
 80111c8:	4b3a      	ldr	r3, [pc, #232]	; (80112b4 <ETH_SetMACConfig+0x234>)
 80111ca:	4013      	ands	r3, r2
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	6812      	ldr	r2, [r2, #0]
 80111d0:	68f9      	ldr	r1, [r7, #12]
 80111d2:	430b      	orrs	r3, r1
 80111d4:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80111dc:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80111e2:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	d101      	bne.n	80111f2 <ETH_SetMACConfig+0x172>
 80111ee:	2280      	movs	r2, #128	; 0x80
 80111f0:	e000      	b.n	80111f4 <ETH_SetMACConfig+0x174>
 80111f2:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 80111f4:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111fa:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80111fc:	4313      	orrs	r3, r2
 80111fe:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011206:	f64f 730d 	movw	r3, #65293	; 0xff0d
 801120a:	4013      	ands	r3, r2
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	6812      	ldr	r2, [r2, #0]
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	430b      	orrs	r3, r1
 8011214:	6713      	str	r3, [r2, #112]	; 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801121c:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011224:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8011226:	4313      	orrs	r3, r2
 8011228:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011232:	f023 0103 	bic.w	r1, r3, #3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68fa      	ldr	r2, [r7, #12]
 801123c:	430a      	orrs	r2, r1
 801123e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 801124a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	430a      	orrs	r2, r1
 8011258:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8011260:	683a      	ldr	r2, [r7, #0]
 8011262:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8011266:	2a00      	cmp	r2, #0
 8011268:	d101      	bne.n	801126e <ETH_SetMACConfig+0x1ee>
 801126a:	2240      	movs	r2, #64	; 0x40
 801126c:	e000      	b.n	8011270 <ETH_SetMACConfig+0x1f0>
 801126e:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 8011270:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011278:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801127a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011282:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8011284:	4313      	orrs	r3, r2
 8011286:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8011290:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	430a      	orrs	r2, r1
 801129c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
        }
 80112a0:	bf00      	nop
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	00048083 	.word	0x00048083
 80112b0:	c0f88000 	.word	0xc0f88000
 80112b4:	fffffef0 	.word	0xfffffef0

080112b8 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	4b38      	ldr	r3, [pc, #224]	; (80113b0 <ETH_SetDMAConfig+0xf8>)
 80112ce:	4013      	ands	r3, r2
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	6812      	ldr	r2, [r2, #0]
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	6809      	ldr	r1, [r1, #0]
 80112d8:	431a      	orrs	r2, r3
 80112da:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80112de:	601a      	str	r2, [r3, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	791b      	ldrb	r3, [r3, #4]
 80112e4:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80112ea:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	7b1b      	ldrb	r3, [r3, #12]
 80112f0:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80112f2:	4313      	orrs	r3, r2
 80112f4:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80112fe:	4413      	add	r3, r2
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	4b2c      	ldr	r3, [pc, #176]	; (80113b4 <ETH_SetDMAConfig+0xfc>)
 8011304:	4013      	ands	r3, r2
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	6811      	ldr	r1, [r2, #0]
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	431a      	orrs	r2, r3
 801130e:	f241 0304 	movw	r3, #4100	; 0x1004
 8011312:	440b      	add	r3, r1
 8011314:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	7b5b      	ldrb	r3, [r3, #13]
 801131a:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8011320:	4313      	orrs	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	4b22      	ldr	r3, [pc, #136]	; (80113b8 <ETH_SetDMAConfig+0x100>)
 8011330:	4013      	ands	r3, r2
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	6811      	ldr	r1, [r2, #0]
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	431a      	orrs	r2, r3
 801133a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 801133e:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	7d1b      	ldrb	r3, [r3, #20]
 8011348:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 801134a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	7f5b      	ldrb	r3, [r3, #29]
 8011350:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8011352:	4313      	orrs	r3, r2
 8011354:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	f241 1304 	movw	r3, #4356	; 0x1104
 801135e:	4413      	add	r3, r2
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	4b16      	ldr	r3, [pc, #88]	; (80113bc <ETH_SetDMAConfig+0x104>)
 8011364:	4013      	ands	r3, r2
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	6811      	ldr	r1, [r2, #0]
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	431a      	orrs	r2, r3
 801136e:	f241 1304 	movw	r3, #4356	; 0x1104
 8011372:	440b      	add	r3, r1
 8011374:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	7f1b      	ldrb	r3, [r3, #28]
 801137a:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8011380:	4313      	orrs	r3, r2
 8011382:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	f241 1308 	movw	r3, #4360	; 0x1108
 801138c:	4413      	add	r3, r2
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <ETH_SetDMAConfig+0x108>)
 8011392:	4013      	ands	r3, r2
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	6811      	ldr	r1, [r2, #0]
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	431a      	orrs	r2, r3
 801139c:	f241 1308 	movw	r3, #4360	; 0x1108
 80113a0:	440b      	add	r3, r1
 80113a2:	601a      	str	r2, [r3, #0]
        }
 80113a4:	bf00      	nop
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	ffff87fd 	.word	0xffff87fd
 80113b4:	ffff2ffe 	.word	0xffff2ffe
 80113b8:	fffec000 	.word	0xfffec000
 80113bc:	ffc0efef 	.word	0xffc0efef
 80113c0:	7fc0ffff 	.word	0x7fc0ffff

080113c4 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b0a4      	sub	sp, #144	; 0x90
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80113d2:	2300      	movs	r3, #0
 80113d4:	653b      	str	r3, [r7, #80]	; 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80113d6:	2300      	movs	r3, #0
 80113d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80113dc:	2300      	movs	r3, #0
 80113de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 80113e2:	2301      	movs	r3, #1
 80113e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80113e8:	2301      	movs	r3, #1
 80113ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 80113ee:	2301      	movs	r3, #1
 80113f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 80113f4:	2300      	movs	r3, #0
 80113f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80113fa:	2301      	movs	r3, #1
 80113fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8011400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011404:	647b      	str	r3, [r7, #68]	; 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8011406:	2300      	movs	r3, #0
 8011408:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801140c:	2300      	movs	r3, #0
 801140e:	66bb      	str	r3, [r7, #104]	; 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8011410:	2300      	movs	r3, #0
 8011412:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8011416:	2300      	movs	r3, #0
 8011418:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801141c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8011420:	663b      	str	r3, [r7, #96]	; 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8011422:	2300      	movs	r3, #0
 8011424:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8011428:	2300      	movs	r3, #0
 801142a:	637b      	str	r3, [r7, #52]	; 0x34
            macDefaultConf.Jabber = ENABLE;
 801142c:	2301      	movs	r3, #1
 801142e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8011432:	2300      	movs	r3, #0
 8011434:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8011438:	2300      	movs	r3, #0
 801143a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801143e:	2300      	movs	r3, #0
 8011440:	67fb      	str	r3, [r7, #124]	; 0x7c
            macDefaultConf.PauseTime = 0x0;
 8011442:	2300      	movs	r3, #0
 8011444:	677b      	str	r3, [r7, #116]	; 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8011446:	2300      	movs	r3, #0
 8011448:	65bb      	str	r3, [r7, #88]	; 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801144a:	2300      	movs	r3, #0
 801144c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8011450:	2300      	movs	r3, #0
 8011452:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8011456:	2301      	movs	r3, #1
 8011458:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801145c:	2320      	movs	r3, #32
 801145e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8011462:	2301      	movs	r3, #1
 8011464:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8011468:	2300      	movs	r3, #0
 801146a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801146e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8011472:	62fb      	str	r3, [r7, #44]	; 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8011474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011478:	643b      	str	r3, [r7, #64]	; 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801147a:	2300      	movs	r3, #0
 801147c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8011480:	2302      	movs	r3, #2
 8011482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8011486:	2300      	movs	r3, #0
 8011488:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801148c:	2300      	movs	r3, #0
 801148e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8011492:	2300      	movs	r3, #0
 8011494:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8011498:	2301      	movs	r3, #1
 801149a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801149e:	2300      	movs	r3, #0
 80114a0:	673b      	str	r3, [r7, #112]	; 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 80114a2:	2301      	movs	r3, #1
 80114a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 80114a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff fde6 	bl	8011080 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80114b4:	2301      	movs	r3, #1
 80114b6:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80114b8:	2301      	movs	r3, #1
 80114ba:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80114bc:	2300      	movs	r3, #0
 80114be:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 80114c0:	2300      	movs	r3, #0
 80114c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 80114c6:	2300      	movs	r3, #0
 80114c8:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80114ca:	2300      	movs	r3, #0
 80114cc:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80114ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80114d2:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 80114d4:	2300      	movs	r3, #0
 80114d6:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80114d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80114dc:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 80114de:	2300      	movs	r3, #0
 80114e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 80114e4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80114e8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80114ea:	f107 0308 	add.w	r3, r7, #8
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff fee1 	bl	80112b8 <ETH_SetDMAConfig>
        }
 80114f6:	bf00      	nop
 80114f8:	3790      	adds	r7, #144	; 0x90
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011510:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011518:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801151a:	f7f1 f859 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 801151e:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	4a1e      	ldr	r2, [pc, #120]	; (801159c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d908      	bls.n	801153a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	4a1d      	ldr	r2, [pc, #116]	; (80115a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d804      	bhi.n	801153a <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011536:	60fb      	str	r3, [r7, #12]
 8011538:	e027      	b.n	801158a <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	4a18      	ldr	r2, [pc, #96]	; (80115a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d908      	bls.n	8011554 <ETH_MAC_MDIO_ClkConfig+0x54>
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	4a17      	ldr	r2, [pc, #92]	; (80115a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d204      	bcs.n	8011554 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011550:	60fb      	str	r3, [r7, #12]
 8011552:	e01a      	b.n	801158a <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	4a13      	ldr	r2, [pc, #76]	; (80115a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d303      	bcc.n	8011564 <ETH_MAC_MDIO_ClkConfig+0x64>
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	4a12      	ldr	r2, [pc, #72]	; (80115a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8011560:	4293      	cmp	r3, r2
 8011562:	d911      	bls.n	8011588 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	4a10      	ldr	r2, [pc, #64]	; (80115a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d908      	bls.n	801157e <ETH_MAC_MDIO_ClkConfig+0x7e>
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	4a0f      	ldr	r2, [pc, #60]	; (80115ac <ETH_MAC_MDIO_ClkConfig+0xac>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d804      	bhi.n	801157e <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	e005      	b.n	801158a <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	e000      	b.n	801158a <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8011588:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        }
 8011594:	bf00      	nop
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	01312cff 	.word	0x01312cff
 80115a0:	02160ebf 	.word	0x02160ebf
 80115a4:	03938700 	.word	0x03938700
 80115a8:	05f5e0ff 	.word	0x05f5e0ff
 80115ac:	08f0d17f 	.word	0x08f0d17f

080115b0 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 80115b0:	b480      	push	{r7}
 80115b2:	b085      	sub	sp, #20
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80115b8:	2300      	movs	r3, #0
 80115ba:	60fb      	str	r3, [r7, #12]
 80115bc:	e01d      	b.n	80115fa <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	68d9      	ldr	r1, [r3, #12]
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	4613      	mov	r3, r2
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	4413      	add	r3, r2
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	440b      	add	r3, r1
 80115ce:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	2200      	movs	r2, #0
 80115d4:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	2200      	movs	r2, #0
 80115da:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	2200      	movs	r2, #0
 80115e0:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	2200      	movs	r2, #0
 80115e6:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80115e8:	68b9      	ldr	r1, [r7, #8]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	3206      	adds	r2, #6
 80115f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3301      	adds	r3, #1
 80115f8:	60fb      	str	r3, [r7, #12]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2b03      	cmp	r3, #3
 80115fe:	d9de      	bls.n	80115be <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	629a      	str	r2, [r3, #40]	; 0x28
            heth->TxDescList.TailTxDesc = 0;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	f241 132c 	movw	r3, #4396	; 0x112c
 8011614:	4413      	add	r3, r2
 8011616:	2203      	movs	r2, #3
 8011618:	601a      	str	r2, [r3, #0]

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68d9      	ldr	r1, [r3, #12]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	f241 1314 	movw	r3, #4372	; 0x1114
 8011626:	4413      	add	r3, r2
 8011628:	6019      	str	r1, [r3, #0]

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	68da      	ldr	r2, [r3, #12]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8011636:	601a      	str	r2, [r3, #0]
        }
 8011638:	bf00      	nop
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801164c:	2300      	movs	r3, #0
 801164e:	60fb      	str	r3, [r7, #12]
 8011650:	e023      	b.n	801169a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6919      	ldr	r1, [r3, #16]
 8011656:	68fa      	ldr	r2, [r7, #12]
 8011658:	4613      	mov	r3, r2
 801165a:	005b      	lsls	r3, r3, #1
 801165c:	4413      	add	r3, r2
 801165e:	00db      	lsls	r3, r3, #3
 8011660:	440b      	add	r3, r1
 8011662:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	2200      	movs	r2, #0
 8011668:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	2200      	movs	r2, #0
 801166e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	2200      	movs	r2, #0
 8011674:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2200      	movs	r2, #0
 801167a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2200      	movs	r2, #0
 8011680:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2200      	movs	r2, #0
 8011686:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors adresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8011688:	68b9      	ldr	r1, [r7, #8]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	68fa      	ldr	r2, [r7, #12]
 801168e:	320c      	adds	r2, #12
 8011690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	3301      	adds	r3, #1
 8011698:	60fb      	str	r3, [r7, #12]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b03      	cmp	r3, #3
 801169e:	d9d8      	bls.n	8011652 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	641a      	str	r2, [r3, #64]	; 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	645a      	str	r2, [r3, #68]	; 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	649a      	str	r2, [r3, #72]	; 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	651a      	str	r2, [r3, #80]	; 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2200      	movs	r2, #0
 80116bc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	f241 1330 	movw	r3, #4400	; 0x1130
 80116c6:	4413      	add	r3, r2
 80116c8:	2203      	movs	r2, #3
 80116ca:	601a      	str	r2, [r3, #0]

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6919      	ldr	r1, [r3, #16]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80116d8:	4413      	add	r3, r2
 80116da:	6019      	str	r1, [r3, #0]

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	f241 1328 	movw	r3, #4392	; 0x1128
 80116ec:	4413      	add	r3, r2
 80116ee:	6019      	str	r1, [r3, #0]
        }
 80116f0:	bf00      	nop
 80116f2:	3714      	adds	r7, #20
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011708:	60fb      	str	r3, [r7, #12]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801170a:	e022      	b.n	8011752 <ETH_Clear_Tx_Descriptors+0x56>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68fa      	ldr	r2, [r7, #12]
 8011710:	3206      	adds	r2, #6
 8011712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011716:	60bb      	str	r3, [r7, #8]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	2b00      	cmp	r3, #0
 801171e:	db21      	blt.n	8011764 <ETH_Clear_Tx_Descriptors+0x68>
                            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                        }
                    }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2200      	movs	r2, #0
 8011724:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3301      	adds	r3, #1
 801172a:	60fb      	str	r3, [r7, #12]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2b03      	cmp	r3, #3
 8011730:	d902      	bls.n	8011738 <ETH_Clear_Tx_Descriptors+0x3c>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3b04      	subs	r3, #4
 8011736:	60fb      	str	r3, [r7, #12]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801173e:	f3bf 8f4f 	dsb	sy
}
 8011742:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8011744:	4b0a      	ldr	r3, [pc, #40]	; (8011770 <ETH_Clear_Tx_Descriptors+0x74>)
 8011746:	6818      	ldr	r0, [r3, #0]
 8011748:	2300      	movs	r3, #0
 801174a:	2200      	movs	r2, #0
 801174c:	2100      	movs	r1, #0
 801174e:	f7f3 fa1b 	bl	8004b88 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8011752:	4b07      	ldr	r3, [pc, #28]	; (8011770 <ETH_Clear_Tx_Descriptors+0x74>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4618      	mov	r0, r3
 8011758:	f7f3 fd9c 	bl	8005294 <uxQueueMessagesWaiting>
 801175c:	4603      	mov	r3, r0
 801175e:	2b04      	cmp	r3, #4
 8011760:	d1d4      	bne.n	801170c <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8011762:	e000      	b.n	8011766 <ETH_Clear_Tx_Descriptors+0x6a>
                    break;
 8011764:	bf00      	nop
        }
 8011766:	bf00      	nop
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	240092a8 	.word	0x240092a8

08011774 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 8011774:	b480      	push	{r7}
 8011776:	b08b      	sub	sp, #44	; 0x2c
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	3318      	adds	r3, #24
 8011784:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	691b      	ldr	r3, [r3, #16]
 801178a:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	69fa      	ldr	r2, [r7, #28]
 8011790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011794:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2200      	movs	r2, #0
 80117a0:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80117a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	da01      	bge.n	80117b2 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 80117ae:	2302      	movs	r3, #2
 80117b0:	e05c      	b.n	801186c <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	689a      	ldr	r2, [r3, #8]
 80117c0:	4b2d      	ldr	r3, [pc, #180]	; (8011878 <ETH_Prepare_Tx_Descriptors+0x104>)
 80117c2:	4013      	ands	r3, r2
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	6852      	ldr	r2, [r2, #4]
 80117c8:	431a      	orrs	r2, r3
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	2200      	movs	r2, #0
 80117d2:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	689a      	ldr	r2, [r3, #8]
 80117d8:	4b28      	ldr	r3, [pc, #160]	; (801187c <ETH_Prepare_Tx_Descriptors+0x108>)
 80117da:	4013      	ands	r3, r2
 80117dc:	69ba      	ldr	r2, [r7, #24]
 80117de:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80117e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117e2:	4b27      	ldr	r3, [pc, #156]	; (8011880 <ETH_Prepare_Tx_Descriptors+0x10c>)
 80117e4:	4013      	ands	r3, r2
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	6852      	ldr	r2, [r2, #4]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	627b      	str	r3, [r7, #36]	; 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f003 0301 	and.w	r3, r3, #1
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d006      	beq.n	8011808 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 80117fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	695b      	ldr	r3, [r3, #20]
 8011804:	4313      	orrs	r3, r2
 8011806:	627b      	str	r3, [r7, #36]	; 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 0320 	and.w	r3, r3, #32
 8011810:	2b00      	cmp	r3, #0
 8011812:	d006      	beq.n	8011822 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	4313      	orrs	r3, r2
 8011820:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8011822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011824:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8011828:	627b      	str	r3, [r7, #36]	; 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011830:	627b      	str	r3, [r7, #36]	; 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8011832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011838:	627b      	str	r3, [r7, #36]	; 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d006      	beq.n	801184e <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	609a      	str	r2, [r3, #8]
 801184c:	e005      	b.n	801185a <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801185e:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011864:	f3bf 8f4f 	dsb	sy
}
 8011868:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801186a:	2300      	movs	r3, #0
        }
 801186c:	4618      	mov	r0, r3
 801186e:	372c      	adds	r7, #44	; 0x2c
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	ffffc000 	.word	0xffffc000
 801187c:	c000ffff 	.word	0xc000ffff
 8011880:	ffff8000 	.word	0xffff8000

08011884 <__errno>:
 8011884:	4b01      	ldr	r3, [pc, #4]	; (801188c <__errno+0x8>)
 8011886:	6818      	ldr	r0, [r3, #0]
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	24000038 	.word	0x24000038

08011890 <std>:
 8011890:	2300      	movs	r3, #0
 8011892:	b510      	push	{r4, lr}
 8011894:	4604      	mov	r4, r0
 8011896:	e9c0 3300 	strd	r3, r3, [r0]
 801189a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801189e:	6083      	str	r3, [r0, #8]
 80118a0:	8181      	strh	r1, [r0, #12]
 80118a2:	6643      	str	r3, [r0, #100]	; 0x64
 80118a4:	81c2      	strh	r2, [r0, #14]
 80118a6:	6183      	str	r3, [r0, #24]
 80118a8:	4619      	mov	r1, r3
 80118aa:	2208      	movs	r2, #8
 80118ac:	305c      	adds	r0, #92	; 0x5c
 80118ae:	f000 f942 	bl	8011b36 <memset>
 80118b2:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <std+0x38>)
 80118b4:	6263      	str	r3, [r4, #36]	; 0x24
 80118b6:	4b05      	ldr	r3, [pc, #20]	; (80118cc <std+0x3c>)
 80118b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80118ba:	4b05      	ldr	r3, [pc, #20]	; (80118d0 <std+0x40>)
 80118bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118be:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <std+0x44>)
 80118c0:	6224      	str	r4, [r4, #32]
 80118c2:	6323      	str	r3, [r4, #48]	; 0x30
 80118c4:	bd10      	pop	{r4, pc}
 80118c6:	bf00      	nop
 80118c8:	08011dd9 	.word	0x08011dd9
 80118cc:	08011dfb 	.word	0x08011dfb
 80118d0:	08011e33 	.word	0x08011e33
 80118d4:	08011e57 	.word	0x08011e57

080118d8 <_cleanup_r>:
 80118d8:	4901      	ldr	r1, [pc, #4]	; (80118e0 <_cleanup_r+0x8>)
 80118da:	f000 b8af 	b.w	8011a3c <_fwalk_reent>
 80118de:	bf00      	nop
 80118e0:	08011fed 	.word	0x08011fed

080118e4 <__sfmoreglue>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	1e4a      	subs	r2, r1, #1
 80118e8:	2568      	movs	r5, #104	; 0x68
 80118ea:	4355      	muls	r5, r2
 80118ec:	460e      	mov	r6, r1
 80118ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118f2:	f000 f929 	bl	8011b48 <_malloc_r>
 80118f6:	4604      	mov	r4, r0
 80118f8:	b140      	cbz	r0, 801190c <__sfmoreglue+0x28>
 80118fa:	2100      	movs	r1, #0
 80118fc:	e9c0 1600 	strd	r1, r6, [r0]
 8011900:	300c      	adds	r0, #12
 8011902:	60a0      	str	r0, [r4, #8]
 8011904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011908:	f000 f915 	bl	8011b36 <memset>
 801190c:	4620      	mov	r0, r4
 801190e:	bd70      	pop	{r4, r5, r6, pc}

08011910 <__sfp_lock_acquire>:
 8011910:	4801      	ldr	r0, [pc, #4]	; (8011918 <__sfp_lock_acquire+0x8>)
 8011912:	f000 b8d8 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 8011916:	bf00      	nop
 8011918:	24009524 	.word	0x24009524

0801191c <__sfp_lock_release>:
 801191c:	4801      	ldr	r0, [pc, #4]	; (8011924 <__sfp_lock_release+0x8>)
 801191e:	f000 b8d3 	b.w	8011ac8 <__retarget_lock_release_recursive>
 8011922:	bf00      	nop
 8011924:	24009524 	.word	0x24009524

08011928 <__sinit_lock_acquire>:
 8011928:	4801      	ldr	r0, [pc, #4]	; (8011930 <__sinit_lock_acquire+0x8>)
 801192a:	f000 b8cc 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 801192e:	bf00      	nop
 8011930:	2400951f 	.word	0x2400951f

08011934 <__sinit_lock_release>:
 8011934:	4801      	ldr	r0, [pc, #4]	; (801193c <__sinit_lock_release+0x8>)
 8011936:	f000 b8c7 	b.w	8011ac8 <__retarget_lock_release_recursive>
 801193a:	bf00      	nop
 801193c:	2400951f 	.word	0x2400951f

08011940 <__sinit>:
 8011940:	b510      	push	{r4, lr}
 8011942:	4604      	mov	r4, r0
 8011944:	f7ff fff0 	bl	8011928 <__sinit_lock_acquire>
 8011948:	69a3      	ldr	r3, [r4, #24]
 801194a:	b11b      	cbz	r3, 8011954 <__sinit+0x14>
 801194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011950:	f7ff bff0 	b.w	8011934 <__sinit_lock_release>
 8011954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011958:	6523      	str	r3, [r4, #80]	; 0x50
 801195a:	4b13      	ldr	r3, [pc, #76]	; (80119a8 <__sinit+0x68>)
 801195c:	4a13      	ldr	r2, [pc, #76]	; (80119ac <__sinit+0x6c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	62a2      	str	r2, [r4, #40]	; 0x28
 8011962:	42a3      	cmp	r3, r4
 8011964:	bf04      	itt	eq
 8011966:	2301      	moveq	r3, #1
 8011968:	61a3      	streq	r3, [r4, #24]
 801196a:	4620      	mov	r0, r4
 801196c:	f000 f820 	bl	80119b0 <__sfp>
 8011970:	6060      	str	r0, [r4, #4]
 8011972:	4620      	mov	r0, r4
 8011974:	f000 f81c 	bl	80119b0 <__sfp>
 8011978:	60a0      	str	r0, [r4, #8]
 801197a:	4620      	mov	r0, r4
 801197c:	f000 f818 	bl	80119b0 <__sfp>
 8011980:	2200      	movs	r2, #0
 8011982:	60e0      	str	r0, [r4, #12]
 8011984:	2104      	movs	r1, #4
 8011986:	6860      	ldr	r0, [r4, #4]
 8011988:	f7ff ff82 	bl	8011890 <std>
 801198c:	68a0      	ldr	r0, [r4, #8]
 801198e:	2201      	movs	r2, #1
 8011990:	2109      	movs	r1, #9
 8011992:	f7ff ff7d 	bl	8011890 <std>
 8011996:	68e0      	ldr	r0, [r4, #12]
 8011998:	2202      	movs	r2, #2
 801199a:	2112      	movs	r1, #18
 801199c:	f7ff ff78 	bl	8011890 <std>
 80119a0:	2301      	movs	r3, #1
 80119a2:	61a3      	str	r3, [r4, #24]
 80119a4:	e7d2      	b.n	801194c <__sinit+0xc>
 80119a6:	bf00      	nop
 80119a8:	08012fc0 	.word	0x08012fc0
 80119ac:	080118d9 	.word	0x080118d9

080119b0 <__sfp>:
 80119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b2:	4607      	mov	r7, r0
 80119b4:	f7ff ffac 	bl	8011910 <__sfp_lock_acquire>
 80119b8:	4b1e      	ldr	r3, [pc, #120]	; (8011a34 <__sfp+0x84>)
 80119ba:	681e      	ldr	r6, [r3, #0]
 80119bc:	69b3      	ldr	r3, [r6, #24]
 80119be:	b913      	cbnz	r3, 80119c6 <__sfp+0x16>
 80119c0:	4630      	mov	r0, r6
 80119c2:	f7ff ffbd 	bl	8011940 <__sinit>
 80119c6:	3648      	adds	r6, #72	; 0x48
 80119c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	d503      	bpl.n	80119d8 <__sfp+0x28>
 80119d0:	6833      	ldr	r3, [r6, #0]
 80119d2:	b30b      	cbz	r3, 8011a18 <__sfp+0x68>
 80119d4:	6836      	ldr	r6, [r6, #0]
 80119d6:	e7f7      	b.n	80119c8 <__sfp+0x18>
 80119d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80119dc:	b9d5      	cbnz	r5, 8011a14 <__sfp+0x64>
 80119de:	4b16      	ldr	r3, [pc, #88]	; (8011a38 <__sfp+0x88>)
 80119e0:	60e3      	str	r3, [r4, #12]
 80119e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119e6:	6665      	str	r5, [r4, #100]	; 0x64
 80119e8:	f000 f86c 	bl	8011ac4 <__retarget_lock_init_recursive>
 80119ec:	f7ff ff96 	bl	801191c <__sfp_lock_release>
 80119f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80119f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80119f8:	6025      	str	r5, [r4, #0]
 80119fa:	61a5      	str	r5, [r4, #24]
 80119fc:	2208      	movs	r2, #8
 80119fe:	4629      	mov	r1, r5
 8011a00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a04:	f000 f897 	bl	8011b36 <memset>
 8011a08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a10:	4620      	mov	r0, r4
 8011a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a14:	3468      	adds	r4, #104	; 0x68
 8011a16:	e7d9      	b.n	80119cc <__sfp+0x1c>
 8011a18:	2104      	movs	r1, #4
 8011a1a:	4638      	mov	r0, r7
 8011a1c:	f7ff ff62 	bl	80118e4 <__sfmoreglue>
 8011a20:	4604      	mov	r4, r0
 8011a22:	6030      	str	r0, [r6, #0]
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d1d5      	bne.n	80119d4 <__sfp+0x24>
 8011a28:	f7ff ff78 	bl	801191c <__sfp_lock_release>
 8011a2c:	230c      	movs	r3, #12
 8011a2e:	603b      	str	r3, [r7, #0]
 8011a30:	e7ee      	b.n	8011a10 <__sfp+0x60>
 8011a32:	bf00      	nop
 8011a34:	08012fc0 	.word	0x08012fc0
 8011a38:	ffff0001 	.word	0xffff0001

08011a3c <_fwalk_reent>:
 8011a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a40:	4606      	mov	r6, r0
 8011a42:	4688      	mov	r8, r1
 8011a44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a48:	2700      	movs	r7, #0
 8011a4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a4e:	f1b9 0901 	subs.w	r9, r9, #1
 8011a52:	d505      	bpl.n	8011a60 <_fwalk_reent+0x24>
 8011a54:	6824      	ldr	r4, [r4, #0]
 8011a56:	2c00      	cmp	r4, #0
 8011a58:	d1f7      	bne.n	8011a4a <_fwalk_reent+0xe>
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a60:	89ab      	ldrh	r3, [r5, #12]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d907      	bls.n	8011a76 <_fwalk_reent+0x3a>
 8011a66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	d003      	beq.n	8011a76 <_fwalk_reent+0x3a>
 8011a6e:	4629      	mov	r1, r5
 8011a70:	4630      	mov	r0, r6
 8011a72:	47c0      	blx	r8
 8011a74:	4307      	orrs	r7, r0
 8011a76:	3568      	adds	r5, #104	; 0x68
 8011a78:	e7e9      	b.n	8011a4e <_fwalk_reent+0x12>
	...

08011a7c <__libc_init_array>:
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	4d0d      	ldr	r5, [pc, #52]	; (8011ab4 <__libc_init_array+0x38>)
 8011a80:	4c0d      	ldr	r4, [pc, #52]	; (8011ab8 <__libc_init_array+0x3c>)
 8011a82:	1b64      	subs	r4, r4, r5
 8011a84:	10a4      	asrs	r4, r4, #2
 8011a86:	2600      	movs	r6, #0
 8011a88:	42a6      	cmp	r6, r4
 8011a8a:	d109      	bne.n	8011aa0 <__libc_init_array+0x24>
 8011a8c:	4d0b      	ldr	r5, [pc, #44]	; (8011abc <__libc_init_array+0x40>)
 8011a8e:	4c0c      	ldr	r4, [pc, #48]	; (8011ac0 <__libc_init_array+0x44>)
 8011a90:	f001 f98c 	bl	8012dac <_init>
 8011a94:	1b64      	subs	r4, r4, r5
 8011a96:	10a4      	asrs	r4, r4, #2
 8011a98:	2600      	movs	r6, #0
 8011a9a:	42a6      	cmp	r6, r4
 8011a9c:	d105      	bne.n	8011aaa <__libc_init_array+0x2e>
 8011a9e:	bd70      	pop	{r4, r5, r6, pc}
 8011aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aa4:	4798      	blx	r3
 8011aa6:	3601      	adds	r6, #1
 8011aa8:	e7ee      	b.n	8011a88 <__libc_init_array+0xc>
 8011aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aae:	4798      	blx	r3
 8011ab0:	3601      	adds	r6, #1
 8011ab2:	e7f2      	b.n	8011a9a <__libc_init_array+0x1e>
 8011ab4:	080130ac 	.word	0x080130ac
 8011ab8:	080130ac 	.word	0x080130ac
 8011abc:	080130ac 	.word	0x080130ac
 8011ac0:	080130b0 	.word	0x080130b0

08011ac4 <__retarget_lock_init_recursive>:
 8011ac4:	4770      	bx	lr

08011ac6 <__retarget_lock_acquire_recursive>:
 8011ac6:	4770      	bx	lr

08011ac8 <__retarget_lock_release_recursive>:
 8011ac8:	4770      	bx	lr

08011aca <memcmp>:
 8011aca:	b530      	push	{r4, r5, lr}
 8011acc:	3901      	subs	r1, #1
 8011ace:	2400      	movs	r4, #0
 8011ad0:	42a2      	cmp	r2, r4
 8011ad2:	d101      	bne.n	8011ad8 <memcmp+0xe>
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	e005      	b.n	8011ae4 <memcmp+0x1a>
 8011ad8:	5d03      	ldrb	r3, [r0, r4]
 8011ada:	3401      	adds	r4, #1
 8011adc:	5d0d      	ldrb	r5, [r1, r4]
 8011ade:	42ab      	cmp	r3, r5
 8011ae0:	d0f6      	beq.n	8011ad0 <memcmp+0x6>
 8011ae2:	1b58      	subs	r0, r3, r5
 8011ae4:	bd30      	pop	{r4, r5, pc}

08011ae6 <memcpy>:
 8011ae6:	440a      	add	r2, r1
 8011ae8:	4291      	cmp	r1, r2
 8011aea:	f100 33ff 	add.w	r3, r0, #4294967295
 8011aee:	d100      	bne.n	8011af2 <memcpy+0xc>
 8011af0:	4770      	bx	lr
 8011af2:	b510      	push	{r4, lr}
 8011af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011afc:	4291      	cmp	r1, r2
 8011afe:	d1f9      	bne.n	8011af4 <memcpy+0xe>
 8011b00:	bd10      	pop	{r4, pc}

08011b02 <memmove>:
 8011b02:	4288      	cmp	r0, r1
 8011b04:	b510      	push	{r4, lr}
 8011b06:	eb01 0402 	add.w	r4, r1, r2
 8011b0a:	d902      	bls.n	8011b12 <memmove+0x10>
 8011b0c:	4284      	cmp	r4, r0
 8011b0e:	4623      	mov	r3, r4
 8011b10:	d807      	bhi.n	8011b22 <memmove+0x20>
 8011b12:	1e43      	subs	r3, r0, #1
 8011b14:	42a1      	cmp	r1, r4
 8011b16:	d008      	beq.n	8011b2a <memmove+0x28>
 8011b18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b20:	e7f8      	b.n	8011b14 <memmove+0x12>
 8011b22:	4402      	add	r2, r0
 8011b24:	4601      	mov	r1, r0
 8011b26:	428a      	cmp	r2, r1
 8011b28:	d100      	bne.n	8011b2c <memmove+0x2a>
 8011b2a:	bd10      	pop	{r4, pc}
 8011b2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b34:	e7f7      	b.n	8011b26 <memmove+0x24>

08011b36 <memset>:
 8011b36:	4402      	add	r2, r0
 8011b38:	4603      	mov	r3, r0
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d100      	bne.n	8011b40 <memset+0xa>
 8011b3e:	4770      	bx	lr
 8011b40:	f803 1b01 	strb.w	r1, [r3], #1
 8011b44:	e7f9      	b.n	8011b3a <memset+0x4>
	...

08011b48 <_malloc_r>:
 8011b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4a:	1ccd      	adds	r5, r1, #3
 8011b4c:	f025 0503 	bic.w	r5, r5, #3
 8011b50:	3508      	adds	r5, #8
 8011b52:	2d0c      	cmp	r5, #12
 8011b54:	bf38      	it	cc
 8011b56:	250c      	movcc	r5, #12
 8011b58:	2d00      	cmp	r5, #0
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	db01      	blt.n	8011b62 <_malloc_r+0x1a>
 8011b5e:	42a9      	cmp	r1, r5
 8011b60:	d903      	bls.n	8011b6a <_malloc_r+0x22>
 8011b62:	230c      	movs	r3, #12
 8011b64:	6033      	str	r3, [r6, #0]
 8011b66:	2000      	movs	r0, #0
 8011b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b6a:	f000 faa7 	bl	80120bc <__malloc_lock>
 8011b6e:	4921      	ldr	r1, [pc, #132]	; (8011bf4 <_malloc_r+0xac>)
 8011b70:	680a      	ldr	r2, [r1, #0]
 8011b72:	4614      	mov	r4, r2
 8011b74:	b99c      	cbnz	r4, 8011b9e <_malloc_r+0x56>
 8011b76:	4f20      	ldr	r7, [pc, #128]	; (8011bf8 <_malloc_r+0xb0>)
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	b923      	cbnz	r3, 8011b86 <_malloc_r+0x3e>
 8011b7c:	4621      	mov	r1, r4
 8011b7e:	4630      	mov	r0, r6
 8011b80:	f000 f8e6 	bl	8011d50 <_sbrk_r>
 8011b84:	6038      	str	r0, [r7, #0]
 8011b86:	4629      	mov	r1, r5
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f000 f8e1 	bl	8011d50 <_sbrk_r>
 8011b8e:	1c43      	adds	r3, r0, #1
 8011b90:	d123      	bne.n	8011bda <_malloc_r+0x92>
 8011b92:	230c      	movs	r3, #12
 8011b94:	6033      	str	r3, [r6, #0]
 8011b96:	4630      	mov	r0, r6
 8011b98:	f000 fa96 	bl	80120c8 <__malloc_unlock>
 8011b9c:	e7e3      	b.n	8011b66 <_malloc_r+0x1e>
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	1b5b      	subs	r3, r3, r5
 8011ba2:	d417      	bmi.n	8011bd4 <_malloc_r+0x8c>
 8011ba4:	2b0b      	cmp	r3, #11
 8011ba6:	d903      	bls.n	8011bb0 <_malloc_r+0x68>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	441c      	add	r4, r3
 8011bac:	6025      	str	r5, [r4, #0]
 8011bae:	e004      	b.n	8011bba <_malloc_r+0x72>
 8011bb0:	6863      	ldr	r3, [r4, #4]
 8011bb2:	42a2      	cmp	r2, r4
 8011bb4:	bf0c      	ite	eq
 8011bb6:	600b      	streq	r3, [r1, #0]
 8011bb8:	6053      	strne	r3, [r2, #4]
 8011bba:	4630      	mov	r0, r6
 8011bbc:	f000 fa84 	bl	80120c8 <__malloc_unlock>
 8011bc0:	f104 000b 	add.w	r0, r4, #11
 8011bc4:	1d23      	adds	r3, r4, #4
 8011bc6:	f020 0007 	bic.w	r0, r0, #7
 8011bca:	1ac2      	subs	r2, r0, r3
 8011bcc:	d0cc      	beq.n	8011b68 <_malloc_r+0x20>
 8011bce:	1a1b      	subs	r3, r3, r0
 8011bd0:	50a3      	str	r3, [r4, r2]
 8011bd2:	e7c9      	b.n	8011b68 <_malloc_r+0x20>
 8011bd4:	4622      	mov	r2, r4
 8011bd6:	6864      	ldr	r4, [r4, #4]
 8011bd8:	e7cc      	b.n	8011b74 <_malloc_r+0x2c>
 8011bda:	1cc4      	adds	r4, r0, #3
 8011bdc:	f024 0403 	bic.w	r4, r4, #3
 8011be0:	42a0      	cmp	r0, r4
 8011be2:	d0e3      	beq.n	8011bac <_malloc_r+0x64>
 8011be4:	1a21      	subs	r1, r4, r0
 8011be6:	4630      	mov	r0, r6
 8011be8:	f000 f8b2 	bl	8011d50 <_sbrk_r>
 8011bec:	3001      	adds	r0, #1
 8011bee:	d1dd      	bne.n	8011bac <_malloc_r+0x64>
 8011bf0:	e7cf      	b.n	8011b92 <_malloc_r+0x4a>
 8011bf2:	bf00      	nop
 8011bf4:	2400939c 	.word	0x2400939c
 8011bf8:	240093a0 	.word	0x240093a0

08011bfc <rand>:
 8011bfc:	4b17      	ldr	r3, [pc, #92]	; (8011c5c <rand+0x60>)
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	681c      	ldr	r4, [r3, #0]
 8011c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c04:	b9b3      	cbnz	r3, 8011c34 <rand+0x38>
 8011c06:	2018      	movs	r0, #24
 8011c08:	f000 fa50 	bl	80120ac <malloc>
 8011c0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8011c0e:	b928      	cbnz	r0, 8011c1c <rand+0x20>
 8011c10:	4602      	mov	r2, r0
 8011c12:	4b13      	ldr	r3, [pc, #76]	; (8011c60 <rand+0x64>)
 8011c14:	4813      	ldr	r0, [pc, #76]	; (8011c64 <rand+0x68>)
 8011c16:	214e      	movs	r1, #78	; 0x4e
 8011c18:	f000 f934 	bl	8011e84 <__assert_func>
 8011c1c:	4a12      	ldr	r2, [pc, #72]	; (8011c68 <rand+0x6c>)
 8011c1e:	4b13      	ldr	r3, [pc, #76]	; (8011c6c <rand+0x70>)
 8011c20:	e9c0 2300 	strd	r2, r3, [r0]
 8011c24:	4b12      	ldr	r3, [pc, #72]	; (8011c70 <rand+0x74>)
 8011c26:	6083      	str	r3, [r0, #8]
 8011c28:	230b      	movs	r3, #11
 8011c2a:	8183      	strh	r3, [r0, #12]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	2300      	movs	r3, #0
 8011c30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011c34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c36:	480f      	ldr	r0, [pc, #60]	; (8011c74 <rand+0x78>)
 8011c38:	690a      	ldr	r2, [r1, #16]
 8011c3a:	694b      	ldr	r3, [r1, #20]
 8011c3c:	4c0e      	ldr	r4, [pc, #56]	; (8011c78 <rand+0x7c>)
 8011c3e:	4350      	muls	r0, r2
 8011c40:	fb04 0003 	mla	r0, r4, r3, r0
 8011c44:	fba2 3404 	umull	r3, r4, r2, r4
 8011c48:	1c5a      	adds	r2, r3, #1
 8011c4a:	4404      	add	r4, r0
 8011c4c:	f144 0000 	adc.w	r0, r4, #0
 8011c50:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8011c54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	bf00      	nop
 8011c5c:	24000038 	.word	0x24000038
 8011c60:	08012fc4 	.word	0x08012fc4
 8011c64:	08012fdb 	.word	0x08012fdb
 8011c68:	abcd330e 	.word	0xabcd330e
 8011c6c:	e66d1234 	.word	0xe66d1234
 8011c70:	0005deec 	.word	0x0005deec
 8011c74:	5851f42d 	.word	0x5851f42d
 8011c78:	4c957f2d 	.word	0x4c957f2d

08011c7c <cleanup_glue>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	460c      	mov	r4, r1
 8011c80:	6809      	ldr	r1, [r1, #0]
 8011c82:	4605      	mov	r5, r0
 8011c84:	b109      	cbz	r1, 8011c8a <cleanup_glue+0xe>
 8011c86:	f7ff fff9 	bl	8011c7c <cleanup_glue>
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c92:	f000 ba1f 	b.w	80120d4 <_free_r>
	...

08011c98 <_reclaim_reent>:
 8011c98:	4b2c      	ldr	r3, [pc, #176]	; (8011d4c <_reclaim_reent+0xb4>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4283      	cmp	r3, r0
 8011c9e:	b570      	push	{r4, r5, r6, lr}
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	d051      	beq.n	8011d48 <_reclaim_reent+0xb0>
 8011ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ca6:	b143      	cbz	r3, 8011cba <_reclaim_reent+0x22>
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d14a      	bne.n	8011d44 <_reclaim_reent+0xac>
 8011cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cb0:	6819      	ldr	r1, [r3, #0]
 8011cb2:	b111      	cbz	r1, 8011cba <_reclaim_reent+0x22>
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f000 fa0d 	bl	80120d4 <_free_r>
 8011cba:	6961      	ldr	r1, [r4, #20]
 8011cbc:	b111      	cbz	r1, 8011cc4 <_reclaim_reent+0x2c>
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f000 fa08 	bl	80120d4 <_free_r>
 8011cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011cc6:	b111      	cbz	r1, 8011cce <_reclaim_reent+0x36>
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f000 fa03 	bl	80120d4 <_free_r>
 8011cce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011cd0:	b111      	cbz	r1, 8011cd8 <_reclaim_reent+0x40>
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f000 f9fe 	bl	80120d4 <_free_r>
 8011cd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011cda:	b111      	cbz	r1, 8011ce2 <_reclaim_reent+0x4a>
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 f9f9 	bl	80120d4 <_free_r>
 8011ce2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011ce4:	b111      	cbz	r1, 8011cec <_reclaim_reent+0x54>
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 f9f4 	bl	80120d4 <_free_r>
 8011cec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011cee:	b111      	cbz	r1, 8011cf6 <_reclaim_reent+0x5e>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f000 f9ef 	bl	80120d4 <_free_r>
 8011cf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011cf8:	b111      	cbz	r1, 8011d00 <_reclaim_reent+0x68>
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f000 f9ea 	bl	80120d4 <_free_r>
 8011d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d02:	b111      	cbz	r1, 8011d0a <_reclaim_reent+0x72>
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 f9e5 	bl	80120d4 <_free_r>
 8011d0a:	69a3      	ldr	r3, [r4, #24]
 8011d0c:	b1e3      	cbz	r3, 8011d48 <_reclaim_reent+0xb0>
 8011d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d10:	4620      	mov	r0, r4
 8011d12:	4798      	blx	r3
 8011d14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d16:	b1b9      	cbz	r1, 8011d48 <_reclaim_reent+0xb0>
 8011d18:	4620      	mov	r0, r4
 8011d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d1e:	f7ff bfad 	b.w	8011c7c <cleanup_glue>
 8011d22:	5949      	ldr	r1, [r1, r5]
 8011d24:	b941      	cbnz	r1, 8011d38 <_reclaim_reent+0xa0>
 8011d26:	3504      	adds	r5, #4
 8011d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d2a:	2d80      	cmp	r5, #128	; 0x80
 8011d2c:	68d9      	ldr	r1, [r3, #12]
 8011d2e:	d1f8      	bne.n	8011d22 <_reclaim_reent+0x8a>
 8011d30:	4620      	mov	r0, r4
 8011d32:	f000 f9cf 	bl	80120d4 <_free_r>
 8011d36:	e7ba      	b.n	8011cae <_reclaim_reent+0x16>
 8011d38:	680e      	ldr	r6, [r1, #0]
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f000 f9ca 	bl	80120d4 <_free_r>
 8011d40:	4631      	mov	r1, r6
 8011d42:	e7ef      	b.n	8011d24 <_reclaim_reent+0x8c>
 8011d44:	2500      	movs	r5, #0
 8011d46:	e7ef      	b.n	8011d28 <_reclaim_reent+0x90>
 8011d48:	bd70      	pop	{r4, r5, r6, pc}
 8011d4a:	bf00      	nop
 8011d4c:	24000038 	.word	0x24000038

08011d50 <_sbrk_r>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	4d06      	ldr	r5, [pc, #24]	; (8011d6c <_sbrk_r+0x1c>)
 8011d54:	2300      	movs	r3, #0
 8011d56:	4604      	mov	r4, r0
 8011d58:	4608      	mov	r0, r1
 8011d5a:	602b      	str	r3, [r5, #0]
 8011d5c:	f7ef f830 	bl	8000dc0 <_sbrk>
 8011d60:	1c43      	adds	r3, r0, #1
 8011d62:	d102      	bne.n	8011d6a <_sbrk_r+0x1a>
 8011d64:	682b      	ldr	r3, [r5, #0]
 8011d66:	b103      	cbz	r3, 8011d6a <_sbrk_r+0x1a>
 8011d68:	6023      	str	r3, [r4, #0]
 8011d6a:	bd38      	pop	{r3, r4, r5, pc}
 8011d6c:	24009528 	.word	0x24009528

08011d70 <sniprintf>:
 8011d70:	b40c      	push	{r2, r3}
 8011d72:	b530      	push	{r4, r5, lr}
 8011d74:	4b17      	ldr	r3, [pc, #92]	; (8011dd4 <sniprintf+0x64>)
 8011d76:	1e0c      	subs	r4, r1, #0
 8011d78:	681d      	ldr	r5, [r3, #0]
 8011d7a:	b09d      	sub	sp, #116	; 0x74
 8011d7c:	da08      	bge.n	8011d90 <sniprintf+0x20>
 8011d7e:	238b      	movs	r3, #139	; 0x8b
 8011d80:	602b      	str	r3, [r5, #0]
 8011d82:	f04f 30ff 	mov.w	r0, #4294967295
 8011d86:	b01d      	add	sp, #116	; 0x74
 8011d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d8c:	b002      	add	sp, #8
 8011d8e:	4770      	bx	lr
 8011d90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011d94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011d98:	bf14      	ite	ne
 8011d9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d9e:	4623      	moveq	r3, r4
 8011da0:	9304      	str	r3, [sp, #16]
 8011da2:	9307      	str	r3, [sp, #28]
 8011da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011da8:	9002      	str	r0, [sp, #8]
 8011daa:	9006      	str	r0, [sp, #24]
 8011dac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011db0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011db2:	ab21      	add	r3, sp, #132	; 0x84
 8011db4:	a902      	add	r1, sp, #8
 8011db6:	4628      	mov	r0, r5
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	f000 fa37 	bl	801222c <_svfiprintf_r>
 8011dbe:	1c43      	adds	r3, r0, #1
 8011dc0:	bfbc      	itt	lt
 8011dc2:	238b      	movlt	r3, #139	; 0x8b
 8011dc4:	602b      	strlt	r3, [r5, #0]
 8011dc6:	2c00      	cmp	r4, #0
 8011dc8:	d0dd      	beq.n	8011d86 <sniprintf+0x16>
 8011dca:	9b02      	ldr	r3, [sp, #8]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]
 8011dd0:	e7d9      	b.n	8011d86 <sniprintf+0x16>
 8011dd2:	bf00      	nop
 8011dd4:	24000038 	.word	0x24000038

08011dd8 <__sread>:
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	460c      	mov	r4, r1
 8011ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011de0:	f000 fe12 	bl	8012a08 <_read_r>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	bfab      	itete	ge
 8011de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011dea:	89a3      	ldrhlt	r3, [r4, #12]
 8011dec:	181b      	addge	r3, r3, r0
 8011dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011df2:	bfac      	ite	ge
 8011df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011df6:	81a3      	strhlt	r3, [r4, #12]
 8011df8:	bd10      	pop	{r4, pc}

08011dfa <__swrite>:
 8011dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfe:	461f      	mov	r7, r3
 8011e00:	898b      	ldrh	r3, [r1, #12]
 8011e02:	05db      	lsls	r3, r3, #23
 8011e04:	4605      	mov	r5, r0
 8011e06:	460c      	mov	r4, r1
 8011e08:	4616      	mov	r6, r2
 8011e0a:	d505      	bpl.n	8011e18 <__swrite+0x1e>
 8011e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e10:	2302      	movs	r3, #2
 8011e12:	2200      	movs	r2, #0
 8011e14:	f000 f938 	bl	8012088 <_lseek_r>
 8011e18:	89a3      	ldrh	r3, [r4, #12]
 8011e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e22:	81a3      	strh	r3, [r4, #12]
 8011e24:	4632      	mov	r2, r6
 8011e26:	463b      	mov	r3, r7
 8011e28:	4628      	mov	r0, r5
 8011e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2e:	f000 b817 	b.w	8011e60 <_write_r>

08011e32 <__sseek>:
 8011e32:	b510      	push	{r4, lr}
 8011e34:	460c      	mov	r4, r1
 8011e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e3a:	f000 f925 	bl	8012088 <_lseek_r>
 8011e3e:	1c43      	adds	r3, r0, #1
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	bf15      	itete	ne
 8011e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e4e:	81a3      	strheq	r3, [r4, #12]
 8011e50:	bf18      	it	ne
 8011e52:	81a3      	strhne	r3, [r4, #12]
 8011e54:	bd10      	pop	{r4, pc}

08011e56 <__sclose>:
 8011e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e5a:	f000 b831 	b.w	8011ec0 <_close_r>
	...

08011e60 <_write_r>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4d07      	ldr	r5, [pc, #28]	; (8011e80 <_write_r+0x20>)
 8011e64:	4604      	mov	r4, r0
 8011e66:	4608      	mov	r0, r1
 8011e68:	4611      	mov	r1, r2
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	602a      	str	r2, [r5, #0]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	f7ee ff55 	bl	8000d1e <_write>
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	d102      	bne.n	8011e7e <_write_r+0x1e>
 8011e78:	682b      	ldr	r3, [r5, #0]
 8011e7a:	b103      	cbz	r3, 8011e7e <_write_r+0x1e>
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	24009528 	.word	0x24009528

08011e84 <__assert_func>:
 8011e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e86:	4614      	mov	r4, r2
 8011e88:	461a      	mov	r2, r3
 8011e8a:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <__assert_func+0x2c>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4605      	mov	r5, r0
 8011e90:	68d8      	ldr	r0, [r3, #12]
 8011e92:	b14c      	cbz	r4, 8011ea8 <__assert_func+0x24>
 8011e94:	4b07      	ldr	r3, [pc, #28]	; (8011eb4 <__assert_func+0x30>)
 8011e96:	9100      	str	r1, [sp, #0]
 8011e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e9c:	4906      	ldr	r1, [pc, #24]	; (8011eb8 <__assert_func+0x34>)
 8011e9e:	462b      	mov	r3, r5
 8011ea0:	f000 f8e0 	bl	8012064 <fiprintf>
 8011ea4:	f000 fe82 	bl	8012bac <abort>
 8011ea8:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <__assert_func+0x38>)
 8011eaa:	461c      	mov	r4, r3
 8011eac:	e7f3      	b.n	8011e96 <__assert_func+0x12>
 8011eae:	bf00      	nop
 8011eb0:	24000038 	.word	0x24000038
 8011eb4:	0801303a 	.word	0x0801303a
 8011eb8:	08013047 	.word	0x08013047
 8011ebc:	08013075 	.word	0x08013075

08011ec0 <_close_r>:
 8011ec0:	b538      	push	{r3, r4, r5, lr}
 8011ec2:	4d06      	ldr	r5, [pc, #24]	; (8011edc <_close_r+0x1c>)
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	4608      	mov	r0, r1
 8011eca:	602b      	str	r3, [r5, #0]
 8011ecc:	f7ee ff43 	bl	8000d56 <_close>
 8011ed0:	1c43      	adds	r3, r0, #1
 8011ed2:	d102      	bne.n	8011eda <_close_r+0x1a>
 8011ed4:	682b      	ldr	r3, [r5, #0]
 8011ed6:	b103      	cbz	r3, 8011eda <_close_r+0x1a>
 8011ed8:	6023      	str	r3, [r4, #0]
 8011eda:	bd38      	pop	{r3, r4, r5, pc}
 8011edc:	24009528 	.word	0x24009528

08011ee0 <__sflush_r>:
 8011ee0:	898a      	ldrh	r2, [r1, #12]
 8011ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	0710      	lsls	r0, r2, #28
 8011eea:	460c      	mov	r4, r1
 8011eec:	d458      	bmi.n	8011fa0 <__sflush_r+0xc0>
 8011eee:	684b      	ldr	r3, [r1, #4]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	dc05      	bgt.n	8011f00 <__sflush_r+0x20>
 8011ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	dc02      	bgt.n	8011f00 <__sflush_r+0x20>
 8011efa:	2000      	movs	r0, #0
 8011efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f02:	2e00      	cmp	r6, #0
 8011f04:	d0f9      	beq.n	8011efa <__sflush_r+0x1a>
 8011f06:	2300      	movs	r3, #0
 8011f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f0c:	682f      	ldr	r7, [r5, #0]
 8011f0e:	602b      	str	r3, [r5, #0]
 8011f10:	d032      	beq.n	8011f78 <__sflush_r+0x98>
 8011f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	075a      	lsls	r2, r3, #29
 8011f18:	d505      	bpl.n	8011f26 <__sflush_r+0x46>
 8011f1a:	6863      	ldr	r3, [r4, #4]
 8011f1c:	1ac0      	subs	r0, r0, r3
 8011f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f20:	b10b      	cbz	r3, 8011f26 <__sflush_r+0x46>
 8011f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f24:	1ac0      	subs	r0, r0, r3
 8011f26:	2300      	movs	r3, #0
 8011f28:	4602      	mov	r2, r0
 8011f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f2c:	6a21      	ldr	r1, [r4, #32]
 8011f2e:	4628      	mov	r0, r5
 8011f30:	47b0      	blx	r6
 8011f32:	1c43      	adds	r3, r0, #1
 8011f34:	89a3      	ldrh	r3, [r4, #12]
 8011f36:	d106      	bne.n	8011f46 <__sflush_r+0x66>
 8011f38:	6829      	ldr	r1, [r5, #0]
 8011f3a:	291d      	cmp	r1, #29
 8011f3c:	d82c      	bhi.n	8011f98 <__sflush_r+0xb8>
 8011f3e:	4a2a      	ldr	r2, [pc, #168]	; (8011fe8 <__sflush_r+0x108>)
 8011f40:	40ca      	lsrs	r2, r1
 8011f42:	07d6      	lsls	r6, r2, #31
 8011f44:	d528      	bpl.n	8011f98 <__sflush_r+0xb8>
 8011f46:	2200      	movs	r2, #0
 8011f48:	6062      	str	r2, [r4, #4]
 8011f4a:	04d9      	lsls	r1, r3, #19
 8011f4c:	6922      	ldr	r2, [r4, #16]
 8011f4e:	6022      	str	r2, [r4, #0]
 8011f50:	d504      	bpl.n	8011f5c <__sflush_r+0x7c>
 8011f52:	1c42      	adds	r2, r0, #1
 8011f54:	d101      	bne.n	8011f5a <__sflush_r+0x7a>
 8011f56:	682b      	ldr	r3, [r5, #0]
 8011f58:	b903      	cbnz	r3, 8011f5c <__sflush_r+0x7c>
 8011f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8011f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f5e:	602f      	str	r7, [r5, #0]
 8011f60:	2900      	cmp	r1, #0
 8011f62:	d0ca      	beq.n	8011efa <__sflush_r+0x1a>
 8011f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f68:	4299      	cmp	r1, r3
 8011f6a:	d002      	beq.n	8011f72 <__sflush_r+0x92>
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f000 f8b1 	bl	80120d4 <_free_r>
 8011f72:	2000      	movs	r0, #0
 8011f74:	6360      	str	r0, [r4, #52]	; 0x34
 8011f76:	e7c1      	b.n	8011efc <__sflush_r+0x1c>
 8011f78:	6a21      	ldr	r1, [r4, #32]
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	47b0      	blx	r6
 8011f80:	1c41      	adds	r1, r0, #1
 8011f82:	d1c7      	bne.n	8011f14 <__sflush_r+0x34>
 8011f84:	682b      	ldr	r3, [r5, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d0c4      	beq.n	8011f14 <__sflush_r+0x34>
 8011f8a:	2b1d      	cmp	r3, #29
 8011f8c:	d001      	beq.n	8011f92 <__sflush_r+0xb2>
 8011f8e:	2b16      	cmp	r3, #22
 8011f90:	d101      	bne.n	8011f96 <__sflush_r+0xb6>
 8011f92:	602f      	str	r7, [r5, #0]
 8011f94:	e7b1      	b.n	8011efa <__sflush_r+0x1a>
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f9c:	81a3      	strh	r3, [r4, #12]
 8011f9e:	e7ad      	b.n	8011efc <__sflush_r+0x1c>
 8011fa0:	690f      	ldr	r7, [r1, #16]
 8011fa2:	2f00      	cmp	r7, #0
 8011fa4:	d0a9      	beq.n	8011efa <__sflush_r+0x1a>
 8011fa6:	0793      	lsls	r3, r2, #30
 8011fa8:	680e      	ldr	r6, [r1, #0]
 8011faa:	bf08      	it	eq
 8011fac:	694b      	ldreq	r3, [r1, #20]
 8011fae:	600f      	str	r7, [r1, #0]
 8011fb0:	bf18      	it	ne
 8011fb2:	2300      	movne	r3, #0
 8011fb4:	eba6 0807 	sub.w	r8, r6, r7
 8011fb8:	608b      	str	r3, [r1, #8]
 8011fba:	f1b8 0f00 	cmp.w	r8, #0
 8011fbe:	dd9c      	ble.n	8011efa <__sflush_r+0x1a>
 8011fc0:	6a21      	ldr	r1, [r4, #32]
 8011fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fc4:	4643      	mov	r3, r8
 8011fc6:	463a      	mov	r2, r7
 8011fc8:	4628      	mov	r0, r5
 8011fca:	47b0      	blx	r6
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	dc06      	bgt.n	8011fde <__sflush_r+0xfe>
 8011fd0:	89a3      	ldrh	r3, [r4, #12]
 8011fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fd6:	81a3      	strh	r3, [r4, #12]
 8011fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fdc:	e78e      	b.n	8011efc <__sflush_r+0x1c>
 8011fde:	4407      	add	r7, r0
 8011fe0:	eba8 0800 	sub.w	r8, r8, r0
 8011fe4:	e7e9      	b.n	8011fba <__sflush_r+0xda>
 8011fe6:	bf00      	nop
 8011fe8:	20400001 	.word	0x20400001

08011fec <_fflush_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	690b      	ldr	r3, [r1, #16]
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	460c      	mov	r4, r1
 8011ff4:	b913      	cbnz	r3, 8011ffc <_fflush_r+0x10>
 8011ff6:	2500      	movs	r5, #0
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	bd38      	pop	{r3, r4, r5, pc}
 8011ffc:	b118      	cbz	r0, 8012006 <_fflush_r+0x1a>
 8011ffe:	6983      	ldr	r3, [r0, #24]
 8012000:	b90b      	cbnz	r3, 8012006 <_fflush_r+0x1a>
 8012002:	f7ff fc9d 	bl	8011940 <__sinit>
 8012006:	4b14      	ldr	r3, [pc, #80]	; (8012058 <_fflush_r+0x6c>)
 8012008:	429c      	cmp	r4, r3
 801200a:	d11b      	bne.n	8012044 <_fflush_r+0x58>
 801200c:	686c      	ldr	r4, [r5, #4]
 801200e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d0ef      	beq.n	8011ff6 <_fflush_r+0xa>
 8012016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012018:	07d0      	lsls	r0, r2, #31
 801201a:	d404      	bmi.n	8012026 <_fflush_r+0x3a>
 801201c:	0599      	lsls	r1, r3, #22
 801201e:	d402      	bmi.n	8012026 <_fflush_r+0x3a>
 8012020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012022:	f7ff fd50 	bl	8011ac6 <__retarget_lock_acquire_recursive>
 8012026:	4628      	mov	r0, r5
 8012028:	4621      	mov	r1, r4
 801202a:	f7ff ff59 	bl	8011ee0 <__sflush_r>
 801202e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012030:	07da      	lsls	r2, r3, #31
 8012032:	4605      	mov	r5, r0
 8012034:	d4e0      	bmi.n	8011ff8 <_fflush_r+0xc>
 8012036:	89a3      	ldrh	r3, [r4, #12]
 8012038:	059b      	lsls	r3, r3, #22
 801203a:	d4dd      	bmi.n	8011ff8 <_fflush_r+0xc>
 801203c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801203e:	f7ff fd43 	bl	8011ac8 <__retarget_lock_release_recursive>
 8012042:	e7d9      	b.n	8011ff8 <_fflush_r+0xc>
 8012044:	4b05      	ldr	r3, [pc, #20]	; (801205c <_fflush_r+0x70>)
 8012046:	429c      	cmp	r4, r3
 8012048:	d101      	bne.n	801204e <_fflush_r+0x62>
 801204a:	68ac      	ldr	r4, [r5, #8]
 801204c:	e7df      	b.n	801200e <_fflush_r+0x22>
 801204e:	4b04      	ldr	r3, [pc, #16]	; (8012060 <_fflush_r+0x74>)
 8012050:	429c      	cmp	r4, r3
 8012052:	bf08      	it	eq
 8012054:	68ec      	ldreq	r4, [r5, #12]
 8012056:	e7da      	b.n	801200e <_fflush_r+0x22>
 8012058:	08012f80 	.word	0x08012f80
 801205c:	08012fa0 	.word	0x08012fa0
 8012060:	08012f60 	.word	0x08012f60

08012064 <fiprintf>:
 8012064:	b40e      	push	{r1, r2, r3}
 8012066:	b503      	push	{r0, r1, lr}
 8012068:	4601      	mov	r1, r0
 801206a:	ab03      	add	r3, sp, #12
 801206c:	4805      	ldr	r0, [pc, #20]	; (8012084 <fiprintf+0x20>)
 801206e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012072:	6800      	ldr	r0, [r0, #0]
 8012074:	9301      	str	r3, [sp, #4]
 8012076:	f000 fa03 	bl	8012480 <_vfiprintf_r>
 801207a:	b002      	add	sp, #8
 801207c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012080:	b003      	add	sp, #12
 8012082:	4770      	bx	lr
 8012084:	24000038 	.word	0x24000038

08012088 <_lseek_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4d07      	ldr	r5, [pc, #28]	; (80120a8 <_lseek_r+0x20>)
 801208c:	4604      	mov	r4, r0
 801208e:	4608      	mov	r0, r1
 8012090:	4611      	mov	r1, r2
 8012092:	2200      	movs	r2, #0
 8012094:	602a      	str	r2, [r5, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	f7ee fe84 	bl	8000da4 <_lseek>
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d102      	bne.n	80120a6 <_lseek_r+0x1e>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	b103      	cbz	r3, 80120a6 <_lseek_r+0x1e>
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	bd38      	pop	{r3, r4, r5, pc}
 80120a8:	24009528 	.word	0x24009528

080120ac <malloc>:
 80120ac:	4b02      	ldr	r3, [pc, #8]	; (80120b8 <malloc+0xc>)
 80120ae:	4601      	mov	r1, r0
 80120b0:	6818      	ldr	r0, [r3, #0]
 80120b2:	f7ff bd49 	b.w	8011b48 <_malloc_r>
 80120b6:	bf00      	nop
 80120b8:	24000038 	.word	0x24000038

080120bc <__malloc_lock>:
 80120bc:	4801      	ldr	r0, [pc, #4]	; (80120c4 <__malloc_lock+0x8>)
 80120be:	f7ff bd02 	b.w	8011ac6 <__retarget_lock_acquire_recursive>
 80120c2:	bf00      	nop
 80120c4:	24009520 	.word	0x24009520

080120c8 <__malloc_unlock>:
 80120c8:	4801      	ldr	r0, [pc, #4]	; (80120d0 <__malloc_unlock+0x8>)
 80120ca:	f7ff bcfd 	b.w	8011ac8 <__retarget_lock_release_recursive>
 80120ce:	bf00      	nop
 80120d0:	24009520 	.word	0x24009520

080120d4 <_free_r>:
 80120d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120d6:	2900      	cmp	r1, #0
 80120d8:	d048      	beq.n	801216c <_free_r+0x98>
 80120da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120de:	9001      	str	r0, [sp, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	f1a1 0404 	sub.w	r4, r1, #4
 80120e6:	bfb8      	it	lt
 80120e8:	18e4      	addlt	r4, r4, r3
 80120ea:	f7ff ffe7 	bl	80120bc <__malloc_lock>
 80120ee:	4a20      	ldr	r2, [pc, #128]	; (8012170 <_free_r+0x9c>)
 80120f0:	9801      	ldr	r0, [sp, #4]
 80120f2:	6813      	ldr	r3, [r2, #0]
 80120f4:	4615      	mov	r5, r2
 80120f6:	b933      	cbnz	r3, 8012106 <_free_r+0x32>
 80120f8:	6063      	str	r3, [r4, #4]
 80120fa:	6014      	str	r4, [r2, #0]
 80120fc:	b003      	add	sp, #12
 80120fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012102:	f7ff bfe1 	b.w	80120c8 <__malloc_unlock>
 8012106:	42a3      	cmp	r3, r4
 8012108:	d90b      	bls.n	8012122 <_free_r+0x4e>
 801210a:	6821      	ldr	r1, [r4, #0]
 801210c:	1862      	adds	r2, r4, r1
 801210e:	4293      	cmp	r3, r2
 8012110:	bf04      	itt	eq
 8012112:	681a      	ldreq	r2, [r3, #0]
 8012114:	685b      	ldreq	r3, [r3, #4]
 8012116:	6063      	str	r3, [r4, #4]
 8012118:	bf04      	itt	eq
 801211a:	1852      	addeq	r2, r2, r1
 801211c:	6022      	streq	r2, [r4, #0]
 801211e:	602c      	str	r4, [r5, #0]
 8012120:	e7ec      	b.n	80120fc <_free_r+0x28>
 8012122:	461a      	mov	r2, r3
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	b10b      	cbz	r3, 801212c <_free_r+0x58>
 8012128:	42a3      	cmp	r3, r4
 801212a:	d9fa      	bls.n	8012122 <_free_r+0x4e>
 801212c:	6811      	ldr	r1, [r2, #0]
 801212e:	1855      	adds	r5, r2, r1
 8012130:	42a5      	cmp	r5, r4
 8012132:	d10b      	bne.n	801214c <_free_r+0x78>
 8012134:	6824      	ldr	r4, [r4, #0]
 8012136:	4421      	add	r1, r4
 8012138:	1854      	adds	r4, r2, r1
 801213a:	42a3      	cmp	r3, r4
 801213c:	6011      	str	r1, [r2, #0]
 801213e:	d1dd      	bne.n	80120fc <_free_r+0x28>
 8012140:	681c      	ldr	r4, [r3, #0]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	6053      	str	r3, [r2, #4]
 8012146:	4421      	add	r1, r4
 8012148:	6011      	str	r1, [r2, #0]
 801214a:	e7d7      	b.n	80120fc <_free_r+0x28>
 801214c:	d902      	bls.n	8012154 <_free_r+0x80>
 801214e:	230c      	movs	r3, #12
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	e7d3      	b.n	80120fc <_free_r+0x28>
 8012154:	6825      	ldr	r5, [r4, #0]
 8012156:	1961      	adds	r1, r4, r5
 8012158:	428b      	cmp	r3, r1
 801215a:	bf04      	itt	eq
 801215c:	6819      	ldreq	r1, [r3, #0]
 801215e:	685b      	ldreq	r3, [r3, #4]
 8012160:	6063      	str	r3, [r4, #4]
 8012162:	bf04      	itt	eq
 8012164:	1949      	addeq	r1, r1, r5
 8012166:	6021      	streq	r1, [r4, #0]
 8012168:	6054      	str	r4, [r2, #4]
 801216a:	e7c7      	b.n	80120fc <_free_r+0x28>
 801216c:	b003      	add	sp, #12
 801216e:	bd30      	pop	{r4, r5, pc}
 8012170:	2400939c 	.word	0x2400939c

08012174 <__ssputs_r>:
 8012174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012178:	688e      	ldr	r6, [r1, #8]
 801217a:	429e      	cmp	r6, r3
 801217c:	4682      	mov	sl, r0
 801217e:	460c      	mov	r4, r1
 8012180:	4690      	mov	r8, r2
 8012182:	461f      	mov	r7, r3
 8012184:	d838      	bhi.n	80121f8 <__ssputs_r+0x84>
 8012186:	898a      	ldrh	r2, [r1, #12]
 8012188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801218c:	d032      	beq.n	80121f4 <__ssputs_r+0x80>
 801218e:	6825      	ldr	r5, [r4, #0]
 8012190:	6909      	ldr	r1, [r1, #16]
 8012192:	eba5 0901 	sub.w	r9, r5, r1
 8012196:	6965      	ldr	r5, [r4, #20]
 8012198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801219c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121a0:	3301      	adds	r3, #1
 80121a2:	444b      	add	r3, r9
 80121a4:	106d      	asrs	r5, r5, #1
 80121a6:	429d      	cmp	r5, r3
 80121a8:	bf38      	it	cc
 80121aa:	461d      	movcc	r5, r3
 80121ac:	0553      	lsls	r3, r2, #21
 80121ae:	d531      	bpl.n	8012214 <__ssputs_r+0xa0>
 80121b0:	4629      	mov	r1, r5
 80121b2:	f7ff fcc9 	bl	8011b48 <_malloc_r>
 80121b6:	4606      	mov	r6, r0
 80121b8:	b950      	cbnz	r0, 80121d0 <__ssputs_r+0x5c>
 80121ba:	230c      	movs	r3, #12
 80121bc:	f8ca 3000 	str.w	r3, [sl]
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c6:	81a3      	strh	r3, [r4, #12]
 80121c8:	f04f 30ff 	mov.w	r0, #4294967295
 80121cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121d0:	6921      	ldr	r1, [r4, #16]
 80121d2:	464a      	mov	r2, r9
 80121d4:	f7ff fc87 	bl	8011ae6 <memcpy>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	6126      	str	r6, [r4, #16]
 80121e6:	6165      	str	r5, [r4, #20]
 80121e8:	444e      	add	r6, r9
 80121ea:	eba5 0509 	sub.w	r5, r5, r9
 80121ee:	6026      	str	r6, [r4, #0]
 80121f0:	60a5      	str	r5, [r4, #8]
 80121f2:	463e      	mov	r6, r7
 80121f4:	42be      	cmp	r6, r7
 80121f6:	d900      	bls.n	80121fa <__ssputs_r+0x86>
 80121f8:	463e      	mov	r6, r7
 80121fa:	4632      	mov	r2, r6
 80121fc:	6820      	ldr	r0, [r4, #0]
 80121fe:	4641      	mov	r1, r8
 8012200:	f7ff fc7f 	bl	8011b02 <memmove>
 8012204:	68a3      	ldr	r3, [r4, #8]
 8012206:	6822      	ldr	r2, [r4, #0]
 8012208:	1b9b      	subs	r3, r3, r6
 801220a:	4432      	add	r2, r6
 801220c:	60a3      	str	r3, [r4, #8]
 801220e:	6022      	str	r2, [r4, #0]
 8012210:	2000      	movs	r0, #0
 8012212:	e7db      	b.n	80121cc <__ssputs_r+0x58>
 8012214:	462a      	mov	r2, r5
 8012216:	f000 fd35 	bl	8012c84 <_realloc_r>
 801221a:	4606      	mov	r6, r0
 801221c:	2800      	cmp	r0, #0
 801221e:	d1e1      	bne.n	80121e4 <__ssputs_r+0x70>
 8012220:	6921      	ldr	r1, [r4, #16]
 8012222:	4650      	mov	r0, sl
 8012224:	f7ff ff56 	bl	80120d4 <_free_r>
 8012228:	e7c7      	b.n	80121ba <__ssputs_r+0x46>
	...

0801222c <_svfiprintf_r>:
 801222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012230:	4698      	mov	r8, r3
 8012232:	898b      	ldrh	r3, [r1, #12]
 8012234:	061b      	lsls	r3, r3, #24
 8012236:	b09d      	sub	sp, #116	; 0x74
 8012238:	4607      	mov	r7, r0
 801223a:	460d      	mov	r5, r1
 801223c:	4614      	mov	r4, r2
 801223e:	d50e      	bpl.n	801225e <_svfiprintf_r+0x32>
 8012240:	690b      	ldr	r3, [r1, #16]
 8012242:	b963      	cbnz	r3, 801225e <_svfiprintf_r+0x32>
 8012244:	2140      	movs	r1, #64	; 0x40
 8012246:	f7ff fc7f 	bl	8011b48 <_malloc_r>
 801224a:	6028      	str	r0, [r5, #0]
 801224c:	6128      	str	r0, [r5, #16]
 801224e:	b920      	cbnz	r0, 801225a <_svfiprintf_r+0x2e>
 8012250:	230c      	movs	r3, #12
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	f04f 30ff 	mov.w	r0, #4294967295
 8012258:	e0d1      	b.n	80123fe <_svfiprintf_r+0x1d2>
 801225a:	2340      	movs	r3, #64	; 0x40
 801225c:	616b      	str	r3, [r5, #20]
 801225e:	2300      	movs	r3, #0
 8012260:	9309      	str	r3, [sp, #36]	; 0x24
 8012262:	2320      	movs	r3, #32
 8012264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012268:	f8cd 800c 	str.w	r8, [sp, #12]
 801226c:	2330      	movs	r3, #48	; 0x30
 801226e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012418 <_svfiprintf_r+0x1ec>
 8012272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012276:	f04f 0901 	mov.w	r9, #1
 801227a:	4623      	mov	r3, r4
 801227c:	469a      	mov	sl, r3
 801227e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012282:	b10a      	cbz	r2, 8012288 <_svfiprintf_r+0x5c>
 8012284:	2a25      	cmp	r2, #37	; 0x25
 8012286:	d1f9      	bne.n	801227c <_svfiprintf_r+0x50>
 8012288:	ebba 0b04 	subs.w	fp, sl, r4
 801228c:	d00b      	beq.n	80122a6 <_svfiprintf_r+0x7a>
 801228e:	465b      	mov	r3, fp
 8012290:	4622      	mov	r2, r4
 8012292:	4629      	mov	r1, r5
 8012294:	4638      	mov	r0, r7
 8012296:	f7ff ff6d 	bl	8012174 <__ssputs_r>
 801229a:	3001      	adds	r0, #1
 801229c:	f000 80aa 	beq.w	80123f4 <_svfiprintf_r+0x1c8>
 80122a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122a2:	445a      	add	r2, fp
 80122a4:	9209      	str	r2, [sp, #36]	; 0x24
 80122a6:	f89a 3000 	ldrb.w	r3, [sl]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f000 80a2 	beq.w	80123f4 <_svfiprintf_r+0x1c8>
 80122b0:	2300      	movs	r3, #0
 80122b2:	f04f 32ff 	mov.w	r2, #4294967295
 80122b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122ba:	f10a 0a01 	add.w	sl, sl, #1
 80122be:	9304      	str	r3, [sp, #16]
 80122c0:	9307      	str	r3, [sp, #28]
 80122c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122c6:	931a      	str	r3, [sp, #104]	; 0x68
 80122c8:	4654      	mov	r4, sl
 80122ca:	2205      	movs	r2, #5
 80122cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d0:	4851      	ldr	r0, [pc, #324]	; (8012418 <_svfiprintf_r+0x1ec>)
 80122d2:	f7ee f805 	bl	80002e0 <memchr>
 80122d6:	9a04      	ldr	r2, [sp, #16]
 80122d8:	b9d8      	cbnz	r0, 8012312 <_svfiprintf_r+0xe6>
 80122da:	06d0      	lsls	r0, r2, #27
 80122dc:	bf44      	itt	mi
 80122de:	2320      	movmi	r3, #32
 80122e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122e4:	0711      	lsls	r1, r2, #28
 80122e6:	bf44      	itt	mi
 80122e8:	232b      	movmi	r3, #43	; 0x2b
 80122ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122ee:	f89a 3000 	ldrb.w	r3, [sl]
 80122f2:	2b2a      	cmp	r3, #42	; 0x2a
 80122f4:	d015      	beq.n	8012322 <_svfiprintf_r+0xf6>
 80122f6:	9a07      	ldr	r2, [sp, #28]
 80122f8:	4654      	mov	r4, sl
 80122fa:	2000      	movs	r0, #0
 80122fc:	f04f 0c0a 	mov.w	ip, #10
 8012300:	4621      	mov	r1, r4
 8012302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012306:	3b30      	subs	r3, #48	; 0x30
 8012308:	2b09      	cmp	r3, #9
 801230a:	d94e      	bls.n	80123aa <_svfiprintf_r+0x17e>
 801230c:	b1b0      	cbz	r0, 801233c <_svfiprintf_r+0x110>
 801230e:	9207      	str	r2, [sp, #28]
 8012310:	e014      	b.n	801233c <_svfiprintf_r+0x110>
 8012312:	eba0 0308 	sub.w	r3, r0, r8
 8012316:	fa09 f303 	lsl.w	r3, r9, r3
 801231a:	4313      	orrs	r3, r2
 801231c:	9304      	str	r3, [sp, #16]
 801231e:	46a2      	mov	sl, r4
 8012320:	e7d2      	b.n	80122c8 <_svfiprintf_r+0x9c>
 8012322:	9b03      	ldr	r3, [sp, #12]
 8012324:	1d19      	adds	r1, r3, #4
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	9103      	str	r1, [sp, #12]
 801232a:	2b00      	cmp	r3, #0
 801232c:	bfbb      	ittet	lt
 801232e:	425b      	neglt	r3, r3
 8012330:	f042 0202 	orrlt.w	r2, r2, #2
 8012334:	9307      	strge	r3, [sp, #28]
 8012336:	9307      	strlt	r3, [sp, #28]
 8012338:	bfb8      	it	lt
 801233a:	9204      	strlt	r2, [sp, #16]
 801233c:	7823      	ldrb	r3, [r4, #0]
 801233e:	2b2e      	cmp	r3, #46	; 0x2e
 8012340:	d10c      	bne.n	801235c <_svfiprintf_r+0x130>
 8012342:	7863      	ldrb	r3, [r4, #1]
 8012344:	2b2a      	cmp	r3, #42	; 0x2a
 8012346:	d135      	bne.n	80123b4 <_svfiprintf_r+0x188>
 8012348:	9b03      	ldr	r3, [sp, #12]
 801234a:	1d1a      	adds	r2, r3, #4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	9203      	str	r2, [sp, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	bfb8      	it	lt
 8012354:	f04f 33ff 	movlt.w	r3, #4294967295
 8012358:	3402      	adds	r4, #2
 801235a:	9305      	str	r3, [sp, #20]
 801235c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012428 <_svfiprintf_r+0x1fc>
 8012360:	7821      	ldrb	r1, [r4, #0]
 8012362:	2203      	movs	r2, #3
 8012364:	4650      	mov	r0, sl
 8012366:	f7ed ffbb 	bl	80002e0 <memchr>
 801236a:	b140      	cbz	r0, 801237e <_svfiprintf_r+0x152>
 801236c:	2340      	movs	r3, #64	; 0x40
 801236e:	eba0 000a 	sub.w	r0, r0, sl
 8012372:	fa03 f000 	lsl.w	r0, r3, r0
 8012376:	9b04      	ldr	r3, [sp, #16]
 8012378:	4303      	orrs	r3, r0
 801237a:	3401      	adds	r4, #1
 801237c:	9304      	str	r3, [sp, #16]
 801237e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012382:	4826      	ldr	r0, [pc, #152]	; (801241c <_svfiprintf_r+0x1f0>)
 8012384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012388:	2206      	movs	r2, #6
 801238a:	f7ed ffa9 	bl	80002e0 <memchr>
 801238e:	2800      	cmp	r0, #0
 8012390:	d038      	beq.n	8012404 <_svfiprintf_r+0x1d8>
 8012392:	4b23      	ldr	r3, [pc, #140]	; (8012420 <_svfiprintf_r+0x1f4>)
 8012394:	bb1b      	cbnz	r3, 80123de <_svfiprintf_r+0x1b2>
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	3307      	adds	r3, #7
 801239a:	f023 0307 	bic.w	r3, r3, #7
 801239e:	3308      	adds	r3, #8
 80123a0:	9303      	str	r3, [sp, #12]
 80123a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123a4:	4433      	add	r3, r6
 80123a6:	9309      	str	r3, [sp, #36]	; 0x24
 80123a8:	e767      	b.n	801227a <_svfiprintf_r+0x4e>
 80123aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80123ae:	460c      	mov	r4, r1
 80123b0:	2001      	movs	r0, #1
 80123b2:	e7a5      	b.n	8012300 <_svfiprintf_r+0xd4>
 80123b4:	2300      	movs	r3, #0
 80123b6:	3401      	adds	r4, #1
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	4619      	mov	r1, r3
 80123bc:	f04f 0c0a 	mov.w	ip, #10
 80123c0:	4620      	mov	r0, r4
 80123c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123c6:	3a30      	subs	r2, #48	; 0x30
 80123c8:	2a09      	cmp	r2, #9
 80123ca:	d903      	bls.n	80123d4 <_svfiprintf_r+0x1a8>
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d0c5      	beq.n	801235c <_svfiprintf_r+0x130>
 80123d0:	9105      	str	r1, [sp, #20]
 80123d2:	e7c3      	b.n	801235c <_svfiprintf_r+0x130>
 80123d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80123d8:	4604      	mov	r4, r0
 80123da:	2301      	movs	r3, #1
 80123dc:	e7f0      	b.n	80123c0 <_svfiprintf_r+0x194>
 80123de:	ab03      	add	r3, sp, #12
 80123e0:	9300      	str	r3, [sp, #0]
 80123e2:	462a      	mov	r2, r5
 80123e4:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <_svfiprintf_r+0x1f8>)
 80123e6:	a904      	add	r1, sp, #16
 80123e8:	4638      	mov	r0, r7
 80123ea:	f3af 8000 	nop.w
 80123ee:	1c42      	adds	r2, r0, #1
 80123f0:	4606      	mov	r6, r0
 80123f2:	d1d6      	bne.n	80123a2 <_svfiprintf_r+0x176>
 80123f4:	89ab      	ldrh	r3, [r5, #12]
 80123f6:	065b      	lsls	r3, r3, #25
 80123f8:	f53f af2c 	bmi.w	8012254 <_svfiprintf_r+0x28>
 80123fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123fe:	b01d      	add	sp, #116	; 0x74
 8012400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012404:	ab03      	add	r3, sp, #12
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	462a      	mov	r2, r5
 801240a:	4b06      	ldr	r3, [pc, #24]	; (8012424 <_svfiprintf_r+0x1f8>)
 801240c:	a904      	add	r1, sp, #16
 801240e:	4638      	mov	r0, r7
 8012410:	f000 f9d4 	bl	80127bc <_printf_i>
 8012414:	e7eb      	b.n	80123ee <_svfiprintf_r+0x1c2>
 8012416:	bf00      	nop
 8012418:	08013076 	.word	0x08013076
 801241c:	08013080 	.word	0x08013080
 8012420:	00000000 	.word	0x00000000
 8012424:	08012175 	.word	0x08012175
 8012428:	0801307c 	.word	0x0801307c

0801242c <__sfputc_r>:
 801242c:	6893      	ldr	r3, [r2, #8]
 801242e:	3b01      	subs	r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	b410      	push	{r4}
 8012434:	6093      	str	r3, [r2, #8]
 8012436:	da08      	bge.n	801244a <__sfputc_r+0x1e>
 8012438:	6994      	ldr	r4, [r2, #24]
 801243a:	42a3      	cmp	r3, r4
 801243c:	db01      	blt.n	8012442 <__sfputc_r+0x16>
 801243e:	290a      	cmp	r1, #10
 8012440:	d103      	bne.n	801244a <__sfputc_r+0x1e>
 8012442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012446:	f000 baf1 	b.w	8012a2c <__swbuf_r>
 801244a:	6813      	ldr	r3, [r2, #0]
 801244c:	1c58      	adds	r0, r3, #1
 801244e:	6010      	str	r0, [r2, #0]
 8012450:	7019      	strb	r1, [r3, #0]
 8012452:	4608      	mov	r0, r1
 8012454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012458:	4770      	bx	lr

0801245a <__sfputs_r>:
 801245a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801245c:	4606      	mov	r6, r0
 801245e:	460f      	mov	r7, r1
 8012460:	4614      	mov	r4, r2
 8012462:	18d5      	adds	r5, r2, r3
 8012464:	42ac      	cmp	r4, r5
 8012466:	d101      	bne.n	801246c <__sfputs_r+0x12>
 8012468:	2000      	movs	r0, #0
 801246a:	e007      	b.n	801247c <__sfputs_r+0x22>
 801246c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012470:	463a      	mov	r2, r7
 8012472:	4630      	mov	r0, r6
 8012474:	f7ff ffda 	bl	801242c <__sfputc_r>
 8012478:	1c43      	adds	r3, r0, #1
 801247a:	d1f3      	bne.n	8012464 <__sfputs_r+0xa>
 801247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012480 <_vfiprintf_r>:
 8012480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012484:	460d      	mov	r5, r1
 8012486:	b09d      	sub	sp, #116	; 0x74
 8012488:	4614      	mov	r4, r2
 801248a:	4698      	mov	r8, r3
 801248c:	4606      	mov	r6, r0
 801248e:	b118      	cbz	r0, 8012498 <_vfiprintf_r+0x18>
 8012490:	6983      	ldr	r3, [r0, #24]
 8012492:	b90b      	cbnz	r3, 8012498 <_vfiprintf_r+0x18>
 8012494:	f7ff fa54 	bl	8011940 <__sinit>
 8012498:	4b89      	ldr	r3, [pc, #548]	; (80126c0 <_vfiprintf_r+0x240>)
 801249a:	429d      	cmp	r5, r3
 801249c:	d11b      	bne.n	80124d6 <_vfiprintf_r+0x56>
 801249e:	6875      	ldr	r5, [r6, #4]
 80124a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124a2:	07d9      	lsls	r1, r3, #31
 80124a4:	d405      	bmi.n	80124b2 <_vfiprintf_r+0x32>
 80124a6:	89ab      	ldrh	r3, [r5, #12]
 80124a8:	059a      	lsls	r2, r3, #22
 80124aa:	d402      	bmi.n	80124b2 <_vfiprintf_r+0x32>
 80124ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ae:	f7ff fb0a 	bl	8011ac6 <__retarget_lock_acquire_recursive>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	071b      	lsls	r3, r3, #28
 80124b6:	d501      	bpl.n	80124bc <_vfiprintf_r+0x3c>
 80124b8:	692b      	ldr	r3, [r5, #16]
 80124ba:	b9eb      	cbnz	r3, 80124f8 <_vfiprintf_r+0x78>
 80124bc:	4629      	mov	r1, r5
 80124be:	4630      	mov	r0, r6
 80124c0:	f000 fb06 	bl	8012ad0 <__swsetup_r>
 80124c4:	b1c0      	cbz	r0, 80124f8 <_vfiprintf_r+0x78>
 80124c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124c8:	07dc      	lsls	r4, r3, #31
 80124ca:	d50e      	bpl.n	80124ea <_vfiprintf_r+0x6a>
 80124cc:	f04f 30ff 	mov.w	r0, #4294967295
 80124d0:	b01d      	add	sp, #116	; 0x74
 80124d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d6:	4b7b      	ldr	r3, [pc, #492]	; (80126c4 <_vfiprintf_r+0x244>)
 80124d8:	429d      	cmp	r5, r3
 80124da:	d101      	bne.n	80124e0 <_vfiprintf_r+0x60>
 80124dc:	68b5      	ldr	r5, [r6, #8]
 80124de:	e7df      	b.n	80124a0 <_vfiprintf_r+0x20>
 80124e0:	4b79      	ldr	r3, [pc, #484]	; (80126c8 <_vfiprintf_r+0x248>)
 80124e2:	429d      	cmp	r5, r3
 80124e4:	bf08      	it	eq
 80124e6:	68f5      	ldreq	r5, [r6, #12]
 80124e8:	e7da      	b.n	80124a0 <_vfiprintf_r+0x20>
 80124ea:	89ab      	ldrh	r3, [r5, #12]
 80124ec:	0598      	lsls	r0, r3, #22
 80124ee:	d4ed      	bmi.n	80124cc <_vfiprintf_r+0x4c>
 80124f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124f2:	f7ff fae9 	bl	8011ac8 <__retarget_lock_release_recursive>
 80124f6:	e7e9      	b.n	80124cc <_vfiprintf_r+0x4c>
 80124f8:	2300      	movs	r3, #0
 80124fa:	9309      	str	r3, [sp, #36]	; 0x24
 80124fc:	2320      	movs	r3, #32
 80124fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012502:	f8cd 800c 	str.w	r8, [sp, #12]
 8012506:	2330      	movs	r3, #48	; 0x30
 8012508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126cc <_vfiprintf_r+0x24c>
 801250c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012510:	f04f 0901 	mov.w	r9, #1
 8012514:	4623      	mov	r3, r4
 8012516:	469a      	mov	sl, r3
 8012518:	f813 2b01 	ldrb.w	r2, [r3], #1
 801251c:	b10a      	cbz	r2, 8012522 <_vfiprintf_r+0xa2>
 801251e:	2a25      	cmp	r2, #37	; 0x25
 8012520:	d1f9      	bne.n	8012516 <_vfiprintf_r+0x96>
 8012522:	ebba 0b04 	subs.w	fp, sl, r4
 8012526:	d00b      	beq.n	8012540 <_vfiprintf_r+0xc0>
 8012528:	465b      	mov	r3, fp
 801252a:	4622      	mov	r2, r4
 801252c:	4629      	mov	r1, r5
 801252e:	4630      	mov	r0, r6
 8012530:	f7ff ff93 	bl	801245a <__sfputs_r>
 8012534:	3001      	adds	r0, #1
 8012536:	f000 80aa 	beq.w	801268e <_vfiprintf_r+0x20e>
 801253a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801253c:	445a      	add	r2, fp
 801253e:	9209      	str	r2, [sp, #36]	; 0x24
 8012540:	f89a 3000 	ldrb.w	r3, [sl]
 8012544:	2b00      	cmp	r3, #0
 8012546:	f000 80a2 	beq.w	801268e <_vfiprintf_r+0x20e>
 801254a:	2300      	movs	r3, #0
 801254c:	f04f 32ff 	mov.w	r2, #4294967295
 8012550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012554:	f10a 0a01 	add.w	sl, sl, #1
 8012558:	9304      	str	r3, [sp, #16]
 801255a:	9307      	str	r3, [sp, #28]
 801255c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012560:	931a      	str	r3, [sp, #104]	; 0x68
 8012562:	4654      	mov	r4, sl
 8012564:	2205      	movs	r2, #5
 8012566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801256a:	4858      	ldr	r0, [pc, #352]	; (80126cc <_vfiprintf_r+0x24c>)
 801256c:	f7ed feb8 	bl	80002e0 <memchr>
 8012570:	9a04      	ldr	r2, [sp, #16]
 8012572:	b9d8      	cbnz	r0, 80125ac <_vfiprintf_r+0x12c>
 8012574:	06d1      	lsls	r1, r2, #27
 8012576:	bf44      	itt	mi
 8012578:	2320      	movmi	r3, #32
 801257a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801257e:	0713      	lsls	r3, r2, #28
 8012580:	bf44      	itt	mi
 8012582:	232b      	movmi	r3, #43	; 0x2b
 8012584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012588:	f89a 3000 	ldrb.w	r3, [sl]
 801258c:	2b2a      	cmp	r3, #42	; 0x2a
 801258e:	d015      	beq.n	80125bc <_vfiprintf_r+0x13c>
 8012590:	9a07      	ldr	r2, [sp, #28]
 8012592:	4654      	mov	r4, sl
 8012594:	2000      	movs	r0, #0
 8012596:	f04f 0c0a 	mov.w	ip, #10
 801259a:	4621      	mov	r1, r4
 801259c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125a0:	3b30      	subs	r3, #48	; 0x30
 80125a2:	2b09      	cmp	r3, #9
 80125a4:	d94e      	bls.n	8012644 <_vfiprintf_r+0x1c4>
 80125a6:	b1b0      	cbz	r0, 80125d6 <_vfiprintf_r+0x156>
 80125a8:	9207      	str	r2, [sp, #28]
 80125aa:	e014      	b.n	80125d6 <_vfiprintf_r+0x156>
 80125ac:	eba0 0308 	sub.w	r3, r0, r8
 80125b0:	fa09 f303 	lsl.w	r3, r9, r3
 80125b4:	4313      	orrs	r3, r2
 80125b6:	9304      	str	r3, [sp, #16]
 80125b8:	46a2      	mov	sl, r4
 80125ba:	e7d2      	b.n	8012562 <_vfiprintf_r+0xe2>
 80125bc:	9b03      	ldr	r3, [sp, #12]
 80125be:	1d19      	adds	r1, r3, #4
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	9103      	str	r1, [sp, #12]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	bfbb      	ittet	lt
 80125c8:	425b      	neglt	r3, r3
 80125ca:	f042 0202 	orrlt.w	r2, r2, #2
 80125ce:	9307      	strge	r3, [sp, #28]
 80125d0:	9307      	strlt	r3, [sp, #28]
 80125d2:	bfb8      	it	lt
 80125d4:	9204      	strlt	r2, [sp, #16]
 80125d6:	7823      	ldrb	r3, [r4, #0]
 80125d8:	2b2e      	cmp	r3, #46	; 0x2e
 80125da:	d10c      	bne.n	80125f6 <_vfiprintf_r+0x176>
 80125dc:	7863      	ldrb	r3, [r4, #1]
 80125de:	2b2a      	cmp	r3, #42	; 0x2a
 80125e0:	d135      	bne.n	801264e <_vfiprintf_r+0x1ce>
 80125e2:	9b03      	ldr	r3, [sp, #12]
 80125e4:	1d1a      	adds	r2, r3, #4
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	9203      	str	r2, [sp, #12]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	bfb8      	it	lt
 80125ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80125f2:	3402      	adds	r4, #2
 80125f4:	9305      	str	r3, [sp, #20]
 80125f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126dc <_vfiprintf_r+0x25c>
 80125fa:	7821      	ldrb	r1, [r4, #0]
 80125fc:	2203      	movs	r2, #3
 80125fe:	4650      	mov	r0, sl
 8012600:	f7ed fe6e 	bl	80002e0 <memchr>
 8012604:	b140      	cbz	r0, 8012618 <_vfiprintf_r+0x198>
 8012606:	2340      	movs	r3, #64	; 0x40
 8012608:	eba0 000a 	sub.w	r0, r0, sl
 801260c:	fa03 f000 	lsl.w	r0, r3, r0
 8012610:	9b04      	ldr	r3, [sp, #16]
 8012612:	4303      	orrs	r3, r0
 8012614:	3401      	adds	r4, #1
 8012616:	9304      	str	r3, [sp, #16]
 8012618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801261c:	482c      	ldr	r0, [pc, #176]	; (80126d0 <_vfiprintf_r+0x250>)
 801261e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012622:	2206      	movs	r2, #6
 8012624:	f7ed fe5c 	bl	80002e0 <memchr>
 8012628:	2800      	cmp	r0, #0
 801262a:	d03f      	beq.n	80126ac <_vfiprintf_r+0x22c>
 801262c:	4b29      	ldr	r3, [pc, #164]	; (80126d4 <_vfiprintf_r+0x254>)
 801262e:	bb1b      	cbnz	r3, 8012678 <_vfiprintf_r+0x1f8>
 8012630:	9b03      	ldr	r3, [sp, #12]
 8012632:	3307      	adds	r3, #7
 8012634:	f023 0307 	bic.w	r3, r3, #7
 8012638:	3308      	adds	r3, #8
 801263a:	9303      	str	r3, [sp, #12]
 801263c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801263e:	443b      	add	r3, r7
 8012640:	9309      	str	r3, [sp, #36]	; 0x24
 8012642:	e767      	b.n	8012514 <_vfiprintf_r+0x94>
 8012644:	fb0c 3202 	mla	r2, ip, r2, r3
 8012648:	460c      	mov	r4, r1
 801264a:	2001      	movs	r0, #1
 801264c:	e7a5      	b.n	801259a <_vfiprintf_r+0x11a>
 801264e:	2300      	movs	r3, #0
 8012650:	3401      	adds	r4, #1
 8012652:	9305      	str	r3, [sp, #20]
 8012654:	4619      	mov	r1, r3
 8012656:	f04f 0c0a 	mov.w	ip, #10
 801265a:	4620      	mov	r0, r4
 801265c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012660:	3a30      	subs	r2, #48	; 0x30
 8012662:	2a09      	cmp	r2, #9
 8012664:	d903      	bls.n	801266e <_vfiprintf_r+0x1ee>
 8012666:	2b00      	cmp	r3, #0
 8012668:	d0c5      	beq.n	80125f6 <_vfiprintf_r+0x176>
 801266a:	9105      	str	r1, [sp, #20]
 801266c:	e7c3      	b.n	80125f6 <_vfiprintf_r+0x176>
 801266e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012672:	4604      	mov	r4, r0
 8012674:	2301      	movs	r3, #1
 8012676:	e7f0      	b.n	801265a <_vfiprintf_r+0x1da>
 8012678:	ab03      	add	r3, sp, #12
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	462a      	mov	r2, r5
 801267e:	4b16      	ldr	r3, [pc, #88]	; (80126d8 <_vfiprintf_r+0x258>)
 8012680:	a904      	add	r1, sp, #16
 8012682:	4630      	mov	r0, r6
 8012684:	f3af 8000 	nop.w
 8012688:	4607      	mov	r7, r0
 801268a:	1c78      	adds	r0, r7, #1
 801268c:	d1d6      	bne.n	801263c <_vfiprintf_r+0x1bc>
 801268e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012690:	07d9      	lsls	r1, r3, #31
 8012692:	d405      	bmi.n	80126a0 <_vfiprintf_r+0x220>
 8012694:	89ab      	ldrh	r3, [r5, #12]
 8012696:	059a      	lsls	r2, r3, #22
 8012698:	d402      	bmi.n	80126a0 <_vfiprintf_r+0x220>
 801269a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801269c:	f7ff fa14 	bl	8011ac8 <__retarget_lock_release_recursive>
 80126a0:	89ab      	ldrh	r3, [r5, #12]
 80126a2:	065b      	lsls	r3, r3, #25
 80126a4:	f53f af12 	bmi.w	80124cc <_vfiprintf_r+0x4c>
 80126a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126aa:	e711      	b.n	80124d0 <_vfiprintf_r+0x50>
 80126ac:	ab03      	add	r3, sp, #12
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	462a      	mov	r2, r5
 80126b2:	4b09      	ldr	r3, [pc, #36]	; (80126d8 <_vfiprintf_r+0x258>)
 80126b4:	a904      	add	r1, sp, #16
 80126b6:	4630      	mov	r0, r6
 80126b8:	f000 f880 	bl	80127bc <_printf_i>
 80126bc:	e7e4      	b.n	8012688 <_vfiprintf_r+0x208>
 80126be:	bf00      	nop
 80126c0:	08012f80 	.word	0x08012f80
 80126c4:	08012fa0 	.word	0x08012fa0
 80126c8:	08012f60 	.word	0x08012f60
 80126cc:	08013076 	.word	0x08013076
 80126d0:	08013080 	.word	0x08013080
 80126d4:	00000000 	.word	0x00000000
 80126d8:	0801245b 	.word	0x0801245b
 80126dc:	0801307c 	.word	0x0801307c

080126e0 <_printf_common>:
 80126e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e4:	4616      	mov	r6, r2
 80126e6:	4699      	mov	r9, r3
 80126e8:	688a      	ldr	r2, [r1, #8]
 80126ea:	690b      	ldr	r3, [r1, #16]
 80126ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80126f0:	4293      	cmp	r3, r2
 80126f2:	bfb8      	it	lt
 80126f4:	4613      	movlt	r3, r2
 80126f6:	6033      	str	r3, [r6, #0]
 80126f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80126fc:	4607      	mov	r7, r0
 80126fe:	460c      	mov	r4, r1
 8012700:	b10a      	cbz	r2, 8012706 <_printf_common+0x26>
 8012702:	3301      	adds	r3, #1
 8012704:	6033      	str	r3, [r6, #0]
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	0699      	lsls	r1, r3, #26
 801270a:	bf42      	ittt	mi
 801270c:	6833      	ldrmi	r3, [r6, #0]
 801270e:	3302      	addmi	r3, #2
 8012710:	6033      	strmi	r3, [r6, #0]
 8012712:	6825      	ldr	r5, [r4, #0]
 8012714:	f015 0506 	ands.w	r5, r5, #6
 8012718:	d106      	bne.n	8012728 <_printf_common+0x48>
 801271a:	f104 0a19 	add.w	sl, r4, #25
 801271e:	68e3      	ldr	r3, [r4, #12]
 8012720:	6832      	ldr	r2, [r6, #0]
 8012722:	1a9b      	subs	r3, r3, r2
 8012724:	42ab      	cmp	r3, r5
 8012726:	dc26      	bgt.n	8012776 <_printf_common+0x96>
 8012728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801272c:	1e13      	subs	r3, r2, #0
 801272e:	6822      	ldr	r2, [r4, #0]
 8012730:	bf18      	it	ne
 8012732:	2301      	movne	r3, #1
 8012734:	0692      	lsls	r2, r2, #26
 8012736:	d42b      	bmi.n	8012790 <_printf_common+0xb0>
 8012738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801273c:	4649      	mov	r1, r9
 801273e:	4638      	mov	r0, r7
 8012740:	47c0      	blx	r8
 8012742:	3001      	adds	r0, #1
 8012744:	d01e      	beq.n	8012784 <_printf_common+0xa4>
 8012746:	6823      	ldr	r3, [r4, #0]
 8012748:	68e5      	ldr	r5, [r4, #12]
 801274a:	6832      	ldr	r2, [r6, #0]
 801274c:	f003 0306 	and.w	r3, r3, #6
 8012750:	2b04      	cmp	r3, #4
 8012752:	bf08      	it	eq
 8012754:	1aad      	subeq	r5, r5, r2
 8012756:	68a3      	ldr	r3, [r4, #8]
 8012758:	6922      	ldr	r2, [r4, #16]
 801275a:	bf0c      	ite	eq
 801275c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012760:	2500      	movne	r5, #0
 8012762:	4293      	cmp	r3, r2
 8012764:	bfc4      	itt	gt
 8012766:	1a9b      	subgt	r3, r3, r2
 8012768:	18ed      	addgt	r5, r5, r3
 801276a:	2600      	movs	r6, #0
 801276c:	341a      	adds	r4, #26
 801276e:	42b5      	cmp	r5, r6
 8012770:	d11a      	bne.n	80127a8 <_printf_common+0xc8>
 8012772:	2000      	movs	r0, #0
 8012774:	e008      	b.n	8012788 <_printf_common+0xa8>
 8012776:	2301      	movs	r3, #1
 8012778:	4652      	mov	r2, sl
 801277a:	4649      	mov	r1, r9
 801277c:	4638      	mov	r0, r7
 801277e:	47c0      	blx	r8
 8012780:	3001      	adds	r0, #1
 8012782:	d103      	bne.n	801278c <_printf_common+0xac>
 8012784:	f04f 30ff 	mov.w	r0, #4294967295
 8012788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278c:	3501      	adds	r5, #1
 801278e:	e7c6      	b.n	801271e <_printf_common+0x3e>
 8012790:	18e1      	adds	r1, r4, r3
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	2030      	movs	r0, #48	; 0x30
 8012796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801279a:	4422      	add	r2, r4
 801279c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127a4:	3302      	adds	r3, #2
 80127a6:	e7c7      	b.n	8012738 <_printf_common+0x58>
 80127a8:	2301      	movs	r3, #1
 80127aa:	4622      	mov	r2, r4
 80127ac:	4649      	mov	r1, r9
 80127ae:	4638      	mov	r0, r7
 80127b0:	47c0      	blx	r8
 80127b2:	3001      	adds	r0, #1
 80127b4:	d0e6      	beq.n	8012784 <_printf_common+0xa4>
 80127b6:	3601      	adds	r6, #1
 80127b8:	e7d9      	b.n	801276e <_printf_common+0x8e>
	...

080127bc <_printf_i>:
 80127bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127c0:	460c      	mov	r4, r1
 80127c2:	4691      	mov	r9, r2
 80127c4:	7e27      	ldrb	r7, [r4, #24]
 80127c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80127c8:	2f78      	cmp	r7, #120	; 0x78
 80127ca:	4680      	mov	r8, r0
 80127cc:	469a      	mov	sl, r3
 80127ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127d2:	d807      	bhi.n	80127e4 <_printf_i+0x28>
 80127d4:	2f62      	cmp	r7, #98	; 0x62
 80127d6:	d80a      	bhi.n	80127ee <_printf_i+0x32>
 80127d8:	2f00      	cmp	r7, #0
 80127da:	f000 80d8 	beq.w	801298e <_printf_i+0x1d2>
 80127de:	2f58      	cmp	r7, #88	; 0x58
 80127e0:	f000 80a3 	beq.w	801292a <_printf_i+0x16e>
 80127e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80127e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80127ec:	e03a      	b.n	8012864 <_printf_i+0xa8>
 80127ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80127f2:	2b15      	cmp	r3, #21
 80127f4:	d8f6      	bhi.n	80127e4 <_printf_i+0x28>
 80127f6:	a001      	add	r0, pc, #4	; (adr r0, 80127fc <_printf_i+0x40>)
 80127f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80127fc:	08012855 	.word	0x08012855
 8012800:	08012869 	.word	0x08012869
 8012804:	080127e5 	.word	0x080127e5
 8012808:	080127e5 	.word	0x080127e5
 801280c:	080127e5 	.word	0x080127e5
 8012810:	080127e5 	.word	0x080127e5
 8012814:	08012869 	.word	0x08012869
 8012818:	080127e5 	.word	0x080127e5
 801281c:	080127e5 	.word	0x080127e5
 8012820:	080127e5 	.word	0x080127e5
 8012824:	080127e5 	.word	0x080127e5
 8012828:	08012975 	.word	0x08012975
 801282c:	08012899 	.word	0x08012899
 8012830:	08012957 	.word	0x08012957
 8012834:	080127e5 	.word	0x080127e5
 8012838:	080127e5 	.word	0x080127e5
 801283c:	08012997 	.word	0x08012997
 8012840:	080127e5 	.word	0x080127e5
 8012844:	08012899 	.word	0x08012899
 8012848:	080127e5 	.word	0x080127e5
 801284c:	080127e5 	.word	0x080127e5
 8012850:	0801295f 	.word	0x0801295f
 8012854:	680b      	ldr	r3, [r1, #0]
 8012856:	1d1a      	adds	r2, r3, #4
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	600a      	str	r2, [r1, #0]
 801285c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012864:	2301      	movs	r3, #1
 8012866:	e0a3      	b.n	80129b0 <_printf_i+0x1f4>
 8012868:	6825      	ldr	r5, [r4, #0]
 801286a:	6808      	ldr	r0, [r1, #0]
 801286c:	062e      	lsls	r6, r5, #24
 801286e:	f100 0304 	add.w	r3, r0, #4
 8012872:	d50a      	bpl.n	801288a <_printf_i+0xce>
 8012874:	6805      	ldr	r5, [r0, #0]
 8012876:	600b      	str	r3, [r1, #0]
 8012878:	2d00      	cmp	r5, #0
 801287a:	da03      	bge.n	8012884 <_printf_i+0xc8>
 801287c:	232d      	movs	r3, #45	; 0x2d
 801287e:	426d      	negs	r5, r5
 8012880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012884:	485e      	ldr	r0, [pc, #376]	; (8012a00 <_printf_i+0x244>)
 8012886:	230a      	movs	r3, #10
 8012888:	e019      	b.n	80128be <_printf_i+0x102>
 801288a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801288e:	6805      	ldr	r5, [r0, #0]
 8012890:	600b      	str	r3, [r1, #0]
 8012892:	bf18      	it	ne
 8012894:	b22d      	sxthne	r5, r5
 8012896:	e7ef      	b.n	8012878 <_printf_i+0xbc>
 8012898:	680b      	ldr	r3, [r1, #0]
 801289a:	6825      	ldr	r5, [r4, #0]
 801289c:	1d18      	adds	r0, r3, #4
 801289e:	6008      	str	r0, [r1, #0]
 80128a0:	0628      	lsls	r0, r5, #24
 80128a2:	d501      	bpl.n	80128a8 <_printf_i+0xec>
 80128a4:	681d      	ldr	r5, [r3, #0]
 80128a6:	e002      	b.n	80128ae <_printf_i+0xf2>
 80128a8:	0669      	lsls	r1, r5, #25
 80128aa:	d5fb      	bpl.n	80128a4 <_printf_i+0xe8>
 80128ac:	881d      	ldrh	r5, [r3, #0]
 80128ae:	4854      	ldr	r0, [pc, #336]	; (8012a00 <_printf_i+0x244>)
 80128b0:	2f6f      	cmp	r7, #111	; 0x6f
 80128b2:	bf0c      	ite	eq
 80128b4:	2308      	moveq	r3, #8
 80128b6:	230a      	movne	r3, #10
 80128b8:	2100      	movs	r1, #0
 80128ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128be:	6866      	ldr	r6, [r4, #4]
 80128c0:	60a6      	str	r6, [r4, #8]
 80128c2:	2e00      	cmp	r6, #0
 80128c4:	bfa2      	ittt	ge
 80128c6:	6821      	ldrge	r1, [r4, #0]
 80128c8:	f021 0104 	bicge.w	r1, r1, #4
 80128cc:	6021      	strge	r1, [r4, #0]
 80128ce:	b90d      	cbnz	r5, 80128d4 <_printf_i+0x118>
 80128d0:	2e00      	cmp	r6, #0
 80128d2:	d04d      	beq.n	8012970 <_printf_i+0x1b4>
 80128d4:	4616      	mov	r6, r2
 80128d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80128da:	fb03 5711 	mls	r7, r3, r1, r5
 80128de:	5dc7      	ldrb	r7, [r0, r7]
 80128e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80128e4:	462f      	mov	r7, r5
 80128e6:	42bb      	cmp	r3, r7
 80128e8:	460d      	mov	r5, r1
 80128ea:	d9f4      	bls.n	80128d6 <_printf_i+0x11a>
 80128ec:	2b08      	cmp	r3, #8
 80128ee:	d10b      	bne.n	8012908 <_printf_i+0x14c>
 80128f0:	6823      	ldr	r3, [r4, #0]
 80128f2:	07df      	lsls	r7, r3, #31
 80128f4:	d508      	bpl.n	8012908 <_printf_i+0x14c>
 80128f6:	6923      	ldr	r3, [r4, #16]
 80128f8:	6861      	ldr	r1, [r4, #4]
 80128fa:	4299      	cmp	r1, r3
 80128fc:	bfde      	ittt	le
 80128fe:	2330      	movle	r3, #48	; 0x30
 8012900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012908:	1b92      	subs	r2, r2, r6
 801290a:	6122      	str	r2, [r4, #16]
 801290c:	f8cd a000 	str.w	sl, [sp]
 8012910:	464b      	mov	r3, r9
 8012912:	aa03      	add	r2, sp, #12
 8012914:	4621      	mov	r1, r4
 8012916:	4640      	mov	r0, r8
 8012918:	f7ff fee2 	bl	80126e0 <_printf_common>
 801291c:	3001      	adds	r0, #1
 801291e:	d14c      	bne.n	80129ba <_printf_i+0x1fe>
 8012920:	f04f 30ff 	mov.w	r0, #4294967295
 8012924:	b004      	add	sp, #16
 8012926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801292a:	4835      	ldr	r0, [pc, #212]	; (8012a00 <_printf_i+0x244>)
 801292c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012930:	6823      	ldr	r3, [r4, #0]
 8012932:	680e      	ldr	r6, [r1, #0]
 8012934:	061f      	lsls	r7, r3, #24
 8012936:	f856 5b04 	ldr.w	r5, [r6], #4
 801293a:	600e      	str	r6, [r1, #0]
 801293c:	d514      	bpl.n	8012968 <_printf_i+0x1ac>
 801293e:	07d9      	lsls	r1, r3, #31
 8012940:	bf44      	itt	mi
 8012942:	f043 0320 	orrmi.w	r3, r3, #32
 8012946:	6023      	strmi	r3, [r4, #0]
 8012948:	b91d      	cbnz	r5, 8012952 <_printf_i+0x196>
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	f023 0320 	bic.w	r3, r3, #32
 8012950:	6023      	str	r3, [r4, #0]
 8012952:	2310      	movs	r3, #16
 8012954:	e7b0      	b.n	80128b8 <_printf_i+0xfc>
 8012956:	6823      	ldr	r3, [r4, #0]
 8012958:	f043 0320 	orr.w	r3, r3, #32
 801295c:	6023      	str	r3, [r4, #0]
 801295e:	2378      	movs	r3, #120	; 0x78
 8012960:	4828      	ldr	r0, [pc, #160]	; (8012a04 <_printf_i+0x248>)
 8012962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012966:	e7e3      	b.n	8012930 <_printf_i+0x174>
 8012968:	065e      	lsls	r6, r3, #25
 801296a:	bf48      	it	mi
 801296c:	b2ad      	uxthmi	r5, r5
 801296e:	e7e6      	b.n	801293e <_printf_i+0x182>
 8012970:	4616      	mov	r6, r2
 8012972:	e7bb      	b.n	80128ec <_printf_i+0x130>
 8012974:	680b      	ldr	r3, [r1, #0]
 8012976:	6826      	ldr	r6, [r4, #0]
 8012978:	6960      	ldr	r0, [r4, #20]
 801297a:	1d1d      	adds	r5, r3, #4
 801297c:	600d      	str	r5, [r1, #0]
 801297e:	0635      	lsls	r5, r6, #24
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	d501      	bpl.n	8012988 <_printf_i+0x1cc>
 8012984:	6018      	str	r0, [r3, #0]
 8012986:	e002      	b.n	801298e <_printf_i+0x1d2>
 8012988:	0671      	lsls	r1, r6, #25
 801298a:	d5fb      	bpl.n	8012984 <_printf_i+0x1c8>
 801298c:	8018      	strh	r0, [r3, #0]
 801298e:	2300      	movs	r3, #0
 8012990:	6123      	str	r3, [r4, #16]
 8012992:	4616      	mov	r6, r2
 8012994:	e7ba      	b.n	801290c <_printf_i+0x150>
 8012996:	680b      	ldr	r3, [r1, #0]
 8012998:	1d1a      	adds	r2, r3, #4
 801299a:	600a      	str	r2, [r1, #0]
 801299c:	681e      	ldr	r6, [r3, #0]
 801299e:	6862      	ldr	r2, [r4, #4]
 80129a0:	2100      	movs	r1, #0
 80129a2:	4630      	mov	r0, r6
 80129a4:	f7ed fc9c 	bl	80002e0 <memchr>
 80129a8:	b108      	cbz	r0, 80129ae <_printf_i+0x1f2>
 80129aa:	1b80      	subs	r0, r0, r6
 80129ac:	6060      	str	r0, [r4, #4]
 80129ae:	6863      	ldr	r3, [r4, #4]
 80129b0:	6123      	str	r3, [r4, #16]
 80129b2:	2300      	movs	r3, #0
 80129b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129b8:	e7a8      	b.n	801290c <_printf_i+0x150>
 80129ba:	6923      	ldr	r3, [r4, #16]
 80129bc:	4632      	mov	r2, r6
 80129be:	4649      	mov	r1, r9
 80129c0:	4640      	mov	r0, r8
 80129c2:	47d0      	blx	sl
 80129c4:	3001      	adds	r0, #1
 80129c6:	d0ab      	beq.n	8012920 <_printf_i+0x164>
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	079b      	lsls	r3, r3, #30
 80129cc:	d413      	bmi.n	80129f6 <_printf_i+0x23a>
 80129ce:	68e0      	ldr	r0, [r4, #12]
 80129d0:	9b03      	ldr	r3, [sp, #12]
 80129d2:	4298      	cmp	r0, r3
 80129d4:	bfb8      	it	lt
 80129d6:	4618      	movlt	r0, r3
 80129d8:	e7a4      	b.n	8012924 <_printf_i+0x168>
 80129da:	2301      	movs	r3, #1
 80129dc:	4632      	mov	r2, r6
 80129de:	4649      	mov	r1, r9
 80129e0:	4640      	mov	r0, r8
 80129e2:	47d0      	blx	sl
 80129e4:	3001      	adds	r0, #1
 80129e6:	d09b      	beq.n	8012920 <_printf_i+0x164>
 80129e8:	3501      	adds	r5, #1
 80129ea:	68e3      	ldr	r3, [r4, #12]
 80129ec:	9903      	ldr	r1, [sp, #12]
 80129ee:	1a5b      	subs	r3, r3, r1
 80129f0:	42ab      	cmp	r3, r5
 80129f2:	dcf2      	bgt.n	80129da <_printf_i+0x21e>
 80129f4:	e7eb      	b.n	80129ce <_printf_i+0x212>
 80129f6:	2500      	movs	r5, #0
 80129f8:	f104 0619 	add.w	r6, r4, #25
 80129fc:	e7f5      	b.n	80129ea <_printf_i+0x22e>
 80129fe:	bf00      	nop
 8012a00:	08013087 	.word	0x08013087
 8012a04:	08013098 	.word	0x08013098

08012a08 <_read_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4d07      	ldr	r5, [pc, #28]	; (8012a28 <_read_r+0x20>)
 8012a0c:	4604      	mov	r4, r0
 8012a0e:	4608      	mov	r0, r1
 8012a10:	4611      	mov	r1, r2
 8012a12:	2200      	movs	r2, #0
 8012a14:	602a      	str	r2, [r5, #0]
 8012a16:	461a      	mov	r2, r3
 8012a18:	f7ee f964 	bl	8000ce4 <_read>
 8012a1c:	1c43      	adds	r3, r0, #1
 8012a1e:	d102      	bne.n	8012a26 <_read_r+0x1e>
 8012a20:	682b      	ldr	r3, [r5, #0]
 8012a22:	b103      	cbz	r3, 8012a26 <_read_r+0x1e>
 8012a24:	6023      	str	r3, [r4, #0]
 8012a26:	bd38      	pop	{r3, r4, r5, pc}
 8012a28:	24009528 	.word	0x24009528

08012a2c <__swbuf_r>:
 8012a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2e:	460e      	mov	r6, r1
 8012a30:	4614      	mov	r4, r2
 8012a32:	4605      	mov	r5, r0
 8012a34:	b118      	cbz	r0, 8012a3e <__swbuf_r+0x12>
 8012a36:	6983      	ldr	r3, [r0, #24]
 8012a38:	b90b      	cbnz	r3, 8012a3e <__swbuf_r+0x12>
 8012a3a:	f7fe ff81 	bl	8011940 <__sinit>
 8012a3e:	4b21      	ldr	r3, [pc, #132]	; (8012ac4 <__swbuf_r+0x98>)
 8012a40:	429c      	cmp	r4, r3
 8012a42:	d12b      	bne.n	8012a9c <__swbuf_r+0x70>
 8012a44:	686c      	ldr	r4, [r5, #4]
 8012a46:	69a3      	ldr	r3, [r4, #24]
 8012a48:	60a3      	str	r3, [r4, #8]
 8012a4a:	89a3      	ldrh	r3, [r4, #12]
 8012a4c:	071a      	lsls	r2, r3, #28
 8012a4e:	d52f      	bpl.n	8012ab0 <__swbuf_r+0x84>
 8012a50:	6923      	ldr	r3, [r4, #16]
 8012a52:	b36b      	cbz	r3, 8012ab0 <__swbuf_r+0x84>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	6820      	ldr	r0, [r4, #0]
 8012a58:	1ac0      	subs	r0, r0, r3
 8012a5a:	6963      	ldr	r3, [r4, #20]
 8012a5c:	b2f6      	uxtb	r6, r6
 8012a5e:	4283      	cmp	r3, r0
 8012a60:	4637      	mov	r7, r6
 8012a62:	dc04      	bgt.n	8012a6e <__swbuf_r+0x42>
 8012a64:	4621      	mov	r1, r4
 8012a66:	4628      	mov	r0, r5
 8012a68:	f7ff fac0 	bl	8011fec <_fflush_r>
 8012a6c:	bb30      	cbnz	r0, 8012abc <__swbuf_r+0x90>
 8012a6e:	68a3      	ldr	r3, [r4, #8]
 8012a70:	3b01      	subs	r3, #1
 8012a72:	60a3      	str	r3, [r4, #8]
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	1c5a      	adds	r2, r3, #1
 8012a78:	6022      	str	r2, [r4, #0]
 8012a7a:	701e      	strb	r6, [r3, #0]
 8012a7c:	6963      	ldr	r3, [r4, #20]
 8012a7e:	3001      	adds	r0, #1
 8012a80:	4283      	cmp	r3, r0
 8012a82:	d004      	beq.n	8012a8e <__swbuf_r+0x62>
 8012a84:	89a3      	ldrh	r3, [r4, #12]
 8012a86:	07db      	lsls	r3, r3, #31
 8012a88:	d506      	bpl.n	8012a98 <__swbuf_r+0x6c>
 8012a8a:	2e0a      	cmp	r6, #10
 8012a8c:	d104      	bne.n	8012a98 <__swbuf_r+0x6c>
 8012a8e:	4621      	mov	r1, r4
 8012a90:	4628      	mov	r0, r5
 8012a92:	f7ff faab 	bl	8011fec <_fflush_r>
 8012a96:	b988      	cbnz	r0, 8012abc <__swbuf_r+0x90>
 8012a98:	4638      	mov	r0, r7
 8012a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <__swbuf_r+0x9c>)
 8012a9e:	429c      	cmp	r4, r3
 8012aa0:	d101      	bne.n	8012aa6 <__swbuf_r+0x7a>
 8012aa2:	68ac      	ldr	r4, [r5, #8]
 8012aa4:	e7cf      	b.n	8012a46 <__swbuf_r+0x1a>
 8012aa6:	4b09      	ldr	r3, [pc, #36]	; (8012acc <__swbuf_r+0xa0>)
 8012aa8:	429c      	cmp	r4, r3
 8012aaa:	bf08      	it	eq
 8012aac:	68ec      	ldreq	r4, [r5, #12]
 8012aae:	e7ca      	b.n	8012a46 <__swbuf_r+0x1a>
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f000 f80c 	bl	8012ad0 <__swsetup_r>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d0cb      	beq.n	8012a54 <__swbuf_r+0x28>
 8012abc:	f04f 37ff 	mov.w	r7, #4294967295
 8012ac0:	e7ea      	b.n	8012a98 <__swbuf_r+0x6c>
 8012ac2:	bf00      	nop
 8012ac4:	08012f80 	.word	0x08012f80
 8012ac8:	08012fa0 	.word	0x08012fa0
 8012acc:	08012f60 	.word	0x08012f60

08012ad0 <__swsetup_r>:
 8012ad0:	4b32      	ldr	r3, [pc, #200]	; (8012b9c <__swsetup_r+0xcc>)
 8012ad2:	b570      	push	{r4, r5, r6, lr}
 8012ad4:	681d      	ldr	r5, [r3, #0]
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	b125      	cbz	r5, 8012ae6 <__swsetup_r+0x16>
 8012adc:	69ab      	ldr	r3, [r5, #24]
 8012ade:	b913      	cbnz	r3, 8012ae6 <__swsetup_r+0x16>
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f7fe ff2d 	bl	8011940 <__sinit>
 8012ae6:	4b2e      	ldr	r3, [pc, #184]	; (8012ba0 <__swsetup_r+0xd0>)
 8012ae8:	429c      	cmp	r4, r3
 8012aea:	d10f      	bne.n	8012b0c <__swsetup_r+0x3c>
 8012aec:	686c      	ldr	r4, [r5, #4]
 8012aee:	89a3      	ldrh	r3, [r4, #12]
 8012af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012af4:	0719      	lsls	r1, r3, #28
 8012af6:	d42c      	bmi.n	8012b52 <__swsetup_r+0x82>
 8012af8:	06dd      	lsls	r5, r3, #27
 8012afa:	d411      	bmi.n	8012b20 <__swsetup_r+0x50>
 8012afc:	2309      	movs	r3, #9
 8012afe:	6033      	str	r3, [r6, #0]
 8012b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b04:	81a3      	strh	r3, [r4, #12]
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	e03e      	b.n	8012b8a <__swsetup_r+0xba>
 8012b0c:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <__swsetup_r+0xd4>)
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	d101      	bne.n	8012b16 <__swsetup_r+0x46>
 8012b12:	68ac      	ldr	r4, [r5, #8]
 8012b14:	e7eb      	b.n	8012aee <__swsetup_r+0x1e>
 8012b16:	4b24      	ldr	r3, [pc, #144]	; (8012ba8 <__swsetup_r+0xd8>)
 8012b18:	429c      	cmp	r4, r3
 8012b1a:	bf08      	it	eq
 8012b1c:	68ec      	ldreq	r4, [r5, #12]
 8012b1e:	e7e6      	b.n	8012aee <__swsetup_r+0x1e>
 8012b20:	0758      	lsls	r0, r3, #29
 8012b22:	d512      	bpl.n	8012b4a <__swsetup_r+0x7a>
 8012b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b26:	b141      	cbz	r1, 8012b3a <__swsetup_r+0x6a>
 8012b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b2c:	4299      	cmp	r1, r3
 8012b2e:	d002      	beq.n	8012b36 <__swsetup_r+0x66>
 8012b30:	4630      	mov	r0, r6
 8012b32:	f7ff facf 	bl	80120d4 <_free_r>
 8012b36:	2300      	movs	r3, #0
 8012b38:	6363      	str	r3, [r4, #52]	; 0x34
 8012b3a:	89a3      	ldrh	r3, [r4, #12]
 8012b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b40:	81a3      	strh	r3, [r4, #12]
 8012b42:	2300      	movs	r3, #0
 8012b44:	6063      	str	r3, [r4, #4]
 8012b46:	6923      	ldr	r3, [r4, #16]
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	f043 0308 	orr.w	r3, r3, #8
 8012b50:	81a3      	strh	r3, [r4, #12]
 8012b52:	6923      	ldr	r3, [r4, #16]
 8012b54:	b94b      	cbnz	r3, 8012b6a <__swsetup_r+0x9a>
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b60:	d003      	beq.n	8012b6a <__swsetup_r+0x9a>
 8012b62:	4621      	mov	r1, r4
 8012b64:	4630      	mov	r0, r6
 8012b66:	f000 f84d 	bl	8012c04 <__smakebuf_r>
 8012b6a:	89a0      	ldrh	r0, [r4, #12]
 8012b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b70:	f010 0301 	ands.w	r3, r0, #1
 8012b74:	d00a      	beq.n	8012b8c <__swsetup_r+0xbc>
 8012b76:	2300      	movs	r3, #0
 8012b78:	60a3      	str	r3, [r4, #8]
 8012b7a:	6963      	ldr	r3, [r4, #20]
 8012b7c:	425b      	negs	r3, r3
 8012b7e:	61a3      	str	r3, [r4, #24]
 8012b80:	6923      	ldr	r3, [r4, #16]
 8012b82:	b943      	cbnz	r3, 8012b96 <__swsetup_r+0xc6>
 8012b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b88:	d1ba      	bne.n	8012b00 <__swsetup_r+0x30>
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}
 8012b8c:	0781      	lsls	r1, r0, #30
 8012b8e:	bf58      	it	pl
 8012b90:	6963      	ldrpl	r3, [r4, #20]
 8012b92:	60a3      	str	r3, [r4, #8]
 8012b94:	e7f4      	b.n	8012b80 <__swsetup_r+0xb0>
 8012b96:	2000      	movs	r0, #0
 8012b98:	e7f7      	b.n	8012b8a <__swsetup_r+0xba>
 8012b9a:	bf00      	nop
 8012b9c:	24000038 	.word	0x24000038
 8012ba0:	08012f80 	.word	0x08012f80
 8012ba4:	08012fa0 	.word	0x08012fa0
 8012ba8:	08012f60 	.word	0x08012f60

08012bac <abort>:
 8012bac:	b508      	push	{r3, lr}
 8012bae:	2006      	movs	r0, #6
 8012bb0:	f000 f8b6 	bl	8012d20 <raise>
 8012bb4:	2001      	movs	r0, #1
 8012bb6:	f7ee f88b 	bl	8000cd0 <_exit>

08012bba <__swhatbuf_r>:
 8012bba:	b570      	push	{r4, r5, r6, lr}
 8012bbc:	460e      	mov	r6, r1
 8012bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc2:	2900      	cmp	r1, #0
 8012bc4:	b096      	sub	sp, #88	; 0x58
 8012bc6:	4614      	mov	r4, r2
 8012bc8:	461d      	mov	r5, r3
 8012bca:	da07      	bge.n	8012bdc <__swhatbuf_r+0x22>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	89b3      	ldrh	r3, [r6, #12]
 8012bd2:	061a      	lsls	r2, r3, #24
 8012bd4:	d410      	bmi.n	8012bf8 <__swhatbuf_r+0x3e>
 8012bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bda:	e00e      	b.n	8012bfa <__swhatbuf_r+0x40>
 8012bdc:	466a      	mov	r2, sp
 8012bde:	f000 f8bb 	bl	8012d58 <_fstat_r>
 8012be2:	2800      	cmp	r0, #0
 8012be4:	dbf2      	blt.n	8012bcc <__swhatbuf_r+0x12>
 8012be6:	9a01      	ldr	r2, [sp, #4]
 8012be8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012bf0:	425a      	negs	r2, r3
 8012bf2:	415a      	adcs	r2, r3
 8012bf4:	602a      	str	r2, [r5, #0]
 8012bf6:	e7ee      	b.n	8012bd6 <__swhatbuf_r+0x1c>
 8012bf8:	2340      	movs	r3, #64	; 0x40
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	b016      	add	sp, #88	; 0x58
 8012c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c04 <__smakebuf_r>:
 8012c04:	898b      	ldrh	r3, [r1, #12]
 8012c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c08:	079d      	lsls	r5, r3, #30
 8012c0a:	4606      	mov	r6, r0
 8012c0c:	460c      	mov	r4, r1
 8012c0e:	d507      	bpl.n	8012c20 <__smakebuf_r+0x1c>
 8012c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c14:	6023      	str	r3, [r4, #0]
 8012c16:	6123      	str	r3, [r4, #16]
 8012c18:	2301      	movs	r3, #1
 8012c1a:	6163      	str	r3, [r4, #20]
 8012c1c:	b002      	add	sp, #8
 8012c1e:	bd70      	pop	{r4, r5, r6, pc}
 8012c20:	ab01      	add	r3, sp, #4
 8012c22:	466a      	mov	r2, sp
 8012c24:	f7ff ffc9 	bl	8012bba <__swhatbuf_r>
 8012c28:	9900      	ldr	r1, [sp, #0]
 8012c2a:	4605      	mov	r5, r0
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	f7fe ff8b 	bl	8011b48 <_malloc_r>
 8012c32:	b948      	cbnz	r0, 8012c48 <__smakebuf_r+0x44>
 8012c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c38:	059a      	lsls	r2, r3, #22
 8012c3a:	d4ef      	bmi.n	8012c1c <__smakebuf_r+0x18>
 8012c3c:	f023 0303 	bic.w	r3, r3, #3
 8012c40:	f043 0302 	orr.w	r3, r3, #2
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	e7e3      	b.n	8012c10 <__smakebuf_r+0xc>
 8012c48:	4b0d      	ldr	r3, [pc, #52]	; (8012c80 <__smakebuf_r+0x7c>)
 8012c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c4c:	89a3      	ldrh	r3, [r4, #12]
 8012c4e:	6020      	str	r0, [r4, #0]
 8012c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	9b00      	ldr	r3, [sp, #0]
 8012c58:	6163      	str	r3, [r4, #20]
 8012c5a:	9b01      	ldr	r3, [sp, #4]
 8012c5c:	6120      	str	r0, [r4, #16]
 8012c5e:	b15b      	cbz	r3, 8012c78 <__smakebuf_r+0x74>
 8012c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c64:	4630      	mov	r0, r6
 8012c66:	f000 f889 	bl	8012d7c <_isatty_r>
 8012c6a:	b128      	cbz	r0, 8012c78 <__smakebuf_r+0x74>
 8012c6c:	89a3      	ldrh	r3, [r4, #12]
 8012c6e:	f023 0303 	bic.w	r3, r3, #3
 8012c72:	f043 0301 	orr.w	r3, r3, #1
 8012c76:	81a3      	strh	r3, [r4, #12]
 8012c78:	89a0      	ldrh	r0, [r4, #12]
 8012c7a:	4305      	orrs	r5, r0
 8012c7c:	81a5      	strh	r5, [r4, #12]
 8012c7e:	e7cd      	b.n	8012c1c <__smakebuf_r+0x18>
 8012c80:	080118d9 	.word	0x080118d9

08012c84 <_realloc_r>:
 8012c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c86:	4607      	mov	r7, r0
 8012c88:	4614      	mov	r4, r2
 8012c8a:	460e      	mov	r6, r1
 8012c8c:	b921      	cbnz	r1, 8012c98 <_realloc_r+0x14>
 8012c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c92:	4611      	mov	r1, r2
 8012c94:	f7fe bf58 	b.w	8011b48 <_malloc_r>
 8012c98:	b922      	cbnz	r2, 8012ca4 <_realloc_r+0x20>
 8012c9a:	f7ff fa1b 	bl	80120d4 <_free_r>
 8012c9e:	4625      	mov	r5, r4
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ca4:	f000 f87a 	bl	8012d9c <_malloc_usable_size_r>
 8012ca8:	42a0      	cmp	r0, r4
 8012caa:	d20f      	bcs.n	8012ccc <_realloc_r+0x48>
 8012cac:	4621      	mov	r1, r4
 8012cae:	4638      	mov	r0, r7
 8012cb0:	f7fe ff4a 	bl	8011b48 <_malloc_r>
 8012cb4:	4605      	mov	r5, r0
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	d0f2      	beq.n	8012ca0 <_realloc_r+0x1c>
 8012cba:	4631      	mov	r1, r6
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	f7fe ff12 	bl	8011ae6 <memcpy>
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	4638      	mov	r0, r7
 8012cc6:	f7ff fa05 	bl	80120d4 <_free_r>
 8012cca:	e7e9      	b.n	8012ca0 <_realloc_r+0x1c>
 8012ccc:	4635      	mov	r5, r6
 8012cce:	e7e7      	b.n	8012ca0 <_realloc_r+0x1c>

08012cd0 <_raise_r>:
 8012cd0:	291f      	cmp	r1, #31
 8012cd2:	b538      	push	{r3, r4, r5, lr}
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	460d      	mov	r5, r1
 8012cd8:	d904      	bls.n	8012ce4 <_raise_r+0x14>
 8012cda:	2316      	movs	r3, #22
 8012cdc:	6003      	str	r3, [r0, #0]
 8012cde:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}
 8012ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ce6:	b112      	cbz	r2, 8012cee <_raise_r+0x1e>
 8012ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cec:	b94b      	cbnz	r3, 8012d02 <_raise_r+0x32>
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 f830 	bl	8012d54 <_getpid_r>
 8012cf4:	462a      	mov	r2, r5
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cfe:	f000 b817 	b.w	8012d30 <_kill_r>
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d00a      	beq.n	8012d1c <_raise_r+0x4c>
 8012d06:	1c59      	adds	r1, r3, #1
 8012d08:	d103      	bne.n	8012d12 <_raise_r+0x42>
 8012d0a:	2316      	movs	r3, #22
 8012d0c:	6003      	str	r3, [r0, #0]
 8012d0e:	2001      	movs	r0, #1
 8012d10:	e7e7      	b.n	8012ce2 <_raise_r+0x12>
 8012d12:	2400      	movs	r4, #0
 8012d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012d18:	4628      	mov	r0, r5
 8012d1a:	4798      	blx	r3
 8012d1c:	2000      	movs	r0, #0
 8012d1e:	e7e0      	b.n	8012ce2 <_raise_r+0x12>

08012d20 <raise>:
 8012d20:	4b02      	ldr	r3, [pc, #8]	; (8012d2c <raise+0xc>)
 8012d22:	4601      	mov	r1, r0
 8012d24:	6818      	ldr	r0, [r3, #0]
 8012d26:	f7ff bfd3 	b.w	8012cd0 <_raise_r>
 8012d2a:	bf00      	nop
 8012d2c:	24000038 	.word	0x24000038

08012d30 <_kill_r>:
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	4d07      	ldr	r5, [pc, #28]	; (8012d50 <_kill_r+0x20>)
 8012d34:	2300      	movs	r3, #0
 8012d36:	4604      	mov	r4, r0
 8012d38:	4608      	mov	r0, r1
 8012d3a:	4611      	mov	r1, r2
 8012d3c:	602b      	str	r3, [r5, #0]
 8012d3e:	f7ed ffb7 	bl	8000cb0 <_kill>
 8012d42:	1c43      	adds	r3, r0, #1
 8012d44:	d102      	bne.n	8012d4c <_kill_r+0x1c>
 8012d46:	682b      	ldr	r3, [r5, #0]
 8012d48:	b103      	cbz	r3, 8012d4c <_kill_r+0x1c>
 8012d4a:	6023      	str	r3, [r4, #0]
 8012d4c:	bd38      	pop	{r3, r4, r5, pc}
 8012d4e:	bf00      	nop
 8012d50:	24009528 	.word	0x24009528

08012d54 <_getpid_r>:
 8012d54:	f7ed bfa4 	b.w	8000ca0 <_getpid>

08012d58 <_fstat_r>:
 8012d58:	b538      	push	{r3, r4, r5, lr}
 8012d5a:	4d07      	ldr	r5, [pc, #28]	; (8012d78 <_fstat_r+0x20>)
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	4604      	mov	r4, r0
 8012d60:	4608      	mov	r0, r1
 8012d62:	4611      	mov	r1, r2
 8012d64:	602b      	str	r3, [r5, #0]
 8012d66:	f7ee f802 	bl	8000d6e <_fstat>
 8012d6a:	1c43      	adds	r3, r0, #1
 8012d6c:	d102      	bne.n	8012d74 <_fstat_r+0x1c>
 8012d6e:	682b      	ldr	r3, [r5, #0]
 8012d70:	b103      	cbz	r3, 8012d74 <_fstat_r+0x1c>
 8012d72:	6023      	str	r3, [r4, #0]
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	bf00      	nop
 8012d78:	24009528 	.word	0x24009528

08012d7c <_isatty_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4d06      	ldr	r5, [pc, #24]	; (8012d98 <_isatty_r+0x1c>)
 8012d80:	2300      	movs	r3, #0
 8012d82:	4604      	mov	r4, r0
 8012d84:	4608      	mov	r0, r1
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	f7ee f801 	bl	8000d8e <_isatty>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d102      	bne.n	8012d96 <_isatty_r+0x1a>
 8012d90:	682b      	ldr	r3, [r5, #0]
 8012d92:	b103      	cbz	r3, 8012d96 <_isatty_r+0x1a>
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	24009528 	.word	0x24009528

08012d9c <_malloc_usable_size_r>:
 8012d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012da0:	1f18      	subs	r0, r3, #4
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	bfbc      	itt	lt
 8012da6:	580b      	ldrlt	r3, [r1, r0]
 8012da8:	18c0      	addlt	r0, r0, r3
 8012daa:	4770      	bx	lr

08012dac <_init>:
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	bf00      	nop
 8012db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012db2:	bc08      	pop	{r3}
 8012db4:	469e      	mov	lr, r3
 8012db6:	4770      	bx	lr

08012db8 <_fini>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	bf00      	nop
 8012dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dbe:	bc08      	pop	{r3}
 8012dc0:	469e      	mov	lr, r3
 8012dc2:	4770      	bx	lr
